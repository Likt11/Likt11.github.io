<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RsaCtfTool工具的安装</title>
    <url>/2024/05/23/RsaCtfTool%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、安装RsaCtfTool"><a href="#一、安装RsaCtfTool" class="headerlink" title="一、安装RsaCtfTool"></a>一、<strong>安装RsaCtfTool</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Ganapati/RsaCtfTool.git</span><br></pre></td></tr></table></figure>
<h3 id="二、安装相应环境"><a href="#二、安装相应环境" class="headerlink" title="二、安装相应环境"></a>二、<strong>安装相应环境</strong></h3><p>​    <strong>切换目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd RsaCtfTool</span><br></pre></td></tr></table></figure>
<ul>
<li>安装mpfr<strong>（依次执行下面命令）</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.mpfr.org/mpfr-current/mpfr-4.2.0.tar.bz2</span><br></pre></td></tr></table></figure>
<p>（目前最新版本4.2.0）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v=4.2.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -jxvf mpfr-$&#123;v&#125;.tar.bz2 &amp;&amp; cd mpfr-$&#123;v&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make check &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ul>
<li>安装mpc<strong>（依次执行以下命令）</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v=1.1.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget ftp://ftp.gnu.org/gnu/mpc/mpc-$&#123;v&#125;.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf mpc-$&#123;v&#125;.tar.gz &amp;&amp; cd mpc-$&#123;v&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make check &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="三、安装python库（本文使用python3版本）"><a href="#三、安装python库（本文使用python3版本）" class="headerlink" title="三、安装python库（本文使用python3版本）"></a>三、<strong>安装python库（本文使用python3版本）</strong></h3><p>可使用命令更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/1.png" alt="image-20230820165207896"></p>
<p>随后可用命令查看版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/2.png" alt="image-20230820165226251"></p>
<h3 id="四、配置库"><a href="#四、配置库" class="headerlink" title="四、配置库"></a>四、<strong>配置库</strong></h3><ul>
<li>切换目录（可以重开一个终端）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd RsaCtfTool</span><br></pre></td></tr></table></figure>
<ul>
<li>添加路径到环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$PATH:/home/kali/.local/bin&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>安装requirements.txt（此处使用镜像下载，不容易出错）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt -i </span><br><span class="line"> http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<ul>
<li>安装结束，使用命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 RsaCtfTool.py</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/3.png" alt="image-20230820174038768"></p>
<h3 id="五、可能出现的报错及解决方法："><a href="#五、可能出现的报错及解决方法：" class="headerlink" title="五、可能出现的报错及解决方法："></a>五、<strong>可能出现的报错及解决方法：</strong></h3><ol>
<li>安装mpc时，报错</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/4.png" alt="image-20230820164949457"></p>
<p>出现这个错误可能是因为缺少libmpfr库或者库的版本不匹配。</p>
<p><strong>安装命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmpfr-dev</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/5.png" alt="image-20230820165145475"></p>
<p>安装成功后，随后再重新执行安装mpc的命令（如下）即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make check &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ol>
<li>安装requirements.txt时报错</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/6.png" alt="image-20230820163650133"></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/7.png" alt="image-20230820165018325"></p>
<p>但只要按上述第四点<strong>配置库</strong>一步一步操作，实操是可以解决问题。</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/8.png" alt="image-20230820163715465"></p>
<p>【其实这个是挺久之前安装过程记录下来的，所以一些版本可能有更新！】</p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建fabric</title>
    <url>/2024/07/14/Centos7%E6%90%AD%E5%BB%BAfabric/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><span style="color=black;font-size:25px">环境：centos7</span></strong></p>
<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html">https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html</a></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="一、打开终端，安装所需要的库"><a href="#一、打开终端，安装所需要的库" class="headerlink" title="一、打开终端，安装所需要的库"></a>一、打开终端，安装所需要的库</h3><p>依次执行以下命令进行库的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root//切换root用户</span><br><span class="line">yum update //yum更新</span><br><span class="line">yum install vim</span><br><span class="line">yum install git</span><br><span class="line">yum install curl  //利用URL语法在命令行下工作的文件传输工具，支持文件上传和文件下载</span><br><span class="line">yum install wget  //下载文件的工具，经常要下载一些软件或从远程服务器恢复服务器</span><br><span class="line">yum install libtool-ltdl-devel //make编译fabric用到</span><br><span class="line">yum install epel-release //epel存储库，提供了许多额外的软件包</span><br><span class="line">yum install jq //fabric测试网络用到</span><br></pre></td></tr></table></figure>
<h3 id="二、go语言环境安装"><a href="#二、go语言环境安装" class="headerlink" title="二、go语言环境安装"></a>二、go语言环境安装</h3><ol>
<li><p>下载Go压缩包，并解压移动</p>
<ul>
<li><p>进入downloads目录：<code>cd Downloads</code></p>
</li>
<li><p>输入命令：<code>wget https://golang.google.cn/dl/go1.22.3.linux-amd64.tar.gz</code></p>
</li>
<li><p>解压该压缩包：<code>tar -xzf go1.22.3.linux-amd64.tar.gz</code></p>
</li>
<li><p>移动解压后的文件夹到/usr/local底下：<code>mv go /usr/local</code></p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150237693.png" alt="image-20240714150237693"></p>
</li>
<li><p>配置GO全局环境变量</p>
<p>输入命令：<code>vim ~/.bashrc</code></p>
<p>​    添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export  PATH=$PATH:/usr/local/go/bin</span><br><span class="line">export  GOROOT=/usr/local/go</span><br><span class="line">export  GOPATH=$HOME/go</span><br><span class="line">export  PATH=$PATH:$HOME/go/bin</span><br></pre></td></tr></table></figure>
<p>​    使文件生效：<code>source ~/.bashrc</code></p>
</li>
<li><p>查看go版本：<code>go version</code></p>
</li>
<li><p>为当前用户设置go代理，国内镜像代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/go/bin/go env -w GO111MODULE=on</span><br><span class="line">sudo /usr/local/go/bin/go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="三、docker安装"><a href="#三、docker安装" class="headerlink" title="三、docker安装"></a>三、docker安装</h3><ol>
<li><p>安装国内阿里云镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版本docker: <code>yum install docker-ce</code></p>
</li>
<li><p>启动docker：<code>service docker start</code></p>
</li>
<li><p>查看docker版本，启动是否正常：<code>docker version</code></p>
</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150226927.png" alt="image-20240714150226927"></p>
<h3 id="四、docker-compose安装"><a href="#四、docker-compose安装" class="headerlink" title="四、docker-compose安装"></a>四、docker-compose安装</h3><ol>
<li>安装依赖包：<code>yum install epel-release</code></li>
<li>升级依赖包：<code>yum -y update</code></li>
<li>安装pip：<code>yum -y install python-pip</code></li>
<li>升级pip：<code>pip install --upgrade &quot;pip &lt;21.0&quot;</code></li>
<li>安装docker-compose：<code>pip install -U docker-compose</code></li>
<li>查看版本：<code>docker-compose version</code></li>
</ol>
<h3 id="五、下载fabric源码，编译fabric"><a href="#五、下载fabric源码，编译fabric" class="headerlink" title="五、下载fabric源码，编译fabric"></a>五、下载fabric源码，编译fabric</h3><ol>
<li><p>新建存放fabric源码的目录并进入目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/hyperledger</span><br><span class="line">cd $GOPATH/src/github.com/hyperledger</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载源码：<code>git clone https://github.com/hyperledger/fabric.git</code></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150211520.png" alt="image-20240714150211520"></p>
</li>
<li><p>查看fabric所有版本，并切换版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd fabric</span><br><span class="line">git tag 查看版本</span><br><span class="line">git checkout -b v2.5.7  切换版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译fabric：<code>make release</code>（如下即编译成功）</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522225312266-17163895933853.png" alt="image-20240522225312266"></p>
</li>
<li><p>执行脚本文件：切换目录<code>cd fabric/scripts</code>随后执行脚本文件   <code>./bootstrap.sh</code></p>
<p><span style='color:red;font-size:18px;'>真的！建议尽量就是用热点、开VPN，尽量就是让脚本文件自己执行成功，如果自己去分开拉文件的话后面大概率会出现各种各种的错！！！！血的教训 </span></p>
<p>截图如下：（因为我先用命令：<code>git clone https://github.com/hyperledger/fabric-samples.git</code>先克隆了fabric-samples所以脚本文件执行的时候这一步跳过了）</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150156829.png" alt="image-20240714150156829"></p>
<p>我这里脚本文件拉镜像的时候，失败了，根据提示是因为docker守护进程服务没开。从输出中可以看出，Docker服务被禁用了。</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150137641.png" alt="image-20240714150137641"></p>
<p>解决方法如下：</p>
<blockquote>
<ol>
<li><p><strong>启用Docker服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重新启动Docker服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查Docker服务状态</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure>
<p>确保服务状态显示为“active (running)”。</p>
</li>
<li><p><strong>尝试再次拉取镜像</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull hyperledger/fabric-peer:2.5.7</span><br><span class="line">docker pull hyperledger/fabric-orderer:2.5.7</span><br><span class="line">docker pull hyperledger/fabric-ccenv:2.5.7</span><br><span class="line">docker pull hyperledger/fabric-baseos:2.5.7</span><br><span class="line">docker pull hyperledger/fabric-ca:1.5.10</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>附有截图如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150107733.png" alt="image-20240714150107733"></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150052604.png" alt="image-20240714150052604"></p>
<p>附上镜像<code>docker images</code>截图:</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522231202819-17163907242828.png" alt="image-20240522231202819" style="zoom: 50%;" /></p>
<p>有个办法可以确认脚本文件是否执行成功：</p>
<p><code>ls fabric-samples/bin</code>以及<code>ls fabric-samples/config</code> 看看这个目录是否存在，且里面是否有文件（因为其实如果分步拉文件的话也是要解压fabric二进制中的bin和config文件夹放入fabric-samples中，所以如果./bootstrap.sh执行成功的话在fabric-samples文件夹中可以看到bin和config）</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522231442017-17163908834459.png" alt="image-20240522231442017" style="zoom:33%;" /></p>
</li>
</ol>
<h3 id="六、运行测试fabric"><a href="#六、运行测试fabric" class="headerlink" title="六、运行测试fabric"></a>六、运行测试fabric</h3><ol>
<li><p>切换目录：</p>
<p><code>cd fabric-samples/test-network</code></p>
</li>
<li><p><code>./network.sh down</code>先down一下，把之前可能残余的卷、镜像等删除，避免之后。。。（后果很严重说实话）</p>
</li>
<li><p><code>./network.sh up</code>，启用网络：<code>docker ps -a</code>（看到有一个orderer、两个peer）如下成功</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150028014.png" alt="image-20240714150028014"></p>
</li>
<li><p>创建通道：<code>./network.sh createChannel</code> （没命名即默认为mychannel)</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714150001347.png" alt="image-20240714150001347"></p>
</li>
<li><p>在创建的通道上部署链码：<code>./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go</code></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522222301926-17163877831119.png" alt="image-20240522222301926"></p>
</li>
<li><p>交互：</p>
</li>
</ol>
<p>①首先在<code>test-network</code>目录下使用以下命令将这些二进制文件添加到CLI路径中；将FABRIC_CFG_PATH设置为指向核心，fabric-samples存储库中的Yaml文件:</p>
<p><code>export PATH=$&#123;PWD&#125;/../bin:$PATH</code></p>
<p><code>export FABRIC_CFG_PATH=$PWD/../config/</code></p>
<p>②进而，配置Org1环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Environment variables for Org1</span><br><span class="line"></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure>
<p>③接下来，运行以下命令初始化带有资产的分类账。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot; -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt&quot; -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>成功后如下截图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-05-25 12:17:53.774 CST 0001 INFO [chaincodeCmd] chaincodeInvokeOrQuery -&gt; Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522222736882-171638805793510.png" alt="image-20240522222736882"></p>
<p>④运行以下命令获取已添加到通道分类账的资产列表:</p>
<p><code>peer chaincode query -C mychannel -n basic -c &#39;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#39;</code></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522222852183-171638813337111.png" alt="image-20240522222852183"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;AppraisedValue&quot;:300,&quot;Color&quot;:&quot;blue&quot;,&quot;ID&quot;:&quot;asset1&quot;,&quot;Owner&quot;:&quot;Tomoko&quot;,&quot;Size&quot;:5&#125;,&#123;&quot;AppraisedValue&quot;:400,&quot;Color&quot;:&quot;red&quot;,&quot;ID&quot;:&quot;asset2&quot;,&quot;Owner&quot;:&quot;Brad&quot;,&quot;Size&quot;:5&#125;,&#123;&quot;AppraisedValue&quot;:500,&quot;Color&quot;:&quot;green&quot;,&quot;ID&quot;:&quot;asset3&quot;,&quot;Owner&quot;:&quot;Jin Soo&quot;,&quot;Size&quot;:10&#125;,&#123;&quot;AppraisedValue&quot;:600,&quot;Color&quot;:&quot;yellow&quot;,&quot;ID&quot;:&quot;asset4&quot;,&quot;Owner&quot;:&quot;Max&quot;,&quot;Size&quot;:10&#125;,&#123;&quot;AppraisedValue&quot;:700,&quot;Color&quot;:&quot;black&quot;,&quot;ID&quot;:&quot;asset5&quot;,&quot;Owner&quot;:&quot;Adriana&quot;,&quot;Size&quot;:15&#125;,&#123;&quot;AppraisedValue&quot;:800,&quot;Color&quot;:&quot;white&quot;,&quot;ID&quot;:&quot;asset6&quot;,&quot;Owner&quot;:&quot;Michel&quot;,&quot;Size&quot;:15&#125;]</span><br></pre></td></tr></table></figure>
<p>⑤使用以下命令通过调用资产转移(基本)链码来更改分类账上资产的所有者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot; -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt&quot; -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>成功截图如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-05-25 12:19:01.643 CST 0001 INFO [chaincodeCmd] chaincodeInvokeOrQuery -&gt; Chaincode invoke successful. result: status:200 payload:&quot;Michel&quot; </span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522223039989-171638824089212.png" alt="image-20240522223039989"></p>
<p>⑥由于我们已经查询了Org1对等体，我们可以借此机会查询在Org2对等体上运行的链码。需要设置的环境变量如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Environment variables for Org2</span><br><span class="line"></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure>
<p>⑦现在可以查询运行在peer0.org2.example.com上的资产转移(基本)链码:</p>
<p><code>peer chaincode query -C mychannel -n basic -c &#39;&#123;&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset6&quot;]&#125;&#39;</code></p>
<p><strong>测试全过程截图如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;AppraisedValue&quot;:800,&quot;Color&quot;:&quot;white&quot;,&quot;ID&quot;:&quot;asset6&quot;,&quot;Owner&quot;:&quot;Christopher&quot;,&quot;Size&quot;:15&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240522223516921-171638851832313.png" alt="image-20240522223516921"></p>
<p>7.关闭网络<code>./network.sh down</code></p>
<h2 id="一些报错："><a href="#一些报错：" class="headerlink" title="一些报错："></a>一些报错：</h2><ul>
<li><code>pip install -U docker-compose</code>基础性一个报错：（应该大部分都不会出现，浅浅记录一下）</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240714145927583.png" alt="image-20240714145927583"></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240521164715347-17162812364351.png" alt="image-20240521164715347" style="zoom:33%;" /></p>
<p>​    关于pip的问题，我还进行了一个步骤，如果上面没解决，蛮试一下这个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">cd .pip</span><br><span class="line">vim pip.conf</span><br><span class="line">加入镜像</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240521164823586-17162813051443.png" alt="image-20240521164823586" style="zoom:50%;" /></p>
<ul>
<li>还是<code>pip install -U docker-compose</code>报错</li>
</ul>
<p>出现类似如下图所示报错，解决方法如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240422205520511.png" alt="image-20240422205520511" style="zoom:33%;" /></p>
<p>依次输入以下指令：</p>
<p><code>sudo find / -name *subpro*.egg-info</code></p>
<p><code>rm -rf /usr/lib64/python2.7/site-packages/subprocess32-3.2.6-py2.7.egg-info</code></p>
<p>这里发现继续报错如下</p>
<blockquote>
<p>sudo find / -name <em>subpro</em>.egg-info<br>find: ‘/run/user/1000/gvfs’: Permission denied</p>
</blockquote>
<p>于是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount /run/user/1000/gvfs    // 卸载该文件</span><br><span class="line">rm -rf /run/user/1000/gvfs    // 删除该文件</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240422210903771.png" alt="image-20240422210903771" style="zoom:50%;" /></p>
<p>现在重新执行命令安装：<code>pip install -U docker-compose</code></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240422211153785.png" alt="image-20240422211153785" style="zoom:50%;" /></p>
<ul>
<li>记录一下： 下载的时候文件被分隔了多个部分【下面截图的是2.3.2版本，但是我成功搭建的是2.5.7版本，因为这个错误是我最开始搭建遇到的，后面重装虚拟机，我也选择了一个高版本的】【关于文件合并吧】</li>
</ul>
<p>但是可能会出现压缩包被分片:scripts文件夹中出现了hyperledger-fabric-linux-amd64-2.3.2.tar.gz的文件，同时还有hyperledger-fabric-linux-amd64-2.3.2.tar.gz.1和hyperledger-fabric-linux-amd64-2.3.2.tar.gz.2</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240430113712833.png" alt="image-20240430113712833" style="zoom:33%;" /></p>
<p>出现这种文件名后跟点号和数字的情况，通常表明文件在传输或复制过程中被分割成了多个部分，以方便恢复或传输</p>
<p>我使用file命令查看这三个文件，发现它们的修改日期和文件类型都一直，故大概率可以合并：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240430115127460.png" alt="image-20240430115127460"></p>
<p>①执行命令：<code>cat hyperledger-fabric-linux-amd64-2.3.2.tar.gz.* &gt; hyperledger-fabric-linux-amd64-2.3.2.tar.gz</code>  进行合并</p>
<p>②<code>ls</code>发现这三个文件都还存在，因为cat命令只完成了合并，没有删除，于是执行命令：<code>rm hyperledger-fabric-linux-amd64-2.3.2.tar.gz.*</code>，这个命令将会删除所有以 <code>hyperledger-fabric-linux-amd64-2.3.2.tar.gz.</code> 开头，并且后面跟着任意字符的文件。</p>
<ul>
<li><code>make fabric-ca-server</code>这里报错【这里其实是我参考<a href="https://blog.csdn.net/u012561176/article/details/118934571">师傅一的博客</a>教程搭建过程中遇到的，后来我结合官方文档搭建的时候其实没用到这个步骤，蛮写下】【归根到底其实就是从GitHub上下东西不完整导致的】</li>
</ul>
<p>这里如果出错，我找了很多的方法，都不能解决。最终发现其实是前面安装过程中有些安装失败了。（比如我就是因为fabric-ca的安装问题）下面提供一些我报错的一些截图：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240423170402519.png" alt="image-20240423170402519" style="zoom:33%;" /></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240424181207918.png" alt="image-20240424181207918" style="zoom: 50%;" /></p>
<p>发现问题之后，重新安装了fabric-ca，最后编译成功，截图参考如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240430124638452.png" alt="image-20240430124638452" style="zoom:25%;" /></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>这个fabric的搭建耗时可能有十几天吧，看了很多博客类教程，踩了很多坑，fabric下了删删了下，甚至为此重装了一个虚拟机。这里建议，整体的安装还是参考官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html">https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html</a></p>
</li>
<li><p>fabric的搭建涉及很多前置环境的搭建，为此这里参考的是<a href="https://blog.csdn.net/u012561176/article/details/118934571">师傅一的博客</a>以及<a href="https://www.cnblogs.com/ifantasy/p/16049562.html#fn1">师傅二</a></p>
</li>
<li><p>关于<code>./bootstrap.sh</code>脚本的执行，建议真的还是让他执行成功（挺耗时间），如果实在是不行，可以参考<a href="https://blog.csdn.net/lakersssss24/article/details/119487588">师傅三的博客</a>分开拉（我的确是有用过这个方法的，结果一言难尽。。。。）【要下载的文件：①hyperledger/fabric-samples</p>
<p>即 <code>git clone https://github.com/hyperledger/fabric-samples.git</code>  ② fabric binaries文件<code>https://github.com/hyperledger/fabric/releases/download/v2.5.7/hyperledger-fabric-linux-amd64-2.5.7.tar.gz</code></p>
<p> ③fabric-ca-client binary文件 <code>https://github.com/hyperledger/fabric-ca/releases/download/v1.5.10/hyperledger-fabric-ca-linux-amd64-1.5.10.tar.gz</code> ④脚本实在无法执行，用./bootstrap.sh -b命令<code>Pull Hyperledger Fabric docker images</code>】下载完之后需要解压fabric binaries文件将其bin和config移入fabric-samples文件夹等等（这种手动安装说实话具体不清楚到底怎么操作，失败了无数次）（参考<a href="https://www.cnblogs.com/ifantasy/p/16049562.html#fn1">师傅二</a>的步骤试试吧）</p>
</li>
<li><p>其实最大头也就是<code>./bootstrap.sh</code>脚本的执行，成功的话，一切好说，后面一路顺畅。失败的话，后面。。。。。（可以体会一下::sweat_smile::sweat_smile::sweat_smile:）</p>
</li>
<li><p><del>无论如何经历了，所以这里附上一些过程中遇到的些错误，有些没截图了</del>：（你不是一个人！！！！）糟糕！我发现我都找不到截图了，报错之后我是直接复制到浏览器找答案了。总之，如果在运行测试fabric中出现各种错误，大概率大概率就是文件下载问题，这边建议全删重下！！！因为大概率是找不到答案的，或许可以找到一个方法解决当下的报错，但是报错是无止境的。。。</p>
<p>找到几张：</p>
<p>①</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240523002015466-171639481690515.png" alt="image-20240523002015466"></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240523002031487-171639483244616.png" alt="image-20240523002031487"></p>
<p>②创建通道之后如果.network.sh down后再up，那么创建的通道会消失需要重新创建：</p>
<p>目前一切没有问题，合约交互的时候报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;error in simulation: failed to execute transaction 345f9b4d7b04ffbca4ede017f667904dd6ff63845a872daac9224ae619061921: could not launch chaincode basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad: error starting container: error starting container: API error (404): network _test not found&quot; </span><br></pre></td></tr></table></figure>
<p>这呢，我试着按这个改了，但是无效：</p>
<p><a href="https://blog.csdn.net/h363659487/article/details/117850567">https://blog.csdn.net/h363659487/article/details/117850567</a> </p>
<p>最后改回去了，并采用了下面那种方法（这里有效解决了test not found:  </p>
<p>参考博客<a href="https://blog.csdn.net/m0_57128752/article/details/120287922【按这教程我确实解决了这个问题】">https://blog.csdn.net/m0_57128752/article/details/120287922【按这教程我确实解决了这个问题】</a></p>
<p>③这下吧，终于解决了_test not found的问题，but 现在创建channel都failed了一直，有点难绷。</p>
<p>④真的就是报错无止境，故弃之，全删，重装！</p>
</li>
<li><p>关于续传：虽然说wget支持断点续传，即从上次中断的地方继续开始下载。但是实践好像不成功，于是添加-c参数强制它续传下载。</p>
<p><code>sudo wget -c https://github.com/hypDerledger/fabric/releases/download/v2.5.7/hyperledger-fabric-linux-amd64-2.5.7.tar.gz</code></p>
</li>
</ol>
<p><strong>写在最后：</strong>其实搭建过程相对较简单，但是我花了好久:fist_oncoming:，希望这篇博客可以帮到每一个深陷困境的大家！</p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>fabric</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware tools安装</title>
    <url>/2024/09/20/vmware-tools%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="E:\Git\MyBlog\source\_posts\vmware-tools安装.assets\image-20240920003553351-17267637874171.png" alt="image-20240920003553351"></p>
<p><img data-src="E:\Git\MyBlog\source\_posts\vmware-tools安装.assets\image-20240920003636218-17267637972312.png" alt="image-20240920003636218"></p>
<p><img data-src="E:\Git\MyBlog\source\_posts\vmware-tools安装.assets\image-20240920004006301-17267640076671.png" alt="image-20240920004006301"></p>
<p><img data-src="E:\Git\MyBlog\source\_posts\vmware-tools安装.assets\image-20240920004134321-17267641022232.png" alt="image-20240920004134321"></p>
]]></content>
  </entry>
  <entry>
    <title>netcat正向和反向shell</title>
    <url>/2024/09/22/netcat%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>函数的设计及调用【数据结构实验报告一 C语言】</title>
    <url>/2024/07/21/%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8F%8A%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数的设计及调用（抽象数据类型）"><a href="#函数的设计及调用（抽象数据类型）" class="headerlink" title="函数的设计及调用（抽象数据类型）"></a>函数的设计及调用（抽象数据类型）</h1><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ol>
<li>掌握程序设计的基本方法，复习C语言，并实现简单的算法设计。</li>
<li>掌握结构体类型的定义方法以及自定义数据类型的使用。</li>
<li>掌握函数的设计及调用。</li>
<li>掌握抽象数据类型的基本概念、定义。</li>
<li>学会理解给定的ADT描述，从而利用程序语言加以实现。</li>
<li>学习基本的程序组织方法和对抽象数据类型实现的应用。</li>
<li>熟悉开发环境、程序调试的方法。</li>
</ol>
<h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><ol>
<li>设计一个复数的抽象类型定义。</li>
<li>实现一个结构体类型描述“复数”的结构定义。</li>
<li>实现复数的初始化、加法、减法、乘法，以及求复数的实部、虚部等基本操作。</li>
<li>编写函数对所实现的抽象数据类型进行测试，验证其正确性。</li>
</ol>
<h3 id="三、详细设计及运行结果"><a href="#三、详细设计及运行结果" class="headerlink" title="三、详细设计及运行结果"></a>三、详细设计及运行结果</h3><ol>
<li>说明各种功能实现的具体设计（可以是步骤描述或流程图）</li>
<li>测试数据和结果显示与分析</li>
<li>定义一个复数的抽象结构体类型。</li>
<li>对复数进行赋值。</li>
<li>设计复数的加法减法以及乘法的函数。</li>
<li>主函数进行测试。</li>
</ol>
<h3 id="四、调试情况，设计技巧及体会"><a href="#四、调试情况，设计技巧及体会" class="headerlink" title="四、调试情况，设计技巧及体会"></a>四、调试情况，设计技巧及体会</h3><p>Vscode出现闪退问题，已解决。</p>
<p>乱码问题，已解决。</p>
<p>C语言输入输出格式问题，已回顾。</p>
<h3 id="五、源程序清单"><a href="#五、源程序清单" class="headerlink" title="五、源程序清单"></a>五、源程序清单</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//避免闪退</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> real;</span><br><span class="line">    <span class="type">float</span> image;</span><br><span class="line"></span><br><span class="line">&#125; Complex; <span class="comment">// 复数结构体</span></span><br><span class="line"></span><br><span class="line">Complex <span class="title function_">assign</span><span class="params">(<span class="type">float</span> real, <span class="type">float</span> image)</span> <span class="comment">// 赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c.real = real;</span><br><span class="line">    c.image = image;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="title function_">add</span><span class="params">(Complex c1, Complex c2)</span> <span class="comment">// 加法</span></span><br><span class="line">&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c.real = c1.real + c2.real;</span><br><span class="line">    c.image = c1.image + c2.image;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="title function_">sub</span><span class="params">(Complex c1, Complex c2)</span> <span class="comment">// 减法</span></span><br><span class="line">&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c.real = c1.real - c2.real;</span><br><span class="line">    c.image = c1.image - c2.image;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="title function_">mutiply</span><span class="params">(Complex c1, Complex c2)</span> <span class="comment">// 乘法</span></span><br><span class="line">&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c.real = c1.real * c2.real - c1.image * c2.image;</span><br><span class="line">    c.image = c1.real * c2.image + c1.image * c2.real;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Complex a, b, c, d, f;</span><br><span class="line">    a = assign(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    b = assign(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    c = add(a, b);</span><br><span class="line">    d = sub(a, b);</span><br><span class="line">    f = mutiply(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两个复数相加结果为：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f,%f&quot;</span>, c.real, c.image);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n两个复数相减结果为：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f,%f&quot;</span>, d.real, d.image);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n两个复数相乘结果为：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f,%f&quot;</span>, f.real, f.image);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>); <span class="comment">// 避免闪退</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果出现乱码，则将右下角的utf-8编码————通过编码保存————修改为gbk编码即可。</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240721112419860.png" alt="image-20240721112419860"> </p>
<p><strong>下一篇：<a href="https://likt11.github.io/2024/07/21/线性表/">线性表 | Likt’s Blog (likt11.github.io)</a></strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>构造二叉链表树实验报告</title>
    <url>/2024/07/21/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ol>
<li>熟练掌握树的基本概念、定义和性质。</li>
<li>熟练掌握二叉树的二叉链表存储结构，以及二叉树的各种基本操作。</li>
<li>掌握构造二叉链表树的不同算法，能够从输入数据构造二叉树。</li>
<li>掌握遍历二叉树的三种递归算法。</li>
<li>学习利用栈/队列实现二叉树的非递归遍历操作。</li>
<li>能够对二叉树遍历操作加以灵活应用，实现计算二叉树的结点、计算二叉树的深度和计算二叉树叶子结点的算法。</li>
<li>进一步加深对二叉树结构和性质的理解，逐步培养解决实际问题的编程能力。</li>
</ol>
<h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><ol>
<li>从输入数据的基础上建立二叉链表树，并实现二叉树抽象类型定义中的基本操作。</li>
<li>分别调用先序、中序和后序遍历递归算法对二叉链表树进行遍历，对比各种不同遍历算法的结果。</li>
<li>尝试使用不同的存储结构存储二叉树，例如顺序存储，并能够实现两种存储结构之间的转换。</li>
<li>用非递归方法实现二叉树的遍历操作。</li>
<li>实现计算二叉树的深度的算法。</li>
<li>实现计算二叉树的叶子结点数的算法。</li>
</ol>
<h2 id="三、详细设计及运行结果"><a href="#三、详细设计及运行结果" class="headerlink" title="三、详细设计及运行结果"></a>三、详细设计及运行结果</h2><p>依据以下二叉树进行测试实验，首先按照先序序列<code>ABE##DF###C##</code>对该二叉链表树进行输入。对其进行先序遍历：ABEDFC，中序遍历： EBFDAC，后序遍历：EFDBCA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A--&gt;B;</span><br><span class="line">A--&gt;C;</span><br><span class="line">B--&gt;D;</span><br><span class="line">B--&gt;E;</span><br><span class="line">E--&gt;3#;</span><br><span class="line">E--&gt;4#;</span><br><span class="line">D--&gt;F;</span><br><span class="line">D--&gt;#;</span><br><span class="line">C--&gt;1#;</span><br><span class="line">C--&gt;2#;</span><br><span class="line">F--&gt;7#;</span><br><span class="line">F--&gt;8#;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>建立二叉链表树，并进行二叉树的基本操作。</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240721115323825.png" alt="image-20240721115323825"></p>
</li>
<li><p>分别调用先序、中序和后序遍历递归算法对二叉链表树进行遍历，对比各种不同遍历算法的结果。</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/创建二叉树.png" alt="创建二叉树"></p>
</li>
<li><p>非递归遍历二叉树算法：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/非递归遍历二叉树.png" alt="非递归遍历二叉树"></p>
</li>
<li><p>二叉树深度的算法：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/二叉树深度.png" alt="二叉树深度"></p>
</li>
<li><p>计算二叉树叶子结点的个数算法：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/二叉树叶子结点.png" alt="二叉树叶子结点"></p>
</li>
</ol>
<h2 id="四、调试情况，设计技巧及体会"><a href="#四、调试情况，设计技巧及体会" class="headerlink" title="四、调试情况，设计技巧及体会"></a>四、调试情况，设计技巧及体会</h2><ol>
<li><p>对于指针的使用<code>&amp;</code>和<code>*</code>区别</p>
</li>
<li><p>二叉树的非递归遍历：</p>
<ul>
<li><p><strong>前序遍历：</strong>①首先建立一个二维指针，用来存储每个结点的地址，定义栈顶指针top，初始值为-1，并将根结点存入栈中，top++。②进入while循环，栈顶指针不为-1，则进入while循环，输出当前栈顶元素p的数据域，代表前序遍历的第一个节点为根结点。③如果当前的p结点拥有右子树，将这个右子树存入栈中，没有则不存；因为栈的特点是先进后出，所以先存右子树，再存左子树。④如果当前P结点拥有左子树，将这个左子树结点存入栈中，没有则不存。⑤如果这个结点为叶子结点，要么直接将这个结点输出，不需要存结点。⑥再判断top是否为-1，之后再重复执行2,3,4步骤。</p>
</li>
<li><p><strong>中序遍历：</strong>①与非递归前序遍历相同，同样需要一个二维指针的栈，栈顶元素初始化为-1。② 首先判断if的判断条件，这个二叉树不为空；③在进入if条件语句中的while循环，这个循环是将与根结点相连的所有左子树全部存入栈中；<br>④退出循环后，在判断第二个while循环的条件，栈不为空，则进入while循环；⑤首先输出距离与根结点相连最远的左子树；⑥如果这个结点拥有右子树，先将这个右子树结点存入栈中；⑦点是否拥有左子树，有的话，将与这个结点相连的所有左子树存入栈中，没有就不执行while循环，并且结束判断结点是否拥有右子树的循环；⑧在判断top是否为-1，成立进入循环，重复上述步骤即可；  <strong>存储总结：</strong>就是一直将与根结点的所有左子树存入栈中，判断左后一个结点是否拥有右子树，有的话就把与这个结点相连的所有左子树存入栈中；</p>
</li>
<li><p><strong>后序遍历：</strong>① 同样建立一个二维指针的栈，用来存储每个结点的地址； ② 进入do-while循环，首先，将与根结点相连的所有左子树都存入栈中；③将BitTree类型的指针p赋空，判断while循环是否成立； ④如果这个最后一个结点的右子树==p，则输出当前结点的数据域，栈顶指针—；⑤并将这个结点赋给指针p表示这个结点已经访问过，并且已经输出；⑥如果当前结点的右子树!=p，则接着访问这个结点的右子树，并且结束while循环，判断do-while循环的判断条件；⑦重复上述过程，知道不满足do-while循环的判断条件；<strong>存储总结：</strong>先将与根结点相连的所有左子树全部存入栈中，在判断左后一个结点是否有右子树，如果有则访问这个结点，没有的话就输出当前结点。（当do-while循环中的两个while循环完成后，在判断do-while循环的条件，之后重复上述过程，直到不满足do-while循环条件；）</p>
</li>
</ul>
</li>
</ol>
<h2 id="五、源程序清单"><a href="#五、源程序清单" class="headerlink" title="五、源程序清单"></a>五、源程序清单</h2><ol>
<li><p>在输入数据的基础上建立二叉链表树，并实现二叉树抽象类型定义中的基本操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从输入数据的基础上建立二叉链表树，并实现二叉树抽象类型定义中的基本操作。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBiTree</span><span class="params">(BiTree *T)</span> <span class="comment">// 初始化二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;一、进行初始二叉树：&quot;</span>);</span><br><span class="line">    (*T)-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatBiTree</span><span class="params">(BiTree *T)</span> <span class="comment">// 二级指针写法创建二叉树的结点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*T)-&gt;data = ch;</span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;lchild);</span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IsTempty</span><span class="params">(BiTree T)</span> <span class="comment">// 判断二叉树是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;三、进行对二叉树判空操作：&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;二叉树为空\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;二叉树不为空\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试：\n&quot;</span>);</span><br><span class="line">    BiTree T;</span><br><span class="line">    T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    InitBiTree(&amp;T); <span class="comment">// 初始化二叉树</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请根据先序输入结点的值，用#表示空结点：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二、进行创建二叉树：&quot;</span>);</span><br><span class="line">    CreatBiTree(&amp;T); <span class="comment">// 创建二叉树</span></span><br><span class="line">    IsTempty(T);     <span class="comment">// 判断二叉树是否为空</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;四、结束二叉树基本操作;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分别调用先序、中序和后序遍历递归算法对二叉链表树进行遍历，对比各种不同遍历算法的结果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别调用先序、中序和后序遍历递归算法对二叉链表树进行遍历，对比各种不同遍历算法的结果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">rchild</span>;</span> <span class="comment">// 左右孩子指针。</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatBiTree</span><span class="params">(BiTree *T)</span> <span class="comment">// 创建二叉链表树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T = <span class="literal">NULL</span>; <span class="comment">// null表示为空枝</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*T)-&gt;data = ch;            <span class="comment">// 根结点    T是指向bitree的一个指针，*T即为指向的那个Bitree变量，其中Bitree又是指向btinode的指针，对该指针取值&amp;即为</span></span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;lchild); <span class="comment">// 构造左子树</span></span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;rchild); <span class="comment">// 构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintElement</span><span class="params">(<span class="type">char</span> e)</span> <span class="comment">// visit()函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraverse</span><span class="params">(BiTree T)</span> <span class="comment">// 先序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintElement(T-&gt;data);</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(BiTree T)</span> <span class="comment">// 中序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PrintElement(T-&gt;data);</span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrderTraverse</span><span class="params">(BiTree T)</span> <span class="comment">// 后序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PostOrderTraverse(T-&gt;rchild);</span><br><span class="line">        PrintElement(T-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试代码\n&quot;</span>);</span><br><span class="line">    BiTree T;<span class="comment">//T为BiTree类型的变量，即为指向BiTNode类型的指针，</span></span><br><span class="line">    T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));<span class="comment">//为T开辟一个空间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请给二叉树按照先序方式输入结点的值（空结点为#:\n&quot;</span>);</span><br><span class="line">    CreatBiTree(&amp;T);<span class="comment">//将T的地址作为实参传入CreatBiTree函数，</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对二叉链表树进行先序遍历:&quot;</span>);</span><br><span class="line">    PreOrderTraverse(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n对二叉链表树进行中序遍历:&quot;</span>);</span><br><span class="line">    InOrderTraverse(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n对二叉链表树进行后序遍历:&quot;</span>);</span><br><span class="line">    PostOrderTraverse(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>用非递归方法实现二叉树的遍历操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用非递归方法实现二叉树的遍历操作。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BitTree;</span><br><span class="line"></span><br><span class="line">BitTree *<span class="title function_">CreateTree</span><span class="params">()</span> <span class="comment">// 创建二叉树，利用递归的方法</span></span><br><span class="line">&#123;</span><br><span class="line">    BitTree *bt;</span><br><span class="line">    <span class="type">char</span> str;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;str);</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        bt = (BitTree *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BitTree));</span><br><span class="line">        bt-&gt;ch = str;</span><br><span class="line">        bt-&gt;lchild = CreateTree();</span><br><span class="line">        bt-&gt;rchild = CreateTree();</span><br><span class="line">        <span class="keyword">return</span> bt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历的非递归实现</span></span><br><span class="line"><span class="comment">// 利用栈来实现，根结点进栈，之后栈非空，弹出，接着根结点的右节点进栈，之后，左节点进栈，接着弹出栈顶元素。</span></span><br><span class="line"><span class="comment">// 此结点的右节点进栈，之后左节点进栈，弹出栈顶元素（输出）……一直这样下去。直到栈为空。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BitTree *bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    BitTree **s;</span><br><span class="line">    BitTree *p;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 创建栈</span></span><br><span class="line">    s = (BitTree **)<span class="built_in">malloc</span>((N + <span class="number">1</span>) * <span class="keyword">sizeof</span>(BitTree *));</span><br><span class="line">    <span class="comment">// 初始化栈</span></span><br><span class="line">    s[++top] = bt;</span><br><span class="line">    <span class="comment">// 非递归前序遍历</span></span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = s[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;ch); <span class="comment">// 栈的特点，先进后出。</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rchild)</span><br><span class="line">            s[++top] = p-&gt;rchild;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild)</span><br><span class="line">            s[++top] = p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历，非递归实现</span></span><br><span class="line"><span class="comment">// 思想：利用栈，从根结点开始循环，只要有左节点就进栈，直到左子节点为空，接着弹出栈顶输出，判断该节点是否有右子节点。若有则进栈，若没有继续弹栈。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BitTree *bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    BitTree **s;</span><br><span class="line">    BitTree *p, *q;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    s = (BitTree **)<span class="built_in">malloc</span>((N + <span class="number">1</span>) * <span class="keyword">sizeof</span>(BitTree *));</span><br><span class="line">    <span class="keyword">if</span> (bt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (bt)</span><br><span class="line">        &#123;</span><br><span class="line">            s[++top] = bt;</span><br><span class="line">            bt = bt-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = s[top--];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;ch);</span><br><span class="line">            <span class="keyword">while</span> (p-&gt;rchild)</span><br><span class="line">            &#123;</span><br><span class="line">                s[++top] = p-&gt;rchild;</span><br><span class="line">                q = p-&gt;rchild;</span><br><span class="line">                <span class="keyword">while</span> (q-&gt;lchild)</span><br><span class="line">                &#123;</span><br><span class="line">                    s[++top] == q-&gt;lchild;</span><br><span class="line">                    q = q-&gt;lchild;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BitTree *bt)</span> <span class="comment">// 后序遍历，非递归实现</span></span><br><span class="line">&#123;</span><br><span class="line">    BitTree **s;</span><br><span class="line">    BitTree *p;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    s = (BitTree **)<span class="built_in">malloc</span>((N + <span class="number">1</span>) * <span class="keyword">sizeof</span>(BitTree *));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (bt) <span class="comment">// 一直遍历左子树直到该左子树的左孩子空为止</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[++top] = bt;   <span class="comment">// 将所有左孩子存入栈中</span></span><br><span class="line">            bt = bt-&gt;lchild; <span class="comment">// 指向下一个左子树。</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (top != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bt = s[top];</span><br><span class="line">            <span class="keyword">if</span> (bt-&gt;rchild == p) <span class="comment">// p:表示为null，或者右子节点被访问过来。</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, bt-&gt;ch); <span class="comment">// 输出节点数据域</span></span><br><span class="line">                top--;                <span class="comment">//</span></span><br><span class="line">                p = bt;               <span class="comment">// p记录下刚刚访问过的节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                bt = bt-&gt;rchild; <span class="comment">// 访问右子树结点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (top != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;非递归遍历二叉树测试：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请按照先序方式输入二叉树的结点，其中#表示空结点：\n&quot;</span>);</span><br><span class="line">    BitTree *btr = CreateTree();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;先序遍历非递归实现：\n&quot;</span>);</span><br><span class="line">    PreOrder(btr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n中序遍历非递归实现：\n&quot;</span>);</span><br><span class="line">    InOrder(btr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n后序遍历非递归实现：\n&quot;</span>);</span><br><span class="line">    PostOrder(btr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现计算二叉树的深度的算法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatBiTree</span><span class="params">(BiTree *T)</span> <span class="comment">// 创建二叉链表树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T = <span class="literal">NULL</span>; <span class="comment">// null表示为空枝</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*T)-&gt;data = ch;            <span class="comment">// 根结点      T是指向bitree的一个指针，*T即为指向的那个Btree变量，其中Bitree又是执行binode的指针，对该指针取值&amp;即为</span></span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;lchild); <span class="comment">// 构造左子树</span></span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;rchild); <span class="comment">// 构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeepBiTree</span><span class="params">(BiTree T)</span> <span class="comment">// 求二叉树的深度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> lnum, rnum;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        lnum = DeepBiTree(T-&gt;lchild);</span><br><span class="line">        rnum = DeepBiTree(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lnum &gt; rnum ? lnum : rnum) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试：\n&quot;</span>);</span><br><span class="line">    BiTree T;</span><br><span class="line">    T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请按照先序方式输入二叉树的结点，其中#表示空结点：\n&quot;</span>);</span><br><span class="line">    CreatBiTree(&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;该二叉树的深度为：%d\n&quot;</span>, DeepBiTree(T));</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现计算二叉树的叶子结点数的算法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatBiTree</span><span class="params">(BiTree *T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*T)-&gt;data = ch;</span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;lchild);</span><br><span class="line">        CreatBiTree(&amp;(*T)-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LeafBiTree</span><span class="params">(BiTree T)</span> <span class="comment">// 二叉树求叶子数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> LeafBiTree(T-&gt;lchild) + LeafBiTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">NodeBiTree</span><span class="params">(BiTree T)</span> <span class="comment">// 统计二叉树的结点个数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (NodeBiTree(T-&gt;lchild) + NodeBiTree(T-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试：\n&quot;</span>);</span><br><span class="line">    BiTree T;</span><br><span class="line">    T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请按照先序方式输入二叉树的结点，其中#表示空结点：\n&quot;</span>);</span><br><span class="line">    CreatBiTree(&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算该二叉树的叶子数为：%d\n&quot;</span>, LeafBiTree(T));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算该二叉树的结点个数：%d\n&quot;</span>, NodeBiTree(T));</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>下一篇：<a href="https://likt11.github.io/2024/07/21/哈夫曼树/">哈夫曼树 | Likt’s Blog (likt11.github.io)</a></strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>动态分区存储管理实验</title>
    <url>/2024/05/18/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="37b37705c3474d69ceeafdea68e9c2168ea3a3a0f471eba24f6e48c5849a7fb4">efcc57e07e58d4ca6d550f9ade0b734d79e1244f07da6ac7836919044816863cd599eb6423c1e06d1db9214744245f07938d3dafc175068f882a736a832eff2c21845284e32dad1cd27ba7c7cb876b78476c5f6ff3da515753907b170b4dd205dc5c20360e0ccbd309e9ac71d00c9935d691c37a347a3646fbc064f8ce64238ed25c7976d9565e0fe332fe4f4c917ca12ea5d4e525a665dedbf5c004dd2a23d8ab71830bb7d90015266cbed0df7e4274549303b2cfff1741340812d38ab6dd0776f4d83dce86e0cb30c798db07a0f21b5571fdd8fed633b38c481a36e14648babc338aeecece66c8a5504343233586f780b354ae3e1847140ded5e2f6ac35315f82c55508218408bce458cddbafd365543c0ecd753473dd0b1f275086fb81ef60da5ea68504e26a711313999803943ac68ec06e00809953f8824e8f85dea1294d06b14f3cb799759be41777e3b953bac3d619600ffa496109ead3a2e87803c7a4f6cd6616c99613aa1af8a758ae52464f687e58bae2067c27755411a76d2ffef4efaa34ed55f934e1ca46d761efbb1dbbb585f0542dfd692f8fd2d74ba08d650426c3c77427b73af94999cca5849237f0ad53e9ba7f7bf22e81503d9e23e0962acb4f8803b6be34a4e94edf149ed35a2525afe2cde90b576685a6930b387262e6fc4ce454e7bc7e4071a97b22d24b6ae7be9078d53b49dc48583f8e821865d647ee1d0d3f7b40203fa4040b992e6e08eded37ae65fa912a81c904ead245a7ee09459d96c0cca51b25c28a309c9fc7ccd3164985eacc27985b414c6e5964e16780004c5ead55c149595dfcd58066dcf7781d32d20df8f4ee0be88a11f0147f662ab81419c513756b3a7a59d026e9b9570f8cb84cf835af3a9872e510ca2a4a93a1080624543247f6a572a77fe85c0e14628dc928f59b924835275d2ec4067308cf7250f751ec97b6fbb5c07a843e823933eb20788e4f0131705d2a7facd73878a23d5eb8c919e1e1c19839fbabbde722c67ccccbc148adeca7c535702c87634b2632b2ab4bfdccd72a61fce471713be180c7a2f70e174d9a0ee2e84acb57e511b3edd43c8d125b67f4b98c0d8bb9c5fc7310c22fb80308a4070947c38836e971a31e3ee76fb7e6d2ed1c4ffee97145c90010c2f62384bd1b72dab971cc4839f31c17d95546bfd716296d206f779870ba6b70649f57b8dc8b0eff4b68525b04f131ebefee93afe43e561f144a67ea5be878536c49d00b791518dbc7d2bbe4496e39d539bc15c1f371d07a58aab65505d5ebf5ca99cce7832d3af0a4d0b6d5d73eeb51bf1348566c7552032aa631db864139e3a93036d22e64d05437ec00ea61c18cb9aa656257e0d965a1eae13b7030bf7bed766b14da464d71e3112c2d920b5a475bd06158ee25a57edb8e32e442777e99bf376e59f90302d17eca66a248e99b330e76594aa8bbf5d343729a6289ca9bf5531e3b958b861e8df00755697e3ff96bedbd4ef101fbf4073eb81f035c6cb621ecc5eb8ae9f4c9a7d3fe23ec382bf1b9c8d8029c34ccf66cfdda11a6ff644210fd0350709a13de6a5d26e31c0a1653e3508ecae4ea2eca6a1433dacff00a60e347d1effdd55c2214f32933a6ce811f8c4e7f86395f6fa89b1c69de231f8c687acd7f1fde4b66b4c1f8cd60bc745c8ce6f70947577794b0fa9fb40ecdccbafdcdc3f2431bd8f97889b9ed31c1a06e94103070f606e78dbd6e9badb079f6df68793b629fb70e5b0663210031ccd278fee2ffa6c5ea23c0e0e11bfe285e78fb468ac129ec82b0f70ff020598352166c103c594f1d508f5504513df7d93fe67f26b60ef0d763334ad80f3dbcd6adc2e78203b270faef238eefe94d646210dba86bcb63e2ddd08d5cd27e00ded4e2d4970e4e4521ba64c470ab210d15a729eac7a5f642ac44710b7867236dae540d9387227e64b87fb9d7281bc33a947507bfb57f28b216848676c50ad8a8fdfd090aaa302472b4ba192c0d597551e087d6a1390d38939b425df4b2d8b5ff3fd4bc4556c0a17266c1fe059ba91f241e17d96b9ffab810f2fa90138aff8745705c74c742415bf078093f64e0b104a264109a8b7b771f1ec5caf063bedff3f862ed689d29d929347546e81e961b6375de94e57eddb78e6bd8def4f9ca8480e2efbb3a8e72cce311099c1ab3ab5e7384b30eb6ccbd9b769a2e97ce29a2bb9b0f06d85b9d50782b004ab1fb1f38b8aba29e58deffb357210306558d87a7291738bcd57ed069f901af9781ffce663a8fd8620edf81b8d20f26023b351732783dbe460389e3939870306fc69bb7dfcdaa02c198749ca40d10bbeb70672cba218dad577a2c7a2e277b5177e83330f46f1966060a9361dcce980c600bc7fba22fb2eb59bcccd6eef1c3a06ea0837671a783859d0e3435779dc4710d5706e3a7402f2f7e73dbdc5d7bab6f397f6ef14af29f93dbe708577a9e7603f3c3eeb2393de93b075240c4faaa84f152c0197a4da88ce85bf409585d03fffe4fb7601be17596f3a64d5a73e93425155b4a2e3fe7e39adc23357742dff9f545cb5ef9dd161af266e8e250d7a516d4fc55e63933679b6060ad0409081db444f1eb67545e7130caa03b0703ad9ccaceb0b9fd8d0873453c72b18dd2ed8148ba5b393e143690fe7e71e5a69ed0aabcce9f55b49478e6f65cc6a74ad16330a9e62eabb7b6f48229fe2ae71382b8645ce9980edb3f94e544875d714128a516c1934f150c996f511f16a442d2fffb0943258d02a43ad0f4b5bb98bc69de71885a29e8a66b43ad9ee441dac0bbdbb3385e33bd9599318029917880c62b7661827a6f47c309b58008be4b75ec43f6d9d5c22211a4141eb906c6594bd0dbc01fff239231e905fcf45e515c2b7f352f1dcde82958c156a0d30293453eb4a21a5a39038d2853ff59c4ddfe276de034280773d9dba7ba7970bbd11c2b7bd7505f2ad92f42708399ac750c9643eec5bcabff3c2eaee80a45c992d306faa7e3d579398a3aa1d8a5e491b7093d9520f580ed9d1ceac1d045fc57321c15c4123607bb95a53362f47854b854c3399f28ef81c1f0dcfb46a5e3039b1f75d5ad09317dcd3f7307c1463393d653a9827914515fc6777bee7788b463bac0775e931577cdc3aeefd66fbef96aac15eb56a6e1ea91c64f533cdeac2ed2a2fb385d8bb2433a2facc2b7d86cd9f019f89d0e8865af92a35d6ee27411ed98d6a98b884e295d09a3591b59add80c2623a6587e7b744638b8a68f2a726529b4bb97751d41fefc99fde02d6cdcfec030c2b96fa9d17a4bd090212f5542546ec732382f0b22d8a5664122d978e2dd57f17bc7e68cd80db135e479afb4579eddfcc6176b27a3f5aa0fa91dab80122d2916fd3aa19fbf4eb0bd823cdccd468629eb26369e9632e376e69bcee9034970ef42cc15b51ed821246bf050a95d981a64f3b235a3ac5f5c3e0efd67675dae8aa5dfd4488912597fdcd0d24868d51fe73f55336721fe5fcfa9a145df7dfa0ddde60db9419668c2922826741cb9eaaf05612bae98f85550b6fa5081d6f0fd7b29407b0d85fdb84dc11c42769c03364fad0cc48cc31ccdf3d3429329715cd8a3fdd05239bc8823fae34385356f33550520340b15ccdd7d520567c7f7b7e22b576aa6090203c282b7bce0c3a251fa0b7855b5ded5b289830cccd6aa5318b289b056199428d1190fc4973a44c6f3a372d958d3f17662f4eeb43c9619e68b81264b42f49f0a0da94e44e708ad0f09a031ccdfb38061f7f971a36fc53c9f630ede85e8f499790e50db3b1a61420d4d51ec987447c29026b14ef73bde7ff40e168d4900be2eb73d0109fc5f970430f354e5a4580d8cbc1e4de15e82071880d2d5ebeefe5b02be0eee96f20a09255d5a85efed512456a70fb132a0a728cf947f777ef785a648561ad3d7eb6351ab58f877dac9c2d3b7a6dd66750908ab87cb069c02a7cd13befacaad4983364cd8f132202c312fc70c70fbad180d0d03d0f66eb145e98f17ce3547fd005957672569a8d115986a90c0c3cb967e99f234eb28bce97e6380bf194aea9c6c7557442f90c263f28a26beb8271eb5105dcd2421081565fefd4294605a2d51a2c9246b4d0d34707c4bf52e491e0ca142ff2c8b35080de05cceaaa595b159c37b030f75c790042d7c3bfe04d3f2b33878d5033220711baa4b3df8f438b957edafbe404f77794c187976944186c3cdd4bd7c3ee8de4b6f06b14a1fb250d217260cb2a7a39a6bd2e4909f3d306445082396b9cf6e6f69b5c047d18c7a08c229470f6a06aa15c5aae6f5021aea1add76c4fcf92dcce79973204b96e14c920e5e32906b9f414734508ea0fb50d2fc063b979f5f5694bf9336929b5816265b50368087dd0213b05c62fafb8a041864416ca39c81737565b432b9f162408d314a661b74e0bf2647bb4b7102f11388355d063fde3a9aca8b3608f6b9562e9fd8df0e66bf8663f68f6b58a53b76e95a772e1454ce9416011f09b5af67b55f8bab1083bb258aec6208731fe65c2aeeca80944cf90ddb36449883a39979b732730056ace14b59aba4aa99c215e7fe32d8d39dd6edb1601584f2718e1217b500cc11d341c055c85d7364a44822a456444bc7c8ed19b29cfbc4c39646372bc2362565431fa85734becf988e2645ee37e4fb40072fa63e51c78027303845d2e8614d462ad9bc7834e82ff9ee3da15b9ea9ac50e27bb9ff745802f02a9f609402bee1c9ac65759dbce35fbef2fc393d496d4ab183e2e41075eea604cc2f902b6b076c8e0d5d3b955aa10b87cd5a330721525a5ea05b2deefbaadb8447fb7c036b3c77bda64390cc2823daf5c58e7313b6d3d5a92e578271c7342879b72462ff1e255b61f070f58b5c7079e9a64cf17b00f8b4647e038cb75cd475cf1df183207da3785729090ddf47c406ac7225f40630eb26156f5066bbf9ff2fc7f06a6cc6a684ce0914d0bfd2fb94c8c39e98f288e710c1a44a472079b10ac93445c356b161cf79c110dc41369d9112697d9096d710bfeb3380685c1183df6fed9768c1d35b359634f8213ab860ee24ced666d31fbab165d3e15c81b5c1cfd15d79375567ed9161862dc3e197c2d524f283666a292bbd89bae618e239262c483be6b60a6a9db9f6cde82ab05f486c7d35a8664cfbcdd563ed9f98ec5edb9fb37dc25b92e57cbea5be5e0c33827cbd4c65356a3472053e2c0ba795e4adf75b5961a5135d0f38308ef82890df2438b82a9a80160c418798320286aa480f32677c853b4f9c9318c7156a05d24de1cefc13d42c3066ceb511cde7f82f2d8eb877852d9849afc05c67080eed6d2a70bfb44a115f53051976f07190dbf042714851c41cca7bbd0c75d0317dfe2fcb992d96e4221882ed97969b912ae314a0dc424e7d51caa768fde56407df7eb1bf33135672c7b18cd7c210da0c27977f57771f7740b92b76a65707de101da60596ac733fd2a8c3ea0cf1329ee28eee6840cc670b2140635f13f4e5e7058f9f868f6792e206ff40d855e4a2de716c55965890b0e7a5bf665c6a4e4884a2737d9582861ab3a7b8c4435879ce0d22b3e4eb5a532ad5fe236dc0346c3390d2f106b49d796f45f074be7aeeac32e8830ca49a7a3ad81981ffd574f2a39a856372c77580ec5659c238b1fd8abedfbce0d22c10ea851806aed8924cd31a871fa3903b32792406a2276060041af27c9cdf25b75a15d11964e4ada421663cf9cc734aa37d30fd3efe632a67d429ad614d1ecbf5974f8ad8458bbeb1d57faefdd559f575cb1cbf0bb17adf147d459322dbb7dae1d1492710eb8f6a19211430761cb3851b33561dd87b17c1f4631b71bf84fb4e803b22ac980b2b9c0afb6b13834cfce7c7dd62874e00f91081df5794857392b14ac1ef8fcffd51bc1ba34516d017f7c8b7f5f59f34a9b4a55bb33652b727b92824a4a219959f4696a49149584f4a7bacbff34c11c124ac51c7aaa1c4581475ecc3fb48d643ce56f126acc32d5a300e0afd0aba65190a0155c9cbc8f5f8b6d9f1868de9e61e8a9afc2b86115c3b0a4472a110a2252db578f013cb067a29790344c24ef93acbbb628a9ebc2613696a639278730f6a4d33327dae10b75c1c2f6cc0db77993f317f7ad03a8327d8010301c120ba602bf05094ef3a96e93004b28ae9e1f8ab2fc9f2d252450850b4b71bba4e7015a3c1900eca4e816d12f6164b0a220b7ef65af64e0f4c38868252c3addc4909c20bed7f663fc47d1468b105927d60d349f7d86c570bf004234b1e81b54e271d78b2d820fa477a17a1c9413ae7ac17bb0be068ce7e5466aa4badcc2d3b4eea6d08c5ca9456f56c4b0c05103a37e59c8ae1cadeea5c1bc999eff0f2d50e6fd79599d34f37a140d77ffdecf0ec614d9626d2a253e51cfe88b74dcd3f1e06c9438add9b779e139cb5a89bdcbfbba5e548c71fc1b4a68f661c8610fb9caf114482b5452aa9fbab402131144ae312c4c61af3955749b9f1e876fa7348ccabd177488fdfac1dced3698935a5fbd5f24845ce8792597472c6c433a6bc1b9f349221bd729d6cafafb44bdf3e6e99c3eb57b458da7a8f0aea074da7c533e825306c268e69ecf38022b4fb9caa3e5c529f9c4e241ec52e2c9dbaa9a85d8b54c27f12ace31b17a73b93b05c871fe60bdefcaec917c360d5cc525b097967a24a49f3ab36521b1a137c8abd11fdd5244b45149c279661fcd4f53e5dd943c38ed862d8611953612d82b3c529bd92f3323222c358799b5cddbf8d936554998a933947ad095370635204d0c48947f1a4c9b476c5c2e1a89fa843d6ec5b0f0f1f09c22b7f46475262adea4c8d9a3dc3bffb19a75c0d3765b4e0608ee443f20061ae4ca84a52d1a2e616384c0d5185efee33ca1d81318330d21095b50c98d8b8217555768569f1f4484da9631439e16b11bd80dfee237d577dba3a245ebd8babcd305dd09256fd8c07390adc9bd7827c745fecccac17ea64735d9d1a9f1bcc231a9a9575a689f2a6faa61f0b493b6c7342e02a9fe2f4450ca9d184ec4409c445154fbabdc508d57f7393198a57d0e860559622d39099c5f2c76d6e785323512873bd4d8edf424bd84c7f6880a1b3c8f51e2a392e9ac32bc8e67d0cb8ad1fc2c1cbde93366302c133182c0edd2734836d185fe9159622c497c33e41ed0d4cd74c359012096d24b07d7b36694939a65b8c6211a3ffafc93a3e80ff8d80e4feb74a0d9b12f7cbc52a3e84b00caf9faee929027e435df57fe6d07c6438d30381c3e7c52ce8f7bcc09c7079b5b9cf3551c9fa442f200fb1b1a321170e4f86f9fb62d676fe6021162c101b79ec785d318ce3476fbdec60d2ed5a559cf2b14053a7ad253e61a7858bdd67d91d3942f21f15cd454272e17560c1df50b12322990de66a6047bb9915017dfca291c8f6dd5376fc5dd5a0a055c288d2773807674bf926b15decb2fee9bebe9723b483b9afbb8a6598a6af1ac370d7126db757093bdc6d76bd3ee0885c9c840b1c31f25fb3858369b0b11fa8307e34a3ef175de0d7445fe91bd9840757830b0c27e43d4bc147d352d40f8d6d05a4e5000c376dc93513c322529fd370313a6ea9a09db57c3c15f9cf0f90d572e5c31fa4b713073d3cbcda83a10c5b5373d3076ea835445633ae40db09b41e93cae1ac699beac7fddb25cf73f87ff28b5665a2db603b370c3f118bbd94d92bdecb1a822ab1168e22313da8c4993f6a55ab94f637f75f08dc67bd370e6a566142ad50c6d194612f537b37a35452edaee41464f617e0eefa5708acb8ae02698600eac56889345564102ffe5ee35ab09284816994503518d63ec290496dd543fb7ab30921ef7712beb08ab36f8896ea472dfd8e971ae737e854f5725f9155cc746ace038755b17a55f3c40fa47c34dc8fb16cef3bdb5b9ac319ebbdc6c695d7bc05f9e4780528128e3acb27d0b1d091dbbdd121406acf7716d234e5945b821b29ead60c26cd4eecc24df0589a05c93d22fdc558e0b5b4ba3c0db4b1ffd47e4811276f8b5c3d94d8ae8b7dcb6c7f485106aeb504d327539ff3e35d25a6be0dfaa9dc8e2d1c096cea4a30297e45b946d36e0c0f4d53a5b12edc70da1a2a31bad8db6c521c940489e4e60d3eaaeb54528617f35d895b8963869665ecddbfdaa08c2a81c7401406ebe6cc75d0ed853bb73ed549b04e324ca90861d17cfbe7baee840953c79eca6255bde102c931c1332cb0eab8f47aff837f32526f678431d8e81860decf94aa06a8654a88508b816b394edaaada8e1679a22bf7865202fa3831ad1366137c9ae8b552ab1f1b9914597d2bb765aeef2a5b8a8487de3c18ed210b879b31705ee444a482cae11573aca522b501c094ab5a8c7f23176d8da099d01b11dfbc0380743197f0743b6ccf3d9bdd7f4d4fa907caff1087cfef31418174d20d0f6775645dd3649667190c9afe8ac6fb3404496b718bf7ab68163370d5e4fe3e56701c88de5db085a7fde159ec66ae79c55325cad720eee5ca59625e944cf45a8f3fbb947d0c17dd111f9630f42b1738395945350eb7e65ae8ea11e6e3d3a44bb76c4cdaedeb108f318b7ac5542f4bc58b83cce3c497c1d9ee33a1866846da3cd48313d253e79b365d55837ee70092907d8cd476c0646a8ce3b3ddd7ae9b79b32c6f54628fcea6467c4fae04abe714c739fae92f9f54e29d5bba7becd1453ee07bcb66d30b628b2e1cdf813bf4cbc5a6cf6fe8de20fdeb47d67df5883d069e4c2cd0d5248d5652833367ac8c0162190c4802f3a78a3ea03a5830e53e3ac825580d2a071c2d209756c71584d95680f65a41b42038ba754ea5841128a88836f430bf208c96acf897e0b7ff04a746f5a79d8eb071850b7cc3f96ab716b01aa53c0855cfd99213dab3daa821672574c293c7fc6a34276e4d258573da10921e1fd4b5efbfa38ae32faeb3b67be4065652d012edb5dba98496463c17f1dee0bdc13b78fead38ac52d15717f65ded86b12a291683dff946b9472f110ac4b4cd049505b0089caa146cc08e63a2149b1cc559578c43942ce55af6deaa6ee5651c06247136d39c59809c5c9f48ef25e82505ae1ea2440d4dad6019f8d630c0819618f08574c771f450b7d85e91d5aa960725d815e2b154492518aaa02e5962e7427f1f8d0c85acc1e6aa1992df355b63eb0e69b89fbc3d7734520f00e22a3687e4fee48af7e66142d483c6287fdcbf1413da8a97d917adb00fd2892f58e62558a1d5cfbdb87ae66bd2a6121e4167591e9438e0944e6316a77a22b05ab37fe2b43be49682c4ca06b0397c827325f7cd06097592e27e0d04920c62f927de83ca69271fa7abeeb0db0028d268b7ba01adf305220406dcf3c256836f14d916496cdc45286f964217feb86783be058ae6c76426f33f4f597c91d2e52e50895c58a1b3343670b01326835c5f1e2ceb7b02d4675b9bedc1a4325e01eacf305527c7a8d2c0256a0f9584a9246eac9156017866583bf3887e0e6e8ade09eea1ff6e25dd7804d1bce9565aa72dda0a84b9921a55fa1ca3db925fe4938c23feedd06762daba4c47156b6953c25fe89184d59392d2a28d813be6a41cc0759210fcba0091b8a24b8ebd5ef4368d85bcaf53d322840238c507ccc78827ff100d7306eec250f11bf072175bde5a69d4fd2011f278ef2b8454b5e9eaadeba5b27c1fdb8295c02abc61ca59564c8399758f9ca7069ba9acfc42caed7bfdcb607921c1dac77c1c8605d62e6c88ba39b4e337ef5934307731aa6634eba4d9e160b2ea2c9257f368764a6040e86de14b0b6c86bfdce530b484df8286b50a8db2a04b1e3156538915259f97d63e17ed088c2b834fcfe9a28999a40d9adbcf2f6020e55fcd8778ea2137b254162968aab4ef64089d8e0f6af31465c8873de0ca2b7979de8c43fbaca53be566897085471884da29e41436925e35ee689130c9b70faa6804a0392458f517c50235b2f80ade89104814ef2f2fea58a1b5795be46ced6df5553529e6c79be549dccddbad33ed102326635a8fb3b8bc1f77410ba707a28bd67afe98f9f067258cb597cf22cd4b6f9fbd65fafc548b4c72332db65f362e981ddda79fa8bd944ead7689432b3ab97aaf749af07cffa27c771400f6b5c2fa40494149caa382ee2a9b301c6b9f8e02ace67bd4900c0c7272713e3e0aa40c48df821fa3dafe565036fbe27f20700fdbe79555ce801dca035037595d9061675138a0fce17580f45aae18bad8e7207311b61bb40a64cbb3c6207ffb61e6de9f2387d3fc411d547a340aa71251156f2ad4bf6f6d2ec817d4ca896ef8935713f61608f65225ebe49144d6ec331ca7273b91bf2828ef37fcaab0f80624b6283c4fe037baf9345b84aec5164ab99e0fb6b582cde83a98187bf784c0223fe3758b9c7dd5fe276805d162086382d531ef5ead430fed6ded8d897be3bfc9177521cb4fbe31bc31c27e651ac5df3186f41800f5577394ef1e8a730fad3398bbbe940606cec19a92c61dce2e05c3a4c196492fa0f780aea511eb41f9e5adb3ef67311f41727bdbc2bb68b71b1e6c028f4f7e7819b6e80836211b5bd1c2ca22b0d73c3850b104b57def7a0815160ffe4d6ef4f483f7497bbdd8d7bb5c81c1bb8842ec0d5ce00cc4ef45d71879d42e3148e5f2f12b5f585ee313f817d38f53593f9d244cc49df3985c266718fe44cd24fce867698b32ca1ebe35116f433395d88c6b4b94c7055b232b942084775e3a62a7013438d9483ece3129e6b455815355247033ba2e88bb457fe2190171aef6b368f02af4b5925b7abdc9775ebc61cafcc243382db0a887ce9e6268087d5b015d612a6d65ea46d8fc9800b697a66800c8bf9780bf03ab5aa89b0e7678d436cd94e0f24577d09a0129a07caf84e789ac970e532afcc9875001bbee8d5176a64b49e2b2e42793d4be2daf45dfced60ed60c3aabc9d3740ef21d368dc50af3d670f69b6efbc40121cf36574423e3a0c40a3d808f0a3fc221467b6231840c8dafeaf92c749cea0dcc7f6278910e67cf86dae844f321b77341c3e8bc6508ee5248c0bcca624373b4f576ea6a3feb20dc4b52bfa21ed9dd8b0136ae4cb6dd6cd986f1e719b23bd527c0c3ea514b4483eb143c3d89e5e767c85aa94b5ee555804719e163ebf15ec5a35b54fa8c9ff836e6ef5f736b6c0a21928a9f4a9393b72425a18cdef150dd897379eddf6d100bbc38d3a263c0ceaaeb43fc43516c3352e78a4cc803cc1a0688a8c247801dccedc129982c370630f408e1b06f1503cf1ce1f8cdfb2ed8a02128594b5a8857d9b700f1b73c26c313a7182bc6c4d3772bd324b3b3a8e878ab4be5d5600d30b8a4bcd0210f980a1396f8209226adedbf29d22386db3c10e98ce0d766e74803790fbe1852be2ef7b6dfcb3b04763290f66864ac8a235bd33f4021229e1ba1ad14ad1558e871458a74299e7c96df5b3bd95a1eef5964d64c0d028938ef815af1a28d07390a73aa14189c0a6305cdc6484665637a5d20c4858d3276cb86d27b15a13598341c24cbd2dcb387416258919b9a0aa9b9d7edcb3cf061c6e41bc99458f12889e0d34267293e5cf8fe2531f21b83b4916dc2a164df4ad455abf98e791fdbdc8e7f8304bf1fbeddc943786f16812a0bb0c491e20a4492547361d3c02d0160349e6b6ba788522b6a8f3df8fe71346394215986c2a33a4f7566e1946238d7e488ae48ecd9214e3e3fdd15c07c857a0d066e780bc10881b9f886f3ae84430d7ccc72859c623615bf03172bf1da5a357ed90a0e5bd960707e699a733857e24f370bad82fc04d50a41752f847ac559df172fcb86a98250ed2594ac2995e1f49c3802304bf637d4cfdc50164a6f1b908780edc088ff119a20e22ad56bdc6a8a370bdb636a44bcc1304089dbb5e83be2e28dede738508b3ab2663bcb6c87fcd9f3ba24fe5a193e99a6357c4f8ba1584e2b4157b102ef509cce0a9017c0dbbba3c370f4078bb7a3d315b686c9c358dde5fca0c7603a1fb9cd6e254b00a899f645563c642e6ea197d7c3091979d3ddf5a68fba442c039b61f9d97ef86f8fa42ce0df8a6d31af8765781209f9092a2d62cad8be868044fd71d41a08f93721f8647f44f2bac02684ce3e2005b00d40562f5f8075915188fe4a3071e6a4fb790f0483874892ca483a56fb8c5e9971a0fd3199d3eb7be713a7387df0933a5babbdeb0dc51c25a5e90d7248a475644cbdfd8d864dea81486dcf621d0d785f441c4282f6bb2e5e2478c26513f3b2353c71e63c2b4cb50e68aa852a33c6d783553158a7279a130faceb1f14ffcfd7df39954fdaca1880d62e5d2beb83c4ee069df710449c2bd0ed1766cbe90f1db246d75be24bf0368f142679c3649544b007ef91dcbc5a6b884f2bca2ebf0dd2c5540996185720d40fa1951900cb48554a28c03951a11593b96ad06554270c8a51b6d8c0b30df7a1edaaf6158d86d4ca74b1ed5bfd28994a7540dbf1b1910f32940bd91463ba8b9f2e031c341c86ee00c482ae71e82242200ac6674ceada000abfa607ca3219310fea71c01823ae708041820798ac1b3dc5e6137c92713d37a52fa5d909ed08cecf7322479161137e1a06e494f782010d268d903480a8f5e5b7bab66a61e6b7d0cafddd41f3fed86897e1cba55d2313b97a9ee9b619399a5c044508e6bdb7682883c2ddb720145bb24b6a5de62fea8eee70822b984bbf11e252ead8a0c1a546cc0d42478e407f3037f4abd5f1d0fd6de8c8cf6c6b4767d9d35b81090e55055bb69fe5ca24937a921450adbee87df3c0dcdfcc91d7efca40bb6ad8e86672cf2b134515917ddbf3fd33e958b70e7db4e3fb2440020b7eb0fd8ea0ec0432b1d4e521805a6c814d71bda6b00b61b2fdb81432f2a25ece5135304efd7f0874e181c8bda0865f933842f5505803f345e4002da73a88d8dc444058a01adac6b2bcd4089a0ced38f01b46d396378df09623eda9754777788e6d2821092a780811ea65dcb2b6e42cc407c89dddf1366a9c2d90fb3519908b3f908f5ce495e500d6bdf7dc97dba6f9f09d5c94e533656f88a11bd1f0842d24924f0f28945083a30c6a2c6270c8d39968dff8d24a178bc5e59ec99154aec628dd7bcd673fcea37c96e8f4bbdd3c6fa1665297e0794e33feb12f638c5cb54a39cdd267e1087b13197f34f30b06178df5f80254a60b953a1f53933d9fa2cb924d58ac8ad56203e5926560ab827f7bf71cdb3f4f7c7fa86b48413200ecc6cc6363aa795f8c3ae34bcefa97cfa69814acb2fd13ba115e368734689dd83b2b08bffa29d6e4c77ba36d373d4a9a7ee9e169f34b51fd9f66bd989e4255c0edde4e99f9b7aa73f1f80423be40299a09cddd95a518d6519a7dc064271c4dc64a4103c0bf7e2a0e6a1690938d0bb79b99e31b3616f255c3cfe0aeabae3b44f009decbd4d33b179eab3f3a031fd5d22267cb65f71b399ece66349e953440ef8f39cf1f5a2022dd0bd588de0805349f1671bec668d98e3f806f068202e9487b00fa9f3b7ce522e147bcaa19d1a5df806cee334d0a446ec1f92dca5a2b7a2f902bcbf22ecdb12d6d1a1c1ce44083e50494c14cc459478365dc44fc8faaf4ebec246f5898b68792d5634e1dc5cc3e9a2cb3c78f934eb69f1b0c37674dc8683a5d8913de688af7aa256dc76c88e3c24392e5d9bf9bcd12736f51ae69b2b02b75065aa289093f3b488814b278fc4ab4df9dfa706e0b8ab02bdac5c6275f4281fa1db2afa8814f49b30b0032fdaa140607c8a3f9e6e393faca94af5c9393dc232823ee8ae39bfe00fe7084b0c358017aa43b0b93401107cbab843fe16f8ea7f7b244cd8d814df6ea666ab0f96550eb10ab9b09277b020063bdf4f3f6bc2c0b9ff9eba495b7d95b8fdad170003d1663b881e856ed2eeded6c5ef41e947fa1ee21bb93dbebc30ba3a9d9e81c55cbfcda4ef5d2f3a87552780e9adbd33f6af34d6726db49a43e0dc3b25f63cf7e3e4cfb60b6f9abae23b7e054afe63cc68900ca7c7eadcd7fcfb09eb92237ba68a17dd61ea672d77adcc8bf16a72fb315820773a7faf41565ee0de93a9af465fd9faf37d32a2014841a61825e7e6074f06fded55e278ab90c33228233ec4d3db8ea8e61ed268c4894e7a8a159323001171516c0f95b2f6082b2a8a292de9813990d7778716578270f6458cea434d5326043c71741d84f10415890413c2168575c80305cce53fb8cc9d332bea62c6a0d4acc1b73b55f79338d15adafb2e43c5b601950e56480c67fdd8e377f2fcfe6768a23ed1d3098114445100f1a8e8ae884d452df7c97cb29f2c4bfc3906216b1312f2f73dfa62f1ed4cb56254e71c00bed604041d8d9e037cd13bfa968e96d38d429dcf3633ec67f8d312e98e8e4a6d9dade72fe22351ebf2254244f46e61d9122c920e42e7db307f6a13ea06432655f78015f6119345f197df8398a61cb725aeece4f3329a4e8ba3dc6ebdf9aa4545fee753d3a9a198697b83164a8dea932f4fcf00de7227427dd10b3ab6770ae423e3b7b0ab7a0c4427bf057562e52f52d6f1928c41a9039190de21cbeadb5a136b332cc6a4d028793573b0ccbb3d3d6e73fa3a400df06d54ddd911e2ebb80b13d5e6a220a906e274489a449a289a90bcd1e90d3186290fbd8c6f10d41a9b683de3fe4998782ae29a15843b8f1bf8da3f969771b47cd180721d589695c361075e10f66285eab83efc4d19a0f13908dd67de9a24b211184423db1e48dee117853f5e2ba0a894f1b7f0929f2036311f2af8ac23a7863e34e2041764c0e343ff3e0a2ca941a631e85b62d592f6e0926a22116e418b1de000509477d22b6aa510c57e29d98510aedd2f474afa18687f801c331f7cdaa1eba1de03e6727f85470ad712aea5ea4b9220d664f0e7b098ed8f2f3d02f5df09d49af4f2b423e11922649af1690f6b0e670f62d41f411ff31cc63764562dcdc3aa27214a34dd6e9b8094ea7ac7c93992e06243bfb2218127efe2522924f0e5ddf19ee2ba16dbad359f562e5f9e06063ec904ad3f41c4696886f99ea06f5e43d46c6ce68cc7c374b90ea6fecf920aa84aadf7f55731d4247ab0506b56512a230e5c430ebc373ff63a7a6bc387302849011f15b3245749cc2ad9893b4604495e24db09eb1e6ea8cfe69742e7187c9092a9de88a8ca2fd7f3c272e612299020bb310eab1d4ee88409f832f46e8a505c1f26d7fc1b98676d2300fafadc3f68ef6c62ca8b2e97f87bdb96d12feed61ed144f8f485c169a031a82415a000f5b2be765e7571d8c0c734cda02b4d74019e81a4657d0e4e8213fa2cbc61978d57ac62d00bbc2641080644c4f4250422621054785efa9f16e64a327fe7ae99d54a544f2dd49f1025dc4d0a89d0a257d010f559a87adb7d689cbf30944cdd903491c53401b605614b51000a3cecbc8bb5023b3703ba4abd7c52fb8461b1611f910a07bd42a33f3f38b84c51423fee1297625b5c64c38c525fa962a4f39767b5a0088c007f59510a5c37a7a25706fe52db1fb6789b19963a0a35cbe45eda9a20ce4db1f3940467ea84369644cc6a4a481790c721cce6cb7d1a87a94f5c51dbaa5fc1f49dcbe6a7a26b34ed2e8bdc93da4157d59e15e94cc3fa23d41a67b44319e36c5e4ee71362dc280155589cdffbaa89bc5958d9ac3463f3e868c49a23841cce751ef5b285895fe50e93b53fbe038552df9e50b5d43571f0c22d491c78a92cde11341fff4c9d6dce635be274acc9047851a09e73bbd2b15d1beadedb960da8fef1c412dfd2c75babf7943593123f642dfcf28271869e0acbab12912ffaee69a9c4c992c3e5bba307c89449b1e542266eefed449d2517ab830cd69d271c71d4941f4e93df83bd27ca18acdfab78b2a5edecfb37bd544a9dffd249d93bd5fce7ded8baf9209272b6d665c66f168df96e7324ea3a812788f024aac3302eb55e4160e72350013b502fa5ee66ca9fa62692adb4efa962ac4cca399f9850e24706832452a681234cfa7aba2fc972f106d198fa1f8a81d978fc456734db30c98a8ce66f698cc625e6789554ce4f255004d9974e91bfe9011d4594e34d797e05601bf9aa6b49f5b4166105616172b30d9b2d1026c2a0d7a57264ef75a42072e910dde2d31ecd3d510c525bf959bacdf748c061f558106b142f7a3d7d192243af2ec9b38d252a45051b17be7e2604d81d8e226e1a6b6058c2ddbfb63e2994625cf995937a0f33e5b195a6ecb79c16ce1c560ac1c63eda95a58127ed2aae940abcbd673340ceb650ee370dc5dfaf7cea890376a661f2600c2d48e578eee51b2d0c16a56f8d4abc45827c28722edb5a69edb5b91484a86d918b3d1ad873b3974a07cdc133b0bb48287a63b57523db3bd58afecb315e3aac09bca6498c0842186d0dda8d70cde8c12efae88e2cb7b388a9de8dce355c0a9da35b6f6278353781235cf850c60a5c8e3c7cad8f63340149cec4efdc77b56608049d25bff3d8c61c21cf35a3eb36611f354a2277f4820b061bfde16695ff54a9628d036f63ea204cc7cd83b68ada2848b789aec4e8cf7b876188f04e9e85356e627b2ce07acfc43411081e0c6b947439771802ce72228699996237f8a1447352e838884b3ee52cfba035020638d181230bf74db080c374e48f365c3c6d2d408c96e914e31fbc66f35b80370f7de25f12a6211b465ca209d42a655d378e1ef70d49d03fc4a28398335c2f976d6c45a86dd24b8b407e664ecf7847e48ada5dd198f245ba2fa008add0e927815bd79f25f2d0bf4b1fa1c0e257581ccdd9f7207cb710af32fdec8972b2eefa63af48925c94cde2986e1cef7d189058ce60b396f688bc8fc46fd7dbffca1bf3a03be2851a1cb22745b4f17e1a8907796118c169c8c0fc1581619a22497eb479b92fa86d8029db296c949dd68d04d2e2b3a8a15df58e58c2ca8a1bff9f664ee3e7b764fe2cbb2fd59f9b2b1e5d3ee7969290f6d195957a2523ef3f2bebce3a46f38b5e785f82ad713d9b6fe234c69bddf4f736eb47cd12cc0feade34f98832fca9104f71860a2faacb2e0f3f6884761be2924467a7cd1806016a67575606fad9ffaa1c5b7e5e47e8257b286fbfe58055ae62679fe49a709231be2a04e28265288fcbf51c1c2eadff85452255dd036fc2680b328a9eff969ef9d6d85e7cfbab6fb2ee48f49a897799fc84a22170c5adb43d12adf4462068e2676b98c4aa04ca95a3eef4df4053c1b485a0030bb8a126b91c5a42779ac8e2b32dbb26e251111f741c4388fe0900d5b62349d204d670e61792c45043f1506ff1c552c0db695f8c4380ab31e329e465368a8bb9facdcba6f61c76a7a266bf4e28ecbd4431ebc7d576dfcebcfc649ff492a0a28dfdfff40641bd51c23c6ec2d9d201cefbaef974d1bc01165c3e26e58b5b020114abc267131d8b0f60c79176028d7ff6b0e6540243a54fda86b4b8870aa4c9224b2a9c9deba2686fc5eb501a62233ec3ec52ece7fcc91f2da051d6d7fd034326a42ddd8acfd55d41ce53902a87077fb2f560f090b7ae53af3569e82e3b750ce724c26a1fa3da67da6a6a4c74602fede8654e1fbed40ff4313574f3d66a1b59b97b010e0ef861ec1caad87b366a5b2d834f0b51b449f7ec9cd8dd844aaed34f3304717d4408359eec4643aae5c3e2bbe84b10dfde3014e6a85160e129928afd85ebf125177bcb15d8e32514ba3c433199650187ce26196e35440386f84035149bbd1ab7b9ec3111d62aacf757e36cf83a3c2426b8a20cdbef950950fa6ba70e74c7670c2ee0268d77c283af4a1e56d1eabc44d3c3be1c13d184c0b8760889c6956efa0a619b9e1c56dc6c255bc450d1ec4c1481519f691a3916ba3a0afe561322823909f9320cc5b0331f7b3ae5605d597e8bd6f8f140896e71587c47c5bfcc0952688be5fffba34f5c36ba18c758895cd4fb7c360a92e2e1c1ea84c71c4f4aa38fc4c8ee5404555f8d6485bb88059620c0b080f27778fafe3f04e0812d56a0ad340cf6f7476a968401300799055fa2c7921b106ef914f6b00a60e2f6f61a99f3c0f74ad3743c4d3d3cce2f57deef77a6bc575ffdb573f45917cba2753bde431700a4a726cc2284acd6eb0c3331aee4d6f3d5723b7b79b3cd8d36d7a45f950025e5b45ff2977663941c463e8997656149a6155a978744057dce5f3000bb315c237f92133f09f3850c665f95e0ad817a95826f7a2a808e0ffba16f965cfcc411ce169bf9d563080e5487fe41d786c6683f08e9acdb63e1105c1b7e02d8899d27098adff89e9fa33a42e444ef7052b5e2d13b070f395041e468ecd4c2cf8e213919a89cf2f9169ded53cc9f04760f47c6034490cd14ff88eda15be540720b4f0f9cdc1085af50243d82087d7de1cf068e0d0ee76b8a9f36bbb716f2eb06b1115b993ff08ca6aad22e387fc1953afb95809553b5df25a342f4ff4279a3042efe7ffc22ee374e8ccc5a4260fd12ac7d92071f787597bc654349a657d4695f247a2bfb562e2d30de6279fab8c68a41c419e38ddf3941614c5856dbb0d4dc4eb1fd545c487fea88021b498b3f32f41405b234ef20039aefc4d8a1a5413686a9fa33eac0d40e1f3979806ba7cb1e75acda70a817378d3190445f39a28e32a5a76a6e58c3a99382ba724ead912917d8dd6ba726665cec08720382d698d79d8f8f751e52bcc409ecb89ec2b0a1de0d5b78b644d6a8c558c355b254d170a1e351e60b84102a15ff6044e8cf743592dbc9c32fd14e60b4dcb8cefbd009e80eeee6495a00d456e89e5234cab7351bb299f730a24ae5059ddc354e2fff0c97522da0ce005b7ff1824a2a849a3229e6c7c22fb981788bc23351bb56184b7ec19894d7dd8a79bd7d3466c8bdebd9a13677a081cc72694ee29fb4d3a7d8214cd7f4e515c3b2c67c0c0d491e824a67ebaa5ed657e1d3452e4e8d40b3113c08bfeb6721367ad3aa616718d49ab488192a83d7d210eade057f59556afc1c653d3d6cfed230036fd496776dcff99131426ad3d1a9213005baa1a71fb0295409dfb49fcb33463860eb8554a8876aca131dfb3bb35f38bcfd2a3a39b79c83712e71ccb61e33682abfd9847b1f69928e0cc6d5e9bae951a61249a7dc00117de489bd9b6c612e0885d645fb37dd3233e7add0e862abe8388c562fae2eb46880d6ea660c1d62af8e244ca0a41a3e9d457518dcf35e5fb97576247e73b9766ec223eacf19730a06e03651609b00097234e89c4605654296b91424c8e47abdf8e600a8fd892c38bda0c87a279c1d579eaf1ef267d8c39ad3514e8baebb673962c2f488deeaba2e9b458cd0d7d30ff6b80220de239868fc746932dcaced180a36c8bf3c2d4b3277b253dd17e0a9ef2efa7afe4d894870387ee0834c3a1ad07b8af8ce30b9b77d599c54f3d6aed500430808a49bd813bb26e082cba56329b579b1aeb99a3a35421104db6916f8312ace7ec391afadececf1a8c3d3921142034376999b8b6054247f50c1b335e0d94eae7e5a341f720b3222474e768029f28bc74c3ba2aa0fa8e03f238fa562ec7e5f2a85e5babe4ab9aba327501a7d6846963452b365e447acf15394afc42cbbfe659f08f890e7df1283c46467b4ef1461b00b7169db2e7b914be721bf78dff787984680898952f9bb2265fdfafa861e2e770abbdc45de93c5d813028be841ebca1bbb383fc0ed81f1fa50119b09c18b9c1684660b2a3a1980b77a02b9f0108b0ac9a9599b0d921cdf87059c51bf74927ad523ee6a73499289aad8080272760c7856eb8807771185c8414e2836ba28c66e9f4957571c67e7cb55915944448aa85e816b83d65215a2b4a0bf346e79c18ae8a079d262d1439a00f121f1ed621b807ceef2001be8ac65259cbc9e183f870302d536c47b21c4faab13e6f03089e5a12adb91febb490a2268eaf2c618a7b5a34eb19e6a5dd000ca11903d7904e35c9f4884651b7bdfc610e5df815242a086631c59c1a098b790a8d791b8be3a699db009cdf37e91a505eeb2e96561bec76047ee300f921d6158a41b2a6e7e748f7b2e2ada33fe4f8f5642dcc65f91e0d40351474a3d6f5ceab9b6b55e8078b4bc39776ba218b2d26993565dbfae3f1c57453b72dd609fd8ec4dd274d952f9e7dfc56030d2b0d5df6fdd916cb457ce7067185813b4ffee95d5753b712909bcb85ee9c6f7b0f1d66869daf585834d2e40a585b936d5c263544bd1fa44c2717b56700d522c99dab4955d587aeba7c67c9671d095f92eae4f8310f76f6562a2417926a98fca6d4907765bc920ae33670611d721d2b285e6725364228bc27a6ec36901a966b47d6792d5ca7c4f05bb643f4fd34f7d24deb9a81078ab6a15d2e445f2c63fe941578b6927956af1db10d5afa517aab31b73730d55866cdbfebbdf7b2be677ea525ce6a123d427c33462bae589b51ada25444fcfcbdd5db6c788d8a71ace12dd857247ad3920f61bd49b4848a88566837c2a94dbf125b243fae095cfa52ac7443f01ecb420c3464a7bf83fc5fc688c5cad9373b008ca1379cc97306f7082d5adedc09a9ecfb127faea4c674382a5eff67d8bf6131e814c76016ae9ff1371c1051f4bda6279676c41fe3a4e09449af6903b5c900d7aa425314f95f82d1f6981176dac21264cf86efb0589523e5f2eeebe271f8a12964da584b9a4d5d454e383ada98ebfea87873c365f48506010258da8308b7c73e7fe79d52d95da0a34ec0b21c38f755466dcf5bb27f00cff350669196f8ac1a530e5bf697d7b62d91f6661c2cde68976fc2672772d59935741456b0893ca07989d0878a781b277f63566c8455995492bdca37e0d629d83d5806429203b54684f7944ce9e639de36e077a93626086f5fd0e842f18ba8fc97c830152ca568510bbbd87e835f0a5bf9694e4026a5553cb303321ab9952a7d832c890b75cd3525826ca245f8addebbaf8fe0b292d184d78a524904f2e0458754dc1386deee2596008d0204068007c25f38a702ea04c64ec81b1e5f42ae95582c2ba7db913a21b5f600001ab86bb753e61e65735131875beecdb74f722f09cd207807fdf0f7074224f359846d4d772e5347a26bd8c7545f6f4b120dad4cb720c1c1e8de84c6dc7e9c95fd3a426aa6c768fcf36a5a6909accbeb2bb1051252f49a6f7feffb2437c53dc0ce796c8e4acbc301c73866f3f9aa5a7bc4b1cb3c3878afe822c9e0e07f21d173dd7c4a6d8b050762877bd0c4aab120ac8565391ee1038daae374d1371d41dc20df589de3a30324f029dda142c832a06c7d636d17f98d8b963ed5e3d552651392db69813ab10b24236556675a9293fce3f33bf5f2c1effe552e053aa1ce38e2553a88c3aeb252ae60be2efb27b84e66732329b6e8c2bba7b6a56db2d9e2c3574a6d627992fd3a2549bf0bb736b3ef02b358a05940033506ff7a17561913b9498dce4b23a03f4a40bc685d513cf941e5d7daff499bdbf52b13a87b2fe6e86030ff8f7a1507576cce505cd65fc1707bc3d4af71f7c41502742bdf0dec6c2c39da032f043cdd5b3b4db0a1e82a0d1096c02459d784d6bf9a445fd8d49f0809f4d3d67d779dcdf1eb881c7a95188e4c5c06c6a063e12974f35d545c447c8eb485a2479f469ed4994427e24527ee97cfb6d02a572dfe9494965c28976936685035437ff1fb1977a1a80b2180ab22a8909e9e22f04f3268b1947c56cce81405e9dfde440f3471b02b30fabd50e3c81f6ae093c25e17982cc1f2c70f0bd2a94e047b849b78298ebed244fd77ab0c7050ee4073423d611138389e6944ee80fde7172c6cdb612aeebca1e65f28ff45115fb8b4750cc54a000a76a6c6f0f57324a5bf9718700e89e71c705c77f6ba638731c92e647980a1e944e222a8c94995a529d2adff3a80a2bc3f5255d2189d0f762b75260a8cd67ec6e401490f5f8a7c3fd5d9b3cae3d32e51312e04068d031e601e30fd27916bc5fac0755b79e535478dc37262ac3a42ea929cd22be327b88080a9c2cd7ad296f2833a85fa98a3418b151ad2575004d92691ced400de5c54370f62bb83c134689be73c61011cbd3b53ad7be7737250ef018d997d047eb3136b87c4e6fb23738fec6b5e2df8513fa7725c85d198827591fb558a21aa960384f7d31a81554beb28803054e5222922e6abe644b18696b30a7ed3db993aa5017eeff22f2e796890434854f3ef79f625cad75467a348087f44a17e8f7d5fb80b207977078a1f8ea30ba2aecca2c832300c79f716855067ca6de344b3fab63b209fd7a81a6bcade9f1bf3e0e429e46ee660b2f65948b330a2bca1ae048ef7f14ba8aefc9c308f84550e771f616d115e6695b82a4955666035cfde3082d465556eb8161347513783cfb1dfb450b70cd1c789384ef200760f954bc94b48eb62c66aac14e3b1b0ecf0549fb26de691ad8d6e80fdd44bad3af5b4977414fef7bf261f70ea80d70411c8eaf8ad6ff4080b38784300730309c66010b1725da91c57db7968563fab04182da025e210ea9557bc2c904282ca8f2c34291214804a80646fc78dacfc32f770c4d592a47ef4f7b0f8283c863b0cee5e34cb4fdc9ebd3cb8eaf444ff1cde84eb32c053df21a60f03bb72f3dc2927023f6bb201d8e575c5bd1c34e27cea4f32629ffb1d280a7049f7779ca4ba7ab38075a951767ad490320ffcdd0a6ed80fda98d27c16adc59d33e26479b8246233372f979dd611bc491cfc22438a67d4d20856d68dc99becec4d79445d9ac085ad98de04ac13425727a3317f51870d62e55df49a56038616a57527f17e644cdaa938a0b9f92b16e3d707a01db356b6c87ab49acb1daf320677891bafec206af77db5ffa619453b294420fd9f05e80f9787a66bec30fe0b18377a9c6d148b62339f9e05fee9eb9d8214f387df1933608d2723d7c2e389373ab0a8f7facabdea060ef232a4c10b30ab5a2eca1c116561954e2c76792a5310acc4124c475ca2528932d05ea7df2945591ee186d347564b89037215dd354cf64b1ad59b60a8bcc40e60d19f00dfc049f229a84e7e7e5145694b83691df305ca80acc1647524edf0348c37d1ce9c3e44d4c60f1a865c4761fd1b38f0c7f747ebc7b3207a11ebd7d2afd9d8f0ee8903154607b77672189235d153c7dc9daeeb6583aa31f9750a86be6c524f5da494502ebce604ba4fc38944a03f1ab728b8aaf920fbcc6dc3e26adf119b5c73d8ff60a3762aa9e71887b53561b77395d637f71e55d812849f9e821944011aeac7bde936bafd7eaf79a7d0f359ab2c18911631f049981e4a7864468dfcc59504587800ae0ebabc10d91b0d54b4b3b95f9f2490d09993d4fd41ebbae7e64e85468b390cf3a49beb81eb6b68f5ddee3a2e32d3eed9ab4f6b70030a5a90538aab02030f3a3da33f87bfb3ce2bfe0ad6ffe62f7079d431db49a96ef0aa96127a48e3012d82b87620d1318a265387df2daadaa217b9d6e21f8bb14174b7d0946713ba8b307219e35cbdac228d156a3b362126308e6477d330da44c93acf65e50a913790a47085edec9638e994a9ff34c1de20b4bb764e5dc992c86ff8b7487095d5864f0f8b90bf2b1596d1dc7e4b8b712b60a8c3949722b700b3d6809aa2455f875a5bcaae0b3f36a95f870d1bd1ebf650fd72406fdde8068a30a65e67afb2c01cbd591787ac634633cc28dabdefc029d7d337c98cfa68abd6ca92ccdcbd548e6314533605f371989e404a165284f1da83b053778303a787683a0f95b8c43bb4255f4ca51929715ee99e9d61db9a29ea37e67a6fcff0a1f39d3bcbe72ad5c1961d869b84a0e9f59b74e6cfc223853a459767ed4515e1d2cca3eb25e4119c9d0c49553403c7dd071a09328931891ae19733fe31c79541efa0baae0c6a5a2293dbcf3010eca651cde10d8da3428c31a8a0101d9af9ed02d6cb60ca87a53b6c2e6c1708cd6e87ffa2a797c03015b97e8c61fd7648524230ec78d056ca1ccc7a8b2cea0ad40ab1c8a842d66dece99c18bf001fa3a54bd716ee017fd2be764204c4636c8bd918cf42546cb42beaf55b741112317b81842c9bb3553f7a8c9f2552ec7e4068c7a575a3d62be4c9177fc7bde1ebfbaa3c41a8e30d1ba28f646f2165b5fbbb52a1b50b9de4167f7fc530a9094d92c512dc1626f7ff2b9759cd345b0127690fdca495ee4ce1d63347334698e18cb09ebc29fe9da5c8549f235377153a5277f8b2099d0d60b93b29b151d08cb516422b1b2266d1e20e02632d06a0c6c1346afae40a8582765624cc63fa38eab7f4fc845ae2b6277e367a4393311fb909fdf9212474b429e7d75c44612be11fe4935546ef9225f19d7f685abe57a45bf58caf31b1feb33f4daea063ea1bc64b23582ab0448d9e0ee9f1821f390ae52f880166602db796b4126ed530cfefc200c51516e164ef5e47f1f14b5aae386bf6be1156db6692ce7f1b58dae05b948fbfb8ce76dfad442a8173cd905f7675ca2f1285df824cfadc3ac691520c6c61ca77694369afb62510a4c4f5f37967575f2c0b2271d5f247f7066c42feaeecf047e33a40834dc79d00318d9e8f5e7fff295df1c31575c0f00a967164b2763f63fd59f8d86173b614e4bfb2a5f0cf6874a61f327582c2a1d820254dbd1157240878e880781f26f6632934e8a88f49d000672df1294751b887d869e7a4ea5f40ff90fe9e67574433b2c2f3365307a86b0229a3678811d810855fdd0115ed57f9e18b681a51987f24e60ddb577f249b4d51678179f6f45b87eba690c15575b6451d546082b9e13743548ffbfdbdceeaa1fb4e5832b3d63e543b42bead6cd4720c9ee4cf5127a5d2106e1f7b5c4c8b58adf82d5edc70e14ce971331d9f435136d2fc02a2efdb22bc23abb861dba7758b46fda7aa76a4484abc57dfa58283f45c98cf60e16551974beddd0e9089ab62c09487224af4d1bfb8e6fc5d689856cee06152984e9905a77fbfcd6467729151da9e83a8c85f316e2a1e27401fb877da3e37d377ccf8962046d9efa59d69ed63974bbe9bc477fef7da41d81407d8e4fc85a5537166d37595fedb2179f29bbe6f35f09d0a5d14f26acf562f08d11d4e94ca18af5766af79c755dc82a10b14f5346c920a7456598d1f68434410ae1ba8561dd3cdb9ab2d9476243034bdfaff92d33b3d69242c04b9c5b8c77f159ab0496e319b3917bec8264cb1c533d1f6a49a225fec41d1b549c6f67db2d5f6f50493e0fd145733304831e1087c2c2f075db80dacf3c83403f06e2856f42324f32a3dc3b8ab7b0e30ada0a342d7401a357526626eafd9ebcabcc8d3d382f2d9998b39a3d183ef5bf6326eb1364c0c3defcc1f8ad5e34b26a6d92c55a0c19c8a929722f1f86428134dc2be78a637653007391d9d6af7b2d2c887c0eb3077b2d39ec2e97dec53c7ff4fbc93474298c3dbff7549a97a85da7ae522c374a3deec09e3cac647698e2022535ecb56b2a01b3e94a2433b6c186c5751b9fe30260b12e9d61b7cac858a5a9eeb160418a8b78d20877ef14c23dd89d2387655ded87d081bd5df60f1088f3406aa07a062c7d292d950ba45b340d77825f3b7b20ceee9c0c161fa910dd32cd8ea30f5584176bf7d604b9b7ead9e3d01f6988fe283fc63f37c011efa85123b4df57f87907e6b92a94ed643146ec5e015ddf998f257fa36f11fb4b681cf953a5ed13c016863eec9211ef835cb9bf5e5f9885ee0611b937f8dcdb9b1d4683107725a765fd5cd92d4990845b8200c00f6ce761b834ace8a4b65cff6435b7b996af51d06dac883bb7426fa5e558972c590c436dd99621b404446e3a96624182d348ac52294c79cc9d7f3691333a58fca2f65abd9846732ed6d9995349840f545541516987df5016589a6add6355ff94f26e48664b843a8d88b6f61a2d6a9783bd5a7c35aa8f692aab3042e79fc074b72103ef300b8a7cbd5c6a93074dfabfdc4b032855abbe9e3b3bf6087cfe8e92ecd08068634f3ab7ab9cb64798ffb619f99fe4e958e8701c97b0e5d3045d4379b1794c972c1489c0248ab1d36b1d402fe3806c3040f48c402b37440baf55761cd40bda3e590bf16d01c4d88d78864c9a8bcf64b013ab6cdca3fdcd7dc4604e350dcf3db0a9737639f7cbbe6d589b1d76b36547285fe91a7efcaaa70786d2e3f429b7cdb2a45c8d6d86582c75f7c0aed6d0e8fcbeaf085dcab2449252f93ad960cbb0c5080535c65e8c2b66e58c07fb8a949c256e374a8b800f7b28a361de00ff0e29928131ece4ff95703a54f5a78b90b5c4c33622395120455cc793ab62432f6c5930da1c301d103d6321cc84b01e7f3efedf19c5959a65072320ba575853824f4a0e1e25e30f8f9ff4a30342e4c4cd4675aa7bd5a1c1c8b4d19d6c446f2531e2c8fe8fe8db7bee6c592d2ec66eeb6ab36e5c32cf2142a259f7bc6994e58ba6ccad616e8ac2e56afbb36c83a2344e38370cb5a72bfce619faf644fe2ee72542a6b44128dad2c55fa2b3e5ac2818e9cb4f96e78657f57a1a667c3ed9eeb9b5bfcad310e0466a43fe2c392bf41b5a1223b8c882b3917627dd1315f5365793ed9168e10f82569038bf923e6ba0b6462586e19c2cdcb2a416f586d738aea18ce8e33c23798e5eda1980ec9a2251dd0452a2ddb7ad131afa5fa7a36d92d8548f9c88cc7b749aeff2fce56dd35b325b962f9e6a58ead15b2baa14d2487690cc164b9c27b78866510c5687355238191d672451d2b1fd90d1d1959ed9ca2eb3d44188a006c3d6e8ef4051ffe21cd2c6279efc3069c0e637495fb9ac583a4f5e223118e277aafb27b989837e38ebdeb6eae691584de8f56c64293cfa772244dc00a3efd577173172d9e3a3026f0d13183eeec05e8b0947fb326ae026c20fc07efc2e25d983f938a60631e85f7b87a5cb3d393716129bb9a58a08370ac0db03ae5b892d50f52706aa8237d445b165d35dac53526e2fbbc930e015bbe23e190b2f7be5f5aa160d0a705609220b38503ef04f63d626ac077400e7b25ffcdc121b9ecf84674668939f1168e69542820d637a57ef8b61517b432773e02e0e854046289ea8e7db0c3ba17199cd9ba035d448a241ec5af268909e32ab4df5d9fe3ca30622a7eb52b2eca3606039d229bb17d3428f4d08a798911a49dea4de11875dba6bda7d49609a6a953ffacbab4addfd962b8f537a16688b83a5d1adf4aa9ddd8e898b1896ff1e4e6a92f260e2c259ae2d555ab6ef5edfeb67cb4d432283b3a3b4ebff5dafb88629c4959b6f66321a0349818219773cf2aa9befd31bd0c7c200063440296a0521c4980962543d1d4bcc0c30c7a4e946481455ab74a528237051c44f7955cd153a9e553ace99db82a2e39f5572ccb8166a39d04bc572360ea8e5179a8e27e1e5216ad4f0c5d44f0faf19fd5f4f28b39e6b5b19855197e2d1a0793ed55331deda54eaf8cb3b8b4688fd124cf360b49dbbc0978c8ec656119b2bce5ba80e17d04b7acac98603fde4b9eb42173286bb8bd3a7a6adb1b9ff780a86ecc140247c84c9d03e8cb8a6a3e6fcf896c4489cf798908586aa19229d62206ad7ca49c756302bf7be5dd9c11da2cf8f6389bbf949a915269e10343ffd4ce990f8d3438d666eaa2fe52bcda96f5c1c3e43792fd7a4b034a2f0bfa4e8a763eaa1d93c9c2c05e7520c3091538a549b14026f19d73a4a81920f6097870e331e67780ad0b639bd2c5adaa8b6a4bc4d437c439d02ca485b20ba38d76bff465c005497bcc44154358317ca137844bc3c8fbe51bb673abd2b238fd5359fbb26be3e2f05d769bf48c19d384cba9cd3629692a7bc00db052a86b4fb38f015c3945d2a0dfa0c69d42a7eac64c5caa179af272400b370939eec2fe88c8950fa3df8b41ad3e35c7bebf38daa5f69a9b2ecb132604aadd4644fd2aa288d35df509e7aa830dafcb568730451bbf0a7b336f41d41e54e4d8b59077d927567fb1fe89292b07935bf39582c30a90ffabc273e7071b4548f1d9e3c5bbc1cfaac0e2988a0d4a64330ce47a76d5f8fc96d414c4324aa80c66efa087fa3ad094adb8191b399df47e183204a1078766c8eb62b9bd1b8fdb1f356a342f935f8535c862b4614e44497703f00eb1316de9e3182b5a95aeea117bf4c66783aeabd13d4d1cb0b9c51a6dd81e32e1e124abe4698e510da1a65bf4cb6040efef30fdb8456094da78bf13adb0d82868f2e99502ecb4365003d5148ba8b8a1d107f4b18235f53b69a00f9a88e07146a5e449979f96e016078a36a94a3ebd13ea08be86400bef0354c45d56127b1c6f99adcc5b83a289e75e751a770371b2c595da89c09bed7844e53a47515f6acdc4b063e5e2a86df9a53051972eae65be030694be624e55244476580871e367c96af26e355eeacc20d5478888b09c6def629bc924c87942439b19eef25aa9a6941d177f88d9397b853abffeafc965260ad16b3c8e02d6784584f7f2f15a44444734b16d5cdbb301ffccf4484f4e1069eb5642a4da468525d7e26844631a161df5c392c960d78da5ae6233694319c362b327dc8c04756173998706c9215b5d62a2b84b3391eee698136e801afb91c5d956f8a102490fe2ee6606d02545c1cb329a5ba6b2d45eb97609ffd31239a2ff54f5717f7b1d8d129a9ef90d1b954964bd688b97af68d185a102832fe8af06b0b3cfe5a00a1410207682b8f60ae8328fe3f778fc6b2fa9dbe3da5281236227bf78675685f68c9bf8384ac1c1ed64a6bc0f75f877d0a3194811a52aafd4391f9e9832b0510107463c359b71799d78b31278cc83c7feb21070d3b75744877cd06b4b24c8ed7b69f068549f6420e56040f6918e0e1009cdb47096feaee22fdd51bd293abda0830abcb67262cb7eb511de1dc7a4c4b53642b3347da44690617e1423535af3a986795b02780bffde0f3f12c46aaaf4d3b3e4d4aa64ca597b69a0a1cc5e69db421577e5e6226a04f66f410f54e6c7ef388401153feae3d8e8b2e89bbe88ae8f39b32ea836d2d0695520560b0f8ab63f13635a2c63644663d8d41362d5661f554644ff743ac9a0eb63c7e5c858749767667dd008b7bbe691d52b4af9e20597a5b390d33f1c912360eaa5a052c2f268d4f6c059a8f9ba36785cb166091027e0e2c4d8fe3436d8dedf8ae79bc36d731bf4986dc5a0dbfb6e63d817b36ec23fa59a03919fcd298af60b80702eefd058f6903f5c7c2ac2336a404d96a9939a3967d9e8ed7a9a615b18ea138531836d34fc36b0201621166f49b36d5c2f736488f6b67086eefc05728bd5d0828db463e14f8b36bf89e48ead8a5705104bd462403a561ea1cfc9cb7d7e556ab06f26d51408f43f6350f45072e90d36e22e617d83012b2dd01650579e2994e1722668cd50ef0017b706e65f5ab42df2ccd3f542f5e7776887cc9ec913394e88fbc699cba85aba50b81012385e5b59023c4e8c28c3641e88a99390f4bdae9592fd3f5d5dbd888a6231564846566819cb7af4cfb41482c86b95d9858d79ae53beb2a168cbc841bef58db207f5fb5982f294d7bdb624ef624d73c0662ae6f6d6990cc57ab3546479a926ea8b743b1834ee67231e42ce95d1fbe52d1c8e76a8de8911442db76e5825963812093c85980f4e6520aab291bbd8ad39d708db83b03deac9d5fd8076803156080828d71c008a462df58434da2e7b7d003a895a4db20eef24c14e6f24557a6fce4a035ea746583f43abc8eabf57b32e25b1bd9780bbdc06011de8f23d60d4c30d6c7ad6e13506c1986933ff5e6c65ad0b792f0190697cbcf8d6d0e952f36efbcf69cef361edfcd4b0c2ce86c772e23b4f5bf813e3243b8474d363cf05d68871e7aa43a93e6914fbceb1619422e375156d75938854d51d3d4a4ba694d93fb05bb682d66a8cc7ceaa6bb2ed15a63148bff5b7d39508e7780834a2b03fd2ee5bf40f40b263dd47ff12ab7ef9ec8f85a75c3e728bf7cc14ad8125f9ca515f288f718d62018718e392d9f9da185284b1384b10819b4f6857418ab5f7ca7b08bab4e4cf5e1648f628fe2ce29dd4998c0815d76ad08bf726c9391991dd55ac421c769e3a187fc2cba20c180f634dbf1b07214fc2bff2ae6f7835f13c1eed8d83d4eb99753099a5aec95f5cbc0f1df50a2669afa5ffebd1aec4abefc67dcd16be09baf21771145a286943e18f7400271c4df5b4bd565771897c031fea14bc3c99ee428dbf42dcb672da4b9a07bac2ea0d659272be5442a23ff0bd14bac2ba98a6db0525487d18e2777749cc25782f45731e4627adc66c2047a70c5552573b17a91cf5d5619fc8428261e50b9554fef78c3aa38974acffea67ca2f92262009fd871631a3e95848df27d9dce3370f53d573b1f8c967b342feb28fc5e423d6c142b6d90b17fb9597b32abd03a7ba8ee5b47e9c9ab86ede1a075add07f64f8bb3c8b5a4157bab5b7ca628dd47f4ac4eed5c11d80a665d8ec8775f3c772bd818fbab86cd727a81fef725132b5387b369616a39f2e42f25c654c03be5d255db8cfb2daf3de48085feef66dc770f2ed2853ee709da3854d486f057ceac7b47a3a699ec366f0e9f314701bac2e075b093d95cf044b8d7468145abb652867cf46eaa977721e7d57a67cb809aecb26a9595312e5481f3d44a122061dc78ca65c335eb3272cdeb6221f2b51118b149dd9f40aab30518484ea30df6957577b275e346a8b3456740fe896d089a2b9b345f365bcc26fc769c24297ef6dc9a1f6fd04c5c78e36ce767e18c37a6207a4503d1d0375a3da736829dce1ff310630e3b53555c30bd24a4383623cf12ee6bc5c3b35ad7094df65db6195bc25ebd2b383fd249914cc4642f8175c623345c5580e4ead700dfbfd6688a107dd93cb4233825f30be904257afc014ec7d0f54dde20357fca0a0f8b3d22cfb71868f09dea9ffcf2a8605063545dd403bdeef765d9cc11527d1793b7f7fb598dbcb6b6ebbc5882e9123fe6d5811f0e11ba1e287cb83abab6b87481c0a5f3a2fc8dd56d08264158e421cabfe7aa666c890893433edb027be546d4456cd70e21d55bb0d27d2ebae451070314db0bf3d4365507aa114497d10b93ac5312e3ce343a162ee986afb5cc34b8313e93f493fd0963f8e022c15db0a1c95a297fbb262dba4922abd5ece2bd2f5df7d08c513018a2ae63fb6582fcc6df0a0178c49b77d26e1eae662f74e9f4ed6edfbd8073761c5bcb6d9457e87c91ca97373137aa4553643245dad655f149fef99b131c2dc21d03a8ce8d576ff63848ef14b4c36f1c4bf71b71032e456a919f406cd7622819dd86854fe9b7db644fa676afa0056fa75e870284f38fa1d37093ff0b8faca107812d9a0aa7558ffa86d1557d71a30f59dabfa88aadeb8853d199c04655619a9ad1cf785544807b0c81cbb8d884d9d1762152f553dd357e101a7942a385759b4b52c817889169d00a9a89f7bb697b05d1e4513c736ea1a74a7873f62b0f598414197c3bd6e9ee4eaea08aa030113a2dca2f5dca5a1c170649f5c6959b76354af695dbc4949eb38caf58a83501e4bda25d0df9a03a60eaf91cdfc6f0f5d517befa4cc90a3503a423c39b0cfced6f3511f0f8602671f3ba1f3f48a9a0c125160ce6c91d95b161b80aa558799d5d6498c0ef9c133eb0499ac7f100f842810042575c8ef0e0eb12ae16185eecc930b26ba631a3e58803139ae55bfff68d31f9e15eedc37b8d8ecd24127d2a02cdf686f855d8d343a5d2fe6645cf00ff010ee8e1b052512a8b3e49df3a662c7f6bb9f7b94f59d3a7b035ba69d437a976e026004b4b6aeda78c176c8c887e34dcac9231745243934c56b3fb05eee20fc181202345043db415edd9b7bd05e41479ba2e6baa98afc86738c953bd909a094a1d8ce4098fae7e785d9df6c823522b8a796e33829d66ad41b3f71b5d96704cce84b694a8208eed34b82c3f24e4014572808b6c2a29b08aaaa0fec893d434e06050000e35d1fb74ce87b3ddb2806238eeff3427942781e035599dcebaf6743825323cd56f564646f4c4d08af1991d6468030911ec3caed2ed0d35a764de59cbfd28073b8a7288dc75021c0ac53113e208325f41b972e95050366175eb5fc84e9c7c92a22c461a0b549a588e68d2f4cd76356ad1bb5f21a6254b06f7d6caa699103688069a34d456b7644c197aa88993f67409a132869900b08c7d0dec0742ef2b5d0faad5f1679b109869e967f47475953f30d53ba14ffe1ce68c1f0602c187f1fc2e975e4244c225c3588dfe5a7675c1fc385b94e3d702ee453f5b06b3124523765ce20ca8f4743fc6e3a2272be970bdd3d81642510d13989f0a005e24f867bfb528ee148591daac198f627c186f91fca45afb3940773e19153d9f3433164ff4bb7733be3685243eadc4d53e78c3436f17647d4de44249c3dfa26d4464f0bc955d3707cef2721ba41beaef3c3129f7dc4eef09c0872ff7a04969c87e67b77e2bafed61c0c30286f924642a8a8ed746be759546144872a96915ff8daec99a5c74e376339cb507f6070bb8cde57ad775f96117caf11a58a6ad4dd2fd1d942103fc42aef1a4d0276859800057e0ea226cf81132cce449b8de9531a1397273c1e7c3fd5c9c2ae36b6f7222dfd5b0ecddb15e45b2c64e7b8dcf04e1e6c1c876b60faa6d18abf7211a2201e857e4a0e618e4691bcab3fd5c34b301bc53b33753fd846d02d8f6dfc76a9145ba3e36ee5a34df171c339ab5ce36f6e4e2e82a1d3294ab5ae43a81fbff192b8cba991cf8018782cd73904f88901d2d07ab1398add78bd0d6ca75dc8de825acb1f76229073e01af6ec7083e89bab8f32cc61475ee0793dffcab2d0625fd9447eaa81c1cf40fc84a54a25cc96278d900185f79c780e19fbe17f075e295a86f918842848128302eb684db4fc5ec190be6eb37a1a241c4048117e7668fec432fdaab0c1bff3a51fe23aed9767be05622c5299d2e09706f9905cc0de64e3a69b0e1854c7b88d59aef180326a0901276c42ed5155491845b1655a078250ba89c0c9ad6a76cc08a3acd74bef9b24b8b7131377bc241513c3247340097a82e26095151f7933963a2e8d5b01e723f8a4f414ef194916f20e2a5e16d8a888738bab31c283d29f28fc6d98e14c5697305bb39f60c97f3aae12e523e03b812dc1bed470411a7db3f5743533b74709b5742ec4393be4daea1a0dcd2cb203449692a85120bcb2fcb9f8ad401d5d968b9db25ca0685b74b863526716f70c98edb56bfd2bc2ade6efc9549909e548aa188544ed42cf74b77db3edc8e37ef5b8b49ad93bed84fca625b14f6ad0a495776b01d0548fda99d979be2eca341c6bf9539feeb61af0afac92bd84f18d472d8b781efdca167495cfb6281084f189216fa833350e74c6772240ff89b2397fec02fd37fe9f2929e5cf870d5ede982d1fb6c39643e15fa0ca4d800d17979dd161843d09eef4e1777f0de89ca50445ab346ea32c8220848a22faf1fefa03b907a305fa896283707a8d37b2494322ad6f50144272dccdafb4b43ea8d58809000bbd21675163dbff6f5cdb13473bcf77a71fc187c98959f12571f9e5f74d11feb4c4eed25689cac03f4c75d139a642e9905adeec76729c86ca074f8a44d101ee508b872c24612c7e14a4ec053c33338a15978a6df3210d357da46fdb94ce3305614b5e2e0b757f2f6774ff06d3272a5d463ff64febc3960f2ec42f8871d177c6d15ca737ea30bd19706b31f1feb2b469705669335ee91d37e246e6e67cc3ba704337138c22c40c257632367dbba783e917477555dbf9821fd70199520a3d7a56f3d57d01ecd2de1b0538b001e53b9c3f1e7a2b6e7b5210b2c3dfa566c8655a0d681bd8b7246b28164e68c63d1fd6565a169bc24d62771a412d29bc3f6b9e8d6584ec2573ac59d8d16dd692e3571dae61423f9289a62460c38206657ae69432adf45377dd12bf61e649bb665ac9e2fe4e6b80e476984e2340db9d5c511433bc0f788ec694c22a14106a6fd0e9e05c2054771caae3746bdf67d49f1147d304b86d5ad9e2cfa92df1bc9aa1410f69759843687a8adf39707b9875b7563015e06cd7499416667db30f07ceaeb78097478366baf6a24e74b68cb5e7dd6eb763bd0089ec7dabdf1f098490fe6c77002ff2fe4cf866ae3ce94c765dfa61faa7a1d439ace03ba1767d1a90cb39ae885e2ffd8c2b97d234be4953f5f6cae55b55a22a0268f2bb080b360c14446ae072de6ec6f2c77757113ff6f74c47688638a287f39139ee9814620907de529b81c8ea1dd31d86bd0382bac6dfe8c763c4b5e6b8371624b257c472a0f6e479eace262cdb0da67fbbbb219b51d23dce09fe7cc4987d2fae4028d610aa1ff1aaccc4f0857b57d03b231fb58c4b61418db92220b79d00438ee684b5915384eabebba75347a4dec8e8788142d7c79cace91df779fb846a3645b26ce4ca6f74663563cded4b96b4409aba13061659a6e7cee01365157d971aee4f607836ffc9fb9503c18c814fa4373c1ab05e6ecb00070ef3da27016dd188b2205c3680cee44b0ae3832d1ac63b7b804d1918e48f75fcc9a9d8e4ddfc13cf9866093b61e00dfc1a44c12ac58c247a0c25c20935d395023f008203449f4a522ff6719d5b7a1c8a736b71f7cabebe3f49544b9310279e653a2d4e2b2449be151fbed518fff9bcbb74fc2bea3329f7417dad97a892dec44d577f0e1101d7df42abcb1d93527dc957e617ef8ad47dd7ab0598b79ea22786a35378dd190a54e9b3017de49ddd6f3f8e369ef3835586b78792b3b6e3c3fb0faccd48f40e640da7fdf2931f90bc18eeea85745550406945c120936f8f5cde8be42062ab23cfb823b0454cf6eb3f26d85f8e744824c66dda238150862f5bddff99daaa7c961c4f0a02e156ff69030b134821a0225c9a42e1c331455796951e9f8c03596733c2b37e1c03f6c92467ce6c7ffdddc7e4d72a6bcf1a803876eafb262d5326151cc9fc80324bcbd4009ff295b2dd07f591bfb3f32cce16ce9f21ef7b38a13eab5e2fd2b6a43db6c5dd882277af6f7abeed095a75016a88fbbede820ae9c69a08c9fbdd55cb1bf8dc65629a48b889d72755ec28268afee4644d807b669ecfdce128de304d7984b2917a114c1ffc3eb1fe0f3ea4a5a07a8b0f74bfcab3dd59202ac4f225c76082d34b976f85236f8c71fa65657ec581f102aed0fb209a354218eb897f9c4dc70ffdf88b74423401349d8f1155320caa51cc05f843f715b62f99b5481902ac80c6dc4677c2f404eea90ca145db9a8478ac63668fb25ec1785c0d01ca8718dad1b29719374f37cb53e331c0d26e67a50be8a7edf0a448961143b77f8446d807eb68e8ea2dd0896a78246d5c1d2e1cdbab3ec9545aeb92c54b23d63481396805aed3e172083ce0123468f38164ba5449651f9b584415d75dd2f1e405fc6ea021bb66005ba11ec80fb67a8fc72ef17c9a879405a418fabe069b0aad8eb54521b781e685312d9150ebad0c050515f30848ca01a2eff8d51c461b4e0520736cb40f9224d0261f766c45c8d0b6b3c751d5a409a36e72ea4569c08e4b5750275a0da808749f9610c3324e1011d8bdad521bb627f94109b2c02463e3125f06abdde3c8f1e57f99a0e0c3d600f77f04ef9ce5130b2b32b1436596841549b5f23234fb4ef17009ed02331eba56dc1ce1a4f93bf94c2c21d4a2fe68979b7df7c2495b90d8761d14fda26bdfc69991bc127da7eba70f0e3ebe299b85c388c0af80a1193efd1feb61fe19727cd679f6686db344276636f5ef392c16419b9646a73eb22edaff84b349dffdd108a1ba45ead2a0d03f5f8bd838790693eaf0af0a17f397d73f317f88f8662334254251f23c8841c47ed66edf8821c21e0ade9574c4e116503beb5affdec752608ce22f769600a33a77356af7ca89c09cd9a4b44aa6ec3b88c7cf6b1d1b99f323239b98d98c5ebd5409abd9417d1e51531320c5a4dd69c981697b3d7a029b3805f12ef5284248495ca7b746feea46231bfea5846f7e57156ccf6b0fe35f4e2e0ea7a4536121a6bcf53e5e7581f0bb54c4e78f32ffd08965de7e7f98c63d0eb4d9cedbe6836123496c98ad2996d65e310b82f8035397fb692dd481c9f9a5c16144137d0598bbf6ef6ef7e45bf8ab5a83924cf0b828efd2c9c4c4fa7bfd5838d6a98fc47662194f4fa13c53ca13c52de20537c4b2c7a3198be9e3270f61b555649fc07d7dc3aa9bb282a76d19458393a34557b77a3d3e46ed807cf1c2c0476280769a8cb5adaa5628192358b4ea9ee462e5618e4d5a8b6a8f9838a0e1f5fda13f648f1d4330bf3bc1fb182fb36fd43b458d9d5b35f9c8c8bc2dc1bc3cea76a10fe2d151ab29ea67e7014c009f40c5031fc220d8c6ddd61b31d1e6e049cbcaf4ea3d9091dda6f85ea89197b4abac46ce7e49197333a45e5fc8b5fcaa7379465367bd8d70a07ac4db5fef3cfba9306cfc379222414fc6e599cded01cac1cbcee341c7de99dba7334f18cbe20a410b3ff0d83c28e4b459d3ddfd950145b7bba06c1ceca14e18601e80b8703d8a330cb91be9edfcfa9dcb3cf39529b397c7d3fcf07bcc8c1c5930f8a4b79a84d6361ca40f1559b2952c2b9d189bb6b9e4904576ab746f1726242fded588ccf5ba00345967d522a64b7408748e98c0b09292970a6d95f9dc55c52a02a12ffdc17b34cb6d419f51eaffcccb7836a16c2b061b3f2786c53c8f6de04732d36124d7116a4bf54247848807d1bfd31522926b718bdafb9333e69a89e571da0643f51ed70644fe72080e6eb5610b718185cf7cd116f8bfdc8bd7a1e99b7c7609b8840dfda7ef416cfc3e85db0b8cd674b7a073ebd0a9e8461a6044ee027007bcb1df75db934d0389a63362ce1eb2cf4c2221699c82c46eccecd2e2807b0ff812c9f995be6cfa4b0b5bb8abdc6d4520821adf6d224f20f08deb594606ca8051116d03c57724e8c65cec754d459f5e123076e7d098735482beaf152736318b711b21b132784fbcc3273e5128a1f37be1b507ef7e4c42e002f8aa68ea96b7382167a0d79a534b2b2952b0171a79894bd39a37e76570c47697772ddc94bb9af4b95d19986600ea1ebcc93d2973806846c9aab0265b21e8e848ef10eb34d5bf54489f63c190770ea60af92fe8ed203a5839f1f6635cc0c77ec1474f0f64520315bf9fd6baa098aa6031d561e54b54e0201d5c701401c58c65ab1ca614b498932c120bc445d4d116cdb84f2d811eb2ce8e8a71a09c2c2e652fc3f19c7db620e5dfe5e2f0506de625760be72d194033839398e3a2d09bf864c1d114970118d441f1db90806bd178b60533db48dd58606e913d880e2e09814bc0545bc43c2a246dfbea6c34ebe399fea2b703c2b564e526feb95fbbdb5aaa16a40a241e6f133e5e3407c0480d05e533b2b60e298d759abba82e65c707d80ed2e9e88d8908f0e5ef6f15e4aff5a035501b22756f08ea5bddcf8192a537b53d5d93cc2c4eaf4c359159589133daf979d6fccbf2ff878e61fdf3b24a73b3289a83af299bd12230f0e4224fa618f367f4701167dd877db38a38c657d5c5b9b7e680911619f739fd14aa0333318adbe47ebcbc6b384acccb480756a6f27b0c6adcbe2334b33942ea44fcdd0c42d993dfc601e0355a7d50c9ef8ad07b42c19981751d8352595c14aa11e9029a48320651d67221c959829b83af3560868e95e1da1cc49f3d05cb6268f024b9857737b21f3d92994d09ebc5789bed592d6df472f0f7da15f94994a799e3cd351d9733c972789d835759f3ec4f350f0ec816e97094a80fb147e8fb4bd78b553fe92beb0a552c0f39600a62db5fce0f66ecb0054a52c2bd2ab82160b851c202728ba8e6e140e21864fff39d5fbf279e87e7663bce7b6ec01b9f8ae596478cd4c65d08f1f60dd1de08cf9588cae15926245d98f921a12a239a892fc4d6f5be5b8356e094dd4ffbd81c73a8fc1e1a4f98bc35f9db332d3ff7c9b3c18da2844edbc741ac9e5549a4d8713277f9a5fedc7a2137d4dd8195c604dcee870e8438a9f2b62d856ebe5da4dfc1cff6c5dce6d8f649df31e7df88c7591eb464dd27ad8a4e5900a10254cba8fed8d1c326cc06dbc79e49cb1462cad5aed54c2d45f151274ee7d4e8b9c41b40c9b7afb4ee3ac5d5ecb1d64b458da8510b76450ab95f9a5d08b3ce9287f7d69be080d7cf9a65cd903d4d1243f38a51b4dc7e7f15b699338f5fdd7819281903b4cb4e1f5b48a076cfdf91511634344db43729ffd23c8e060abd60c435f38cd8697ed605a1838f3b70b5e46988e369782b33e1bd3966decddba4aab38addaa06d31aaaa02b39ea90234fcef42a931fff350732513a6d91c824956baae2ca07d005950d27b400b6a8fbb052e880899383d8de44ec7625d2d7ed16dfa3a51fa310609edc95acc774476b623a2b3ac01e514863ad48033c5520364fd648e889212286a3cffca4ca50fea551edf3257e615e67af3675bcdba5cb3b398d67e24053d19b4e77d42d6efb4372c059bd793c093a641192f73b012d773c34511470f1940b565fc4476925b9cd218e70306f5082515d067c9d465c1306c3e9a418828426a36753371af5ded2d82ef2b981b542ef4b4102a347fe0702ee97433b97f2655ddc2ade02425174629b70a922d13ed7f9f6d4154886a782ea507424f519b38db6d53b19c985eac08fbe50da3da300dc9d5764f14737f61b9d5d10ff8f9e2df4038d84d0dd00451018561e2ff76b75b71a114ae8570d62483ce115f18e4d8e59a6bdf90ded5491b7664f6a0e5b4db2f3335cdb7a027f5262fe6363c29bf8b5f707b2182d4c3861fd2a663676e46ffacd3aaa0968717d375ee21431da7ccbde557e0c45d6d6c488de35a5c0da6b6b0727bdeef972ba045ced7a6d615a4ab10200bff6d9b9b72643b85654336de121bd8c03d9a5da7ab93d15f230ea281438aec1ef397be2a254590e9963b557d6eca8b1e8f6007c8fb8b06bf23db2708be51cd8d045dfbb3ab948f91c02c9d928544e535de38448d0f2d9d55435d3c469a3da7f9e755ec77401193a4096734c134c19b92e0d04793531ddf264ae4e6f2d558d6a2dfe653b1c0a62c407c4d37971307dcf9f5a9f514e6433163de93df6c8d1c0220e617fe5757ec557721b0ac6da42d2914a07d70d3d51f181a58e23a5ad80c88afa0f4975c6e6564ebb8676c59ea57f5752f10d6882e48ade350044e2850c819034160080f7bfc97456d199a3bc4656a4d74a207032f32e66b5f0293a4a95c58487d05bff3b2b84875eceabf62c2b70ec933b42153a3beb35d884e4d48b7b3af89334a7d03a98160e75f516685e1fcacad9d37811fba4ba4243143f3c0a6bd55a12b04cb2f89b033f6d5a56f6dc135f0d02c8518763630fe06ade039c4c2e1781bf002b7a8995b4d91036c7a9c74fb2b9048cc2bb6de8677620f273c36ae7444807e990119acdf5c3554de1c7bfbf49f9f1d5a2430764bdddd465201daf9e8bb132ac54aaa6c1276aa7cdedbf079edac7f760e506afc948e0500039ccfc2dc2b1dc225ba7d8206f147b13a3f25942b0697af4b2450058912927d62851ebdcefd8913f42db20b49ae667fa57423236e4ffb298e0d27e3cc621c0c7a305309bafc3533d2d3fc5e4ca99da6c749f12cac4c40ebee85a1502e64e01751b4c03d466e4324959b167a96243708ff928247a09b1a59d15ee1d1f100c88b311f1c0b534d5f2c55d1ca900d2128dc9449c7bb391417621d00e9ca834361751e1b487ac07f3a35ff36ca9747f0766b385e24a285b3cd351ad6ba927f40beb0828246282d0c4808d08021c1d23a2340bca84eb0508ce44d1ad39503abe63c6bb5438b27b76e098b375db8467812c801bdfb4f261cd28edd57523fe38f086f1f96039f075101c4c002248769bad51438cb01f6a4abc45a066e81e2eecf5c1aa6f9aca6410359b77c428f43b506c9c6e29cb118cfde78180012a83bc847c6f4e71aaab43633cafb07426d5af4a9960da3d600a1b4b9863496eb86a54689b64dbcd377246c44d111bafda70dc1c138a77cd926fc98b597e8a4acc3da121d6320eed1f4b8685c14d9fe09beb2845c68cc50133289a9d3638f4ed0931e52d985efa0099ed736fca7ffdfbf45452b7dd9d26e3192adee9d3b2a81ae541880a9b6213e0fcc48fd72f56422f1dddf9a8d39f9cf14d72777264676adfa5b36d93a1ef533a7239f008930a997406a2e9e745f316478deb3fb2eadfcdfffccfaf95a8ad794e95f802f0b82f13db4f0eec555445520322f5adbcaa11fd05e4bded13631a29e09ffebc9c7123dad12e6f7cab8dfb0ab2ce477b2b3a3f0ca9ef88a15d30bd8b71819414670d13308d4b56b38b3cc59dd386172cbc780b8860f3dffb9321bbe7bce4fb743dd6b4ac8aaaecdd1c5a0bd311a22e049707e012ebfb54426a6e7c7ffc8892fd892889a23bba5cca8d786b63c7f7af3a64bb0ee74653d822db3d33cd50569180db79bd7b5b75e3592c6bdfaf88aadf07c159038cf284e5c72b2f5910cc03988166d660710b51604bbd592b1011e6d4d70e540f56bf7bf19a53bfd3a9752b838e765e62206920850af91742d92d991bca8b44ab93bc1a2d653518531ba369c57e3e0ece2993a60d7a54ff4406adad8e1c8d500f5f7b29c9fcf4f3dd6ce7b389be7f9586e914fbcfbab2a661be727df639a9ea6bf597bc34ee0923d8565f8a88be0f4bf58e03897f411dd1aff63deac618236c8de7fe067dc622200a940733c99e337f41437f5dcacafec7a492aa024162f5d2b540743039e3943b6b739c5bab7f0c3f6179b5e2a2b58b18ac39f6bf639ca0da3466fa709ab2260def5b511407e5124cbcde245b0c7c4f76af813ea6d6746797bc15bef614db9bf675ec02db195904f8f354ddb89627165c088b71ec0ab9f887be0618196856b7840564bb8d83263b7099f31208229983f9cff153d78dc4189f5b60d5971d2b5963cde00f172540cd3cc1e15b8bb0677d914eba053a50a4d9d490dbc49ec2c791c56455f1dcf3fa0f3cc3d48c11e76b645658f8fbad3f5dd76081a5355382adbe0b7cbce1dd3f821dbfa5019f7d9cb78f0cc6dff8b92ccecdd46218603622bc612626b971ed0e3bd68cbfd5f27211e2a1e495bf37dfe5f92b3dc616414ca7bc2887eb855f9360b03bbe2759c1824cebebba632d661d3a891b1fb50d4bc74dda8ff643aa502105a40a3dd6dfc556d59625e44b83e85521d840fa7cd961b6765149e2263871603129bc86bfe97f077f3faa6b5f135d5a4719d3cdee6f65871b00b266b787376824339969ba7b5aa60e3400dfe6d8f72db6f4c38416437e9599df420701df27a2bbe82bf8f033b2e089cc7cec99b2b2049031e49a948e94fc9042408334e53310d7801d4a926fd959873654e046125a0242eddaea8caef2ff8dd32a837f98e5d1a9f67cc2d8a2123b18a9bb16d6f23e8ceeb02090625efa9660601f8a82ccabe77167ffbf296c506a092821b6b3d800806ec2c56934bdb9cf426799315a72b2f1f78b7e9c0462ffc221eb964b9fc68376f6b647d300bc9a8415233958ea13f431a2238718fa30fea2cca8595538b26761a0562f4c7a68bd6c852c57c1eda02af664047104eab9ffbccbdca35e171989837750ff662e65e5412a366486186396cd631552a054ab7440daf7b386d417cf82f2234e70c6f5d28dc8352342d8403ae42f4b12a709792f508ac3d241f06519c13a7ecb7d10bb9e599b09bb442a5b9418a92707e73a2cb4aecd95c7662382de3040b4ac7569a0a0dfa99d63d333fae963e5e99d65d43ebad8273d85a58379912c3fb1fc34789244add1d8df943314e700e419847d35ff349f0349e87ba5e8302b7cdda05510bd2b44b34fbd5d88a589698526c774b780cd0f2a4dd6d338d59a8398eeeefe02dffb2125164e97be9e9723f36b4711c8250fc4990d65d3184995e5bd6a60f78fa88ac9d73046e54c60af898f93c8899ba29998b17f225b234efd86ce11b1534a9ee7a03ab2f2d869a5db28427c6aac5df93d4802e9dd87b5c1faa0ec2ebf4838b63eb7d6573abe8167c3cb47b7af9453a73f13c9e949e70d146077cb15aafee0c471665d20793be2928a96c8373213e6c4cc1ef4ffd1e135be82ad77c84e8f38d04e88f04d8c853c99840faa1f5e39e93634e88e3bf9265a9e8df84c7c7d32696459a8bdea3b773c7c6e391422b529cd5c623e722e0334311e0940684316a202cfef41e652a98adf5984ab50451939f27661370b542d58745864f4f4c69a8018b70bc38b09e0f499c047a7e8b9768cb788c0259f0b3f12dde8e28298488f0bff1aa2bc85b48a1b2b015ef0664966b4e56feae057325d3e928da78c092e343b4111cbe270c421af71634996cc3a5e546cbbfb6d386ee1857a493953a3fd5bce84aa52f368e5c2d0c830524ec2a24acfb0992bd8d8481ce93971b9d3cf7b0ad5c29ee20be2e4417346718c31a62e7ba78c63f5eca7a8fdf5bf4aa0f91b04ea068faf46bd0c7f0cf297a8fe027f91ddedddcd2fa0b29feba74f1cb3e87d07787645ca50c1bdafbfe4b91123ee2c97162938f1ce7dffb3c567e54fe75f4702e7783771b0ff06f12e21a1af470975e20cf46bfc41b8d3937a4d2ffac9952c08e6275a9511bf9e769d1a6203fee44cea3a3fb1041f5dde9220261a37393b54d7d294bc74d2beb7167f2be699b71296caf968a41ce372b913153aa3920427b6c2a0292bbcb70c2b9a44024a03e17ce082a2d6ad7cc41577ef6d5e6db34ef8277bd3b983adb09df611a03b6c9cda31de8cf4cd496b9e825e4705a7135cc57f9d018750847b2621c7f0bfe35342bb1ba97589665351c7277f33ec847a05165c876ed6a167e140427b979aadc2177a40b40c9f28d3f85ddbe1828ae0f5039ce6f08c62bec62c6b2cbfe400c5b8a6ef161c96db08dfdc4f21711486a75a79c6857bd1fcbba7095ef57f9ce9f6984720cfdffb2af5f538d19804a3aeccf50a748955840c90c9dc21aa9b4f2995d78e262e8915f2906590ba42b31ccb87702fc96470a8a1dade7d9ed518a2e728b71cc73c768ccc04faa5d7a83f4f3f268f8c2f6c4c44a282498d19f88c26bbbde7268bdb785e035f0e277865d558751b406ca7f137623ec299e965b023ef1686010cbdb7e9c2e2c1528ebedbee9aa032eacb93c7ee879040eb35367b10194e191c40b9bda274bf4b867a9a5ed9ded275c17fad997654b16f6722db7760f95d77ab4485800624eceee91f29e93aeec6d261b4b98a91413d10de5f2aca488188cd603273605fb99430ec6b4bdae1c1f8a90c59e1ee64cf6dc114beefb1c5264f0462f2a8f54e52575f7aeec087a885869f0dd6b831e03a2616ba4521a20e96a714eebe6b6a6837321add95bbf93bd788e6b05b71b74f0fd6d8327b2759d40d1d783fc133c0bcfba54338ec976c04ebb4fcb975defd15acab9525ce4508431356b5ad2d71596551eade39548908b98a446818c16795b990f4548c91660a8cb044a7dda60be06beb3da6bd8b1bc66d035f66e68b975283627e3d2a1a82d05fa2401a5c37f667422e71c887c01519782c063ecd688224b3d28f378783e11d6e35098d7b10ceb392bc959bca1c27930a7698b0f352bd3856aca7e0fca44f86bb7a97d9ad7bef15b1410941e1360e52bb011cfd611aaed690985492f69aad4dfd1141d118e08cd94be858f0db3a05a31eb77dba9a300a946dd894514a62fc5d1e153602baacaad5bbd6fc51154168d3b9aaf62eaf29bd54c361d007c382b372ef14637ded1681027042ee500af4d7941d86f4c11bd6e5f22375df9d851db15a5e7c827e25a12950bbb4365d51e137947e16fc41c2a58ac00ec78a8e9a0b69a3d2d824588529b4d516fd45c29ef1024bdf81d9cb9c166d49138e5117623294ea82382a589145572107758aadc836ac04afafce3f28d2f293cab9bb83f57d7d21dc5dc32089adfdbe0e07dafe9d318d74fce5c0268e3f175062e319db87e6a82b431efca316aeeae738764af6608336474aa4eabf5031e65250d19865561d977e65a2127499c990e6f701922667c53e3440074b5a725a2e2f89ec81922d844fee44e7d02080f2496856173ce54d9cbaeed656216ad593bc2aa464764b04b641b3471a67bf0ce5efa68793da5134e7eda5216cfb51108fac59b3f4b49975dc9d48645ec798121950a9cb7bd13bd05c89438c3f962151e61eb97c25266a7465cc4bce4df05e89fc21f7e5fc7cbe16f0d782c26e213421721914fbd59e2c226bb60bd90da6a53aa7475c020532a4085c036cbbbdc7bbbf79b8ab0c1ef43c308553c487f28ff14125eed9454d5789bbdf5ff6399673c80a1d7ee40ab73711a82ca4d8d07a98a3820444c7d4c1bfa7e0196c4f905e47eb024bc6c83b23bb0738cb123c72e99cb994d3736cd1935906d4506b72b9b6621987d0ee211aebc171d693fe2a0c5e805206f77b7a7a9f5f9c59d75e93e9f28e46c30e61dbebc908079c8a3b91ec6b96fd5b0eb1ad292cdbf95d77c88ba8c947424fe2666a4544a1254521188144ebdb587b50f98894656067d2f3e489f98af0035839640e6cf0a9db729d9669b9bba1ed1baf9a8295cc59b9b2701478679b2a372f250df6f5b53b0daeb9434bdde366d3d90eac35fd940a80d49aeaaffb5328972588273430e301f1787ff6ff761483115ad9b64b0f977eefcf08c00bd1ae3dac8062a24775bade87c542b06cbf24b57c77c5136a09a7e42200b3b9069f3c5c277ee1a3c33af50fc91391296722dc608224f0aa25c870c678eb598789565b4aefcc6b090e08cd5f649c92c332b1dc921a445f53795b7b06edfb7d606abb05d13c88c1a6551ff6594c81a0158981f23678400da7ce6e6aae70805d42c37e69c3475084b3370ae5ca384877313d2affd1f3aa4a54e064ee4518a6c41ec8412dea168f3090c12f603d43ce626d8a63d6a4325f5dbff0465b8c20c9b48ef6260de492653c522f8788a383200859709710f97e0ac197231bfddbb1ed2f83959e90f87b9a79a36e9a5bdad72bfe4c6effc2f3ce61b8f7dccc7832a2b1d44f4387ff3032cc08d09c3c4cec14a6bc1aa8d657017883d9eb128eb8a38e1db42efaa1a64497b53a069ee00a4efbc3ec54103459b5ee6c9da5d9787d0049dd2f49ae5f58297ac1906515f0b155974b400247d766320c678630236e85ecb15cbe47092d18b1c53b15740003c248ad2c214137c1ffed52adc0bcba585974545859500b1fcaca8e5ca7a955dad6eafa9459f62838fbe1c4f39aeab629908d403a11a106d821105fce4969d276e8000fe6b0969e27258f933134f04f01f110b41c5aa81f57642b102cd108f9ae71fd6eae7dd08e6cdfb45b1d3ef1ea9dd56033ada054a4b64b7ffa577fd280eb4d38d424be5593c8c8aec03f094cccd69f83dedc713f3628bfd04b89763a8d7e4104aabb47ba2d58e67bedb62d42ac856c0bac1019d1bd4125475f6e8e7b7edefe6f562593f0113509ea07eca0fbad1b9d0a6afaddc8b60c1cf7f707f21b7ef8b24971a4ca54575d7f35e5f7a105fcaa3ed144d223d99d67a2291f1c39c3a5b656abdcf6b81a2bdf15d4028fc94ce95e4fa709083375b1dbcc144a2ac113ff217cb92a0e6303ee24341a054c2cd171af1783ad21cc8ef14a0599e10103002e56fbce3ff10f34dee3237e6434805352cc10e8af2001a6a3839b72c20c76bddba6496b31a51872153fab72950b98d9de27feffd3674935e91b9516eb15ab40ef73a398db2abc6aa8d40574b9076577e7e59d77e61fd9aa630f70fbdf2e39d9bdfb5c1188d3789100b8f83a7f8746d2cdea7500c0f7a4e61acd2bef22f94e8c502981198605f9c7dd491efcbb6cbede35275eb8822e8d89fb2ec55a1b2ed86ab53e582c882e1e7dee6d03d9549a0eadd5365358e0bc25edc9e72cbc342eb814198c6a229d800eb1615d79f3b2faec93e9eedec8a2a727b53d3b6f9cae68ea51a20cfc87eeb4faf1be048e9ddc2dcb2e62582453aab18f78ef836e59401caba353b20407f7bdad52455a569b96771cf2617ad171f01e641290641d99d03a3ea1f8c54b1b434c4b24ce37d0f361a96f6ee1b1580f2cc85c3f056d55c1da5dd9f03a22c3d433c520748505efa98478efa5e9833a40ab70af07940b0194c10587d78df85ade34d1b169bcefebf38fbd7dd3af9daa78b625965ab1a2cdd963d1895ee908c6b1bf9db91c6f7fe91cbaffe469f39c6cb36fbe68fcbc25d3b62be0f4a1ac594330cb0805977ecbc744c1e23626088e9f0cc93112ab3657da67ab69bb14ddedaa09917049b303dd22ab396918870b409e1dda7bcdcbc33a8eb1d19962cc918b8a217ffbefe6e240a3a59640c8881bc1db75430cc5e06b344ed8044b1fdad8acc8269d49ad03fa26d7ed7268b36047b311c7756651e8dde8a06b600aa8600c984281944f0e22a38bbef2b9ad003f47ae3fa9d40cbc4d9c69e7d707fbd83b24df9b748f4d9e5a3574fd509916fbaeb506ee52b91eb03d251605a592118aee5b2a9f3aff0e5b1d50e242469672c0384187eca67871aef36255057d628af0cd8a24e3b3426a1879fba83a013ca43f5b60a757cead646a7b361d0913a74bffa8bcbbe5877b3d5b80fd0123677f32e6327ad62d3b4486ab37d59213c05137eb98edd0cddad11c2c2b6dc0ccf0ccda21dd8e6035a34ad016c6f381042864af4a87fd5bf9fd5a237c61ee6a82df2c1162365515b606ad043e23887e8e531bfd4a45e954dfcc233bb284d73511ea3886d31133c22608264dbe9f943196cf95848399f9e80a1df224f282d81ddd813154846ddb9542212901ceb24a219ddffb4bfe6534ead02a2a7b9a38854edcd09dfc6ac7fd963c6427949cdadd272ca33eb941b38deeb916d4f91cb419ce9779e483b6a82f105d8eef47516e231c8b04f8d32ad52550a68bcc9f4f00626f32fefa5ed4792dd438890b874fd8b14feb71ee1034b11548d48ad5e379bbfc22bab963fb59e4d8f66a8a83191d5c123fa59ef0e7ccb293316cc735b3db3a65e955a5f3a4d5b3eb62e9189e7cc4ee3b37699d30ce675ff1f3392fcf75654343da6cef74ad262c2683d0431c3d2d018f33e95713f6fc9418af6d5ee5ec213d977edd9661301e52823151c16a2d3fdc0acf6f4a6493cbdcbfb0cd3c5fb79a3d3e1396426abd7ae73e810838123ba71a9c5eeddf8ac0f3e3fec48474f2ae7feea3914174bd2c94f814162d59f8b1f38d1d1e48174fb73b9d7566bedb35394b2cc234e96ec60e7d7f64aeecbd170a81f3ab3484b4f7824e3c277d4b5a01dd26504e3327cc29719e64e5be79a371006082f44195e2b73ef452c08446ede7954dfba1bdf36b77276b048d9470a418feb5b4a2efcf5c5778d1d1b5bbc9c32037b46b5c6300ab7523356a70ecc8de9ab13574e551be4ef6dcd332b90ddf980db21913b5b0240add0f2cf25239c0c5f489db59a8cbd44e9c405ec8bf2bf75696850fe05337270b460b11ea750c716d91b6caa9f70ba4ef3a7a16cc1a863323ce90a623182b58504d607a589d9c179489ba8c804b5384111ecbefb6db513f5f04bc2d2d2f3d59b947f88b010015598bbf5c46abf6212730018e2219bfb8a6d411f60a3578371999ef9220879f5bd53106e15e11b5576acd6177c501e7468c9a336384b5568d1e3163d8b1eea9e69f32f7ec831d06d4f4c9d8e209352470e402843f7bd069f62ec8f255bda8951e3b5ba65e26547260621b9ebce6745e6a13f9b5715a87b006679ba006e4b891b864f79db078f1cbb28c7da0e6746110ecebd3f6a561bb654b547bb2bf5c9d7e858e809e922e1f2708ca5c1f4f33435188d78e13be7ec50adc0f3c54c659b2f03e376d4893f7a315022c3c3c7a77661f94a511a4cf4518b1d39871c713ff7524e0a37595bbdd3f61b4c7059336e4f05f31e3904a348199a7c69b1a8121990c1a2e2bd88a58308874fa8b3cc8dea96288b519712f196d13ee945449b9ad3b14e833d1081fc3262d24534edf040310dc590c89d630cd0439cc691afebc772a2bb8e93d562a31fed0b2c6b7acc5310353c86e81ddda634385c03cacbeff3f65f0a5393e24c7cae02ebc370c3e088206d06c98c12cffc52a80bc24a8d8115af2175092cbdb559bc4a42824a7c5d316b17efe776113a0e81b6d3fe3874fbbf50b985efa5e28f69b35dae400890697d192366c708232aed9e39922032fab22ad310c097506bfb02b872f8c550db3b3c067f19bcea612a03f09590d33a47bc31f5e7a4bbf6918099e9f58f49ad5f61d86db8045f8e83cc009439748e4f65125fd113534930ebaac46e5ee55eea08489ecc9ca92996d48005bd7cbc5f371e6a4a9277ac15ba4996003eb9ab4cbe0b752131e03c6ea45f6bf17d54509f52fc5ea02d6076764304801e3ccd4c80cf1a8fc4044f9410b18204a4b4535d92d79205b856f4649bd5b4fa356b0c92bcbd622967ee1f6629aaac36c6677c3e1e4d517836cf59cd0aac62a83b5c1fdafb7430e2e80d0cc086ac5f61a214a8d98ae87ae8472ef744893825d43aab893b44162292223834937405dfcf35e28844aa1eadb74d759d7edf91f750dc2d7c0a63b340526c7d992d556682724ec3208df40ad84aca09779080a02386d1ead6cd3ed69fb8d056914569b3f9122034d7f19c745d8bfab0a3218b7e466d4f780377b29d2e0698c8e394913f9f2c356bec676c6df6d653786b38df2d08438320fff341caa1a79b4a7a520d464f3046ca265c76d26682c414193d95d39086069370b004e744f2165c67502687dd4a221f462fa80c7afe0b835138323292e2ee0f65be80b892a761025daf1d2dbd52acca36349e4f1ea68d3e2c77af0125a4ae28368c1ece9efaf34772515aa8bbffeb0cf5c5bc50bb8aa11438904c7d225c285b15dfdcdeb25e5a492b08082cc6e88fd205358dc3900ea7e6be3c8e1a0f59e59b81ff19a7ca143fa99bdee4cb3bd9d6402df8c8badd6cf39f82972ad0da8376f9a49ee3ad9c95c2e3cf1782615f1b387e592b301e7f46440536d8b3a35458e776980933c51391196617998a9061e348c748c9c534f95831b3ec8c5b2fe6eb4261436b8c92a79b06ae54f8120f2fd6281052afd71034be00efeea12dfa6390c8cddc92b0346ba3085bc2dd61e909f849a7ea4c3d9b62e4853ddb4d464dc6e37623e4a8a97d49ce9745638ef8db85c161a4554a1b00945665932c523934f0b329eb1e0db5c616a76e9f62b67f6ba1ef53e59ba5eb022c0af220133781872aa03ab618064e73c063c7f092d06cdbb3b5909d1c209b6a0b32568d2cc067aa7942f2275606b2398cc81b685f555c6ab9e966bd8cb86ea5927dabc746d386836af3944ec22e3a78c0934db213d65bcc99e98dcbab613c9e0fd26e65c2092f30ae909630a13eb0127a35424720b4c3c6a88ecf1e11ce4826688b3784c8a500c3e238f2d8f82f2e78631e9c687765d3966eb2f02a5d7c0c3b8b1488675b6e3cd64676ca197c9053f95c0d1cf7abc59f36394b21a3b4584b84f2bf0f0fd7cda45fc00f27b749fefed58e6fd4cce9f0e08deefa2a2ca61f766df24b8c08410a225f4b6fa5ad590f7771a266a0b7a2bc717aa471313ef8d1158826fd019cf057e888797ed34ee037c949bb229bb7cdc2916815ec76a3e4022a443ece5b138772d6c10ffb50ca9dc98dadff7fcd3aca57fc00c33e710536c8a74f9bcd756353691aeda79973ac1bc423e6d9a1b8174981fd40e5a13d11ffefcd3f8d713ec0efd4cfe37b4030ebbc23e3a0bd74e88212f0d7c42fe02dbf56e9b9663c048086a8c6afb8e4ec7d8d92c24880980bd2af943ae55780cb6f30894fa0290988fa002f40a4b4075f835606b0c88edb7401fb747aace343c7c8bf4a919f2bf6a11ed3d30e68f048aaaa4be6e1888552a38efec6776109f846d0644ff85b8c513a7f33000f3258bf3cc1427bc49424181abf09e6f516e7d27c718bd63a6e9a90e7aee21e6cd66f4129303cdc5f46074633eefd29e0c0a39eedd09d07c17c77766e6a8ea32e128cb5aba7d44c8d7a7d3d31c41591005bc0f3d4959ef8b964e51ee04030c445942c7b84cbc1dfe551f6c69026a2d089eaa10e0520bbed17fa265f1cdc6ada8de9111ff67503c1813224290e2ea6c576a1f55cc178d212c3575a62156ab43f2be1424f8dadcf9dbe80c9fa2355b5b12fb5d20dba3ce3a4f636079753d5c3e62e7ed5727c5933ec77c379ee3d1e406fd869ce0f1a890bd1aa7d082b4518afbf9c8c551663a6137c472280a1a6d6340d44daa493fca6bc2c24bea174e5160a5a2b7cfdd712d89d573f9afc006afe166fb9aeb0555bd17fc00313b6e810cd706261090427b004b71d4151541d3c065bbe8176614b9e2801537a917c442bfb56e7cefea3b4ff514033339976c56164d72d5b39b19f87c265321dbd592b980a2cb8bdfe576bc89b1aedfd00a98e0548a986a4c4fb00b487221330f1d59898e23848ddb1254cd2eb4e447d20ceaf13955a796e6a0c29ea60953937bff3e81083b3f43ddfa2762e87e035d1995964c69088e58721b6d7b231d3e98e6412b6c4962bbb6c0cf6404c64f13729cadb8ff966c0969a3c62a8160f3663c5c43e344398ddb6078aa5c87484421f6caa9f44586aaacb2ad83940cc0adbc5c08bcd1dc8b6a06f28349a39982ddbc885994f02e068534271000a70b682f120672f5d4a3255ec221f05193d8303d6c03b6b78b11eac6db6602a3607939f570021243dcecaa5c75e3491c29d7dbcf4f699f944795aaabecc8572a162e55d4a6101cee735f2d84213d2cc59b7ab8ad710b43f6aa001c3acb6e5a3da63d8fc04c45b70012dc20a34112f14b64c81a571dac8c13f0f150d1ba0c873988270733d1439ab64cb11e7d53ede182e2889108f5518c46caa3f699beee85cce9e2bdf611d5388ab2a0358af7043a8ed89318e2967cff7205c76c25f384c87ea5a6e151b27e80662c5dabf453e4c7130892bdc6f396673ccae2ae950ffefe0601955f6aa224d397d4a7c603735286c76bb5dc7d2456f9af41ce4f294aee1ff1019ea78418397012adbfaf7b822bfc83b923a1200de4e41a728130df150e502a22d678e41c9c932c5a66177b5b77af17493a6c6d5a23a1ae84063e669cb893a76813d74e6d52a167607d8178c9c131b993dd7e5d7f4893b0623beddf71d1bdc460d5b68dfeda1ce9ebff3500c39b45b233c49d3a66a2aad4c6c38fdcd9ba3ba84a466cc585a4248a1149df72a80dd36cb83d5b372cabf4ba3f27425c82d30c93d98c7d57c3bd285a2d2007b432062dc5ed4c8f7457a0f286bd92a32637d087846d85278744d3e4e3eb3d1b666a727102ac160d20b1bf7c39e61a2a7272015b2dc2a8556a6c79b2d7e6e9ea443925f1bed178f06bc9a0dadbc33364dc00432c820c66b6853ea5583e55ab87b7176b5e0fc10d0db36a97bb813ce83a4fd4a97821a8e4c004c176d367e42337a8ecc5faa0c8041891d368f9a84b5cf67956a81526ee0a29e85bec1a65a40acf7acf08cc85fa558aee2a98e7a22787b8647e3f49ef57defbc8b5c2e44c629acf78a065be9928842692f224dc09a30502be3a95ba16ce64676c1cca4b237db3fadd6ff70992a9f4903e66a7dd254faf103cc6ea50b9025167e72390c181f80af355813ba497a67857dfe1230651175a7fbe3cd6cb2ccfa488e6e3827f5a3309b5b5f4e70ab417ac778ec2920380fcf2f1418947e47e528bd5ea0f61ca27011dbb88f1d0f65612d715bbc120ba617e588b874bd0b374265d3dae2c6d3367bcb0dfee551dba25ece12cf37d816ac49a222ca514e4b9a68d1d1444d6721b84c8e2e87ae9189d8ac955873f17c6623422dc99d2e446ab8940f18a05e64ce859d7ba8b642d9e6ab8f5045b23a34e230ceb4896ce6974bc84ff1a2efb924e7a882a6721f5183b8365f44ca45b1f46d8111ca7423388bda0aa4d40f4a306a05d271d1e31477d07952232bb1b498343b127cb41f96a3ec759440c34a052b99e05ddee1ce54e7badfde1690d1b904a3a9a4a94fb97381c21e61230468a1fad4611b545fa34daf1aac8442b87754815f9e001054fbf0361a337ca4b471be9b1dd2a006ee78509e09314e76dfb0e1c0c605584140b662fc0faf0b7f44ce6f80621f01b4278f19205fb59b6fd8c4bf4fef91e614115470f556d5e4e0ab0d59b2af2009e0f965bbe24e1e977a67d356a4f78d580d4562793fb0479337e451bcc09d0cc85e0f894e771ffbbbdafbf5a92bbe5cf62363f7291044b184f18e7cad2cc906665991baa733b97e78bff976a63d6a32962ee3c162fd9fd97442d53dab3eb36db6832ee0a13fe8442f95b5d725aedd4df57478cc8c7202dae2867018bc25e287dbd23d69bcf581702b0049bd700f39186989dffac61068d48b64b367e80a9a70fd723f51ac0c146a2d886982faadeccf173fb8e24d4a9ca283e8825bf8a36190394e28d9226aec7229085a370ac9c913872b8ca5d0b3a30f5c6bed1faa7ab66e62608afc3827b05302722b1bbfaa00d3b50c1642867eeb22b8906de779242371a769a10850a225f003b9c49b360809b96aff74d50e2158f65f5706d529286b3bcbde960fed3df275da63dd0d7ea993efd42eea400a43d2e22d791db7b34aae5694c3af3b03a2dad0f824d44d8bba4f67ebcce34d5426f0a30d17eed7ce15e7f8ddf9533edf0a671dba8f16c9bdf3d9aaee957e065fe1fcc749f6189a99a6cde00bb71af746be38ce076d06e9964e9f9c1c9840aee9fb365db548c6eb127c79b671cd4a9bda1bf82f3176209f3b7ad48837d650403e06ab1ec15ffa241cbf62e56b833b2b663f7d9e2bf7d79cbd3c17a757eb9735783e890fb8070f1cc8d36e622ba3f1313dc81f5ee795a7b25f788529aa5ce10085ec296700d82ef08d236a724d65fc6fc40a30f7ee5fb955502497dd75d028839caf6565983af0fbbc84b261f2f637d5b3604a1a186ca6bdc23edb8edd686a624fbd5c1ce2eadc6dded0a939b920537694ba5cec463f9703ef85f8fdec155d246fdced46e302f7b9a2e01040c680478efb9a1fc30a8e8420d5239eb071dbf3b7fbc4a79ff1be1bf2c5ba822bb2a788e8bb96192f6e5f8ac82a92230f6a8144a1137a8aed4154ba2f592eea9f5bc637d1d11767ee2002f6a947fad5f28c5a03b39b7568601cddc700278b4e53ad78f9c3f8edb5df1a0732bf007f51b31e14e79f72a549850eb7e12e33ecbf5239b8d44ac04708e3f814d748bfb1b5b5c8ce67b68c53bd0c269e40389816bd944d7a0d91af45ccd8692cfe98ffda51024d90cb9267254dde9235fdd250de505c1fea39ef87697b8d629c31306b0a8526936242f97384a725c0c7840135a8abe6cce65f239f788c57ed4900ab36e13a63736ac0dda9600833c5206c1e231a28230d06a19782d1af60c085795a5f944b294897e4a96081dbf51bea31c5f246e260d726b1e301e8c61c67e68f04cb60cecbef939afd07e0e7208f34b0600b2a2f1eea51b835f028447dd21ece890b6eec8b1effca6f708d3d23b6d43bb77ec88c2f88721b0a2e982e13391342e17b167ddee257286b1ccec8499d9d5eae2d5fce28654a0921dcc168ef8cd8328c970741dbd557533b14f7b96c20679826801dcfa052e4cb5a58fa149010ab617f418e1649ec4bf805e4ee9f4a7b49905f22c3fd47a975883ee7b642c4ffeb731ce4b81438e6005b0d482337503be30afdd0cdb1da86d8ae1b587a2a7bd76662683d56a2831b354de8de0c6b484d2cde9dd65fa7ba4d210b5e5d390697ac138d4827d811458d71782aa2275fce54f8fe334178e9addfd1f7d01b9776f2b97b6cb9c642d3d3c7b55bd050d420b3907b5e85550a7fd3aa85698eb4b74a4177860e4eda4c2d6d09fd6c18d703310b55fcf05fe673969757b8ea7f4855e84372a864fc24600b67eaaa8ff7f8eb38d04fb23b67cb4ab1693807a5899f329384c2d6545aa75b3a5c9f10b72b0707656fc0101f2dd64e1cac1ad9b5169e05d79e1d31b6702ce202732d7045f5cf2e1aa559c97f10814165127059efbe0f9b3780d5ef96534e12a144e71d0e178fa612e12e16994041cd7c07580d522e93a0a6eaf3506a56420144e7f30b4fa04b372dc6b3b6554def4c5416cf4b8d236b4f62cba7fa82c1387efb0b52a2d8bef1e95896f68bb2626d53e4a21bd6d8d1b63587733c3ce18260effed343fa8cfffb25a03891aa8139140b362819bf7443ed85559ce3003b7d66155e0c3d07b737faae9c9687794a967452791fd189ae2e26d4db837481d1fe90b9e093eba6c6b56455e7e120a5945685ee0ed7bcebaf5aae2642e6678127ce598aa507af31ad24f5dbab980df262a4996a40ab125d3b3c004409d04fa5d7346c5cce565ae6bf92fb745bc389bc2a4206ee059901475b0395b4e02277d3093a5a91115decac4a9994d46f71d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习记录</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>存储管理</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树及求Huffman编码</title>
    <url>/2024/07/21/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>掌握建立Huffman树及求Huffman编码的操作，加深对二叉树应用的理解。</p>
<h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><p>根据Huffman编码原理，编写一个在用户输入结点权重的基础上建立的Huffman编码程序。<br>程序设计思路：构造一棵Huffman树，由此得到的二进制前缀为Huffman编码<br>由于Huffman树没有度为1的结点，则一棵有n 个叶子结点的Huffman树共有2n-1个结点，设计一个结构数组，存储2n-1个结点的值，包括权重、双亲结点、左孩子和右孩子等。</p>
<h3 id="三、详细设计及运行结果"><a href="#三、详细设计及运行结果" class="headerlink" title="三、详细设计及运行结果"></a>三、详细设计及运行结果</h3><p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/哈夫曼.png" alt="image-20231215212749050"></p>
<h3 id="四、调试情况，设计技巧及体会"><a href="#四、调试情况，设计技巧及体会" class="headerlink" title="四、调试情况，设计技巧及体会"></a>四、调试情况，设计技巧及体会</h3><ol>
<li><p>该程序中，在构造哈夫曼树的函数中，使用p来对哈夫曼树每个结点进行操作，初始化时，需要<code>HuffmanTree p = HT + 1;</code>,因为HT对应于该结构的头结点，而本程序没有使用首个位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">定义结构体如下：</span><br><span class="line"><span class="comment">// 对每一个结点，huffman树 该节点的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="type">int</span> weight, parent, lchild, rchild;</span><br><span class="line">&#125; HfNode, *HuffmanTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> **HuffmanCode; <span class="comment">// 动态分配数组存储哈夫曼编码表。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>select函数需要注意：获取最小两个权值的前提是，其parent为0,（作为条件）</p>
</li>
</ol>
<h3 id="五、源程序清单"><a href="#五、源程序清单" class="headerlink" title="五、源程序清单"></a>五、源程序清单</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据Huffman编码原理，编写一个在用户输入结点权重的基础上建立的Huffman编码程序。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每一个结点，huffman树 该节点的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> weight, parent, lchild, rchild;</span><br><span class="line">&#125; HfNode, *HuffmanTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> **HuffmanCode; <span class="comment">// 动态分配数组存储哈夫曼编码表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造哈夫曼树</span></span><br><span class="line"><span class="comment">// HT为一棵哈夫曼树，HC用来存储n个字符的哈夫曼编码，w设为一个数组，存储这n个结点的权值，n个字符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatHfTree</span><span class="params">(HuffmanTree &amp;HT, HuffmanCode &amp;HC, <span class="type">int</span> *w, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">Select</span><span class="params">(HuffmanTree &amp; HT, <span class="type">int</span> s, <span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2)</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    HT = (HuffmanTree)<span class="built_in">malloc</span>((m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(HfNode));</span><br><span class="line">    HuffmanTree p = HT + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i, ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        *p = &#123;w[i - <span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125; <span class="comment">// 初始化了n个结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; ++i, ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        *p = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125; <span class="comment">// 初始化了合并后生成的n-1个结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s1, s2;</span><br><span class="line">        Select(HT, i - <span class="number">1</span>, s1, s2);</span><br><span class="line">        HT[i].weight = HT[s1].weight + HT[s2].weight;</span><br><span class="line">        HT[s1].parent = i;</span><br><span class="line">        HT[s2].parent = i;</span><br><span class="line">        HT[i].lchild = s1;</span><br><span class="line">        HT[i].rchild = s2;</span><br><span class="line">    &#125; <span class="comment">// 创建哈夫曼树</span></span><br><span class="line">    <span class="comment">//-------从叶子到根逆向求每个字符的哈夫曼编码-------</span></span><br><span class="line">    HC = (HuffmanCode)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(HuffmanCode));</span><br><span class="line">    <span class="type">char</span> *cd = (<span class="type">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    cd[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = t, f = HT[c].parent; f != <span class="number">0</span>; c = f, f = HT[f].parent)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == HT[f].lchild)</span><br><span class="line">            &#123;</span><br><span class="line">                cd[--start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[--start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HC[t] = (<span class="type">char</span> *)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(HC[t], &amp;cd[start]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印哈夫曼树的存储结构如下；\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= m; ++x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个结点     权值为：%d    左孩子为：%d      右孩子为：%d     \n&quot;</span>, x, HT[x].weight, HT[x].lchild, HT[x].rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印哈夫曼编码如下：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个结点权值为%d的哈夫曼编码为%s\n&quot;</span>, j, HT[j].weight, HC[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求一棵哈夫曼树结点下标小于s的最小的两个结点，用s1,s2返回他们的下标</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Select</span><span class="params">(HuffmanTree &amp;HT, <span class="type">int</span> s, <span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2)</span></span><br><span class="line">&#123;</span><br><span class="line">    s1 = <span class="number">0</span>;</span><br><span class="line">    s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1 == <span class="number">0</span> || HT[i].weight &lt; HT[s1].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                s2 = s1;</span><br><span class="line">                s1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s2 == <span class="number">0</span> || HT[i].weight &lt; HT[s2].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                s2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> w[<span class="number">8</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    HuffmanTree HT;</span><br><span class="line">    HuffmanCode HC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已知有%d个结点且已知权值，以此创建哈夫曼树如下：&quot;</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HT为一棵哈夫曼树,HC用于存储哈夫曼编码：&quot;</span>);</span><br><span class="line">    CreatHfTree(HT, HC, &amp;w[<span class="number">0</span>], n);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>上一篇： <a href="https://likt11.github.io/2024/07/21/二叉树/">二叉树 | Likt’s Blog (likt11.github.io)</a></strong></p>
<p><strong>下一篇： <a href="https://likt11.github.io/2024/07/21/图及其应用/">图及其应用 | Likt’s Blog (likt11.github.io)</a></strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>实现图的深度优先和广度优先遍历</title>
    <url>/2024/07/21/%E5%9B%BE%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实验六-图及其应用"><a href="#实验六-图及其应用" class="headerlink" title="实验六 图及其应用"></a>实验六 图及其应用</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1) 加深对图这一数据结构的理解，学习利用图来表示和解决实际问题。<br>2) 在掌握邻接表/邻接矩阵表示法的基础上实现图的深度优先和广度优先遍历。<br>3) 掌握图的最小生成树算法。</p>
<h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><p>1)  在邻接表/邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。<br>2)  某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。<br>    设计要求：根据下图中的楼宇分布，设计出布线造价最小的局域网络图，要求连接所有的顶点，并且总的布线费用最低。<br>    实验提示：要想布线造价最小，可将图中各顶点间的距离看作其费用。这样就可以用Prim算法构造一棵最小生成树来解决问题。</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/graph.png" alt="graph"></p>
<h2 id="三、详细设计及运行结果"><a href="#三、详细设计及运行结果" class="headerlink" title="三、详细设计及运行结果"></a>三、详细设计及运行结果</h2><h4 id="1-对图用邻接矩阵实现：以如下无向图为例-验证算法合理性，深度优先遍历：345127-广度优先遍历：345271"><a href="#1-对图用邻接矩阵实现：以如下无向图为例-验证算法合理性，深度优先遍历：345127-广度优先遍历：345271" class="headerlink" title="1.对图用邻接矩阵实现：以如下无向图为例 验证算法合理性，深度优先遍历：345127 广度优先遍历：345271"></a>1.对图用邻接矩阵实现：以如下无向图为例 验证算法合理性，深度优先遍历：345127 广度优先遍历：345271</h4><p>​    <img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240721122022588.png" alt="image-20240721122022588" style="zoom: 50%;" /></p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/graph2.png" alt="image-20231228203321525" style="zoom: 33%;" /></p>
<h4 id="2-某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。"><a href="#2-某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。" class="headerlink" title="2.某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。"></a>2.某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。</h4><p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240721122131013.png" alt="image-20240721122131013"></p>
<h2 id="四、调试情况，设计技巧及体会"><a href="#四、调试情况，设计技巧及体会" class="headerlink" title="四、调试情况，设计技巧及体会"></a>四、调试情况，设计技巧及体会</h2><h4 id="1-实验二关键算法：Prim构造最小生成树"><a href="#1-实验二关键算法：Prim构造最小生成树" class="headerlink" title="1.实验二关键算法：Prim构造最小生成树"></a>1.实验二关键算法：Prim构造最小生成树</h4><p>①需要使用一个结构体数组，shortedge来存储各个顶点之间的最短路径，其中adjvex用于存储最短边所对应的的U中的点，lowcost是对应权值，也是当前最小的代价。②对shortedge数组写入初始信息，将起始点放入集合U中，即令<code>shortedge[k].lowcost=0</code>③对后续顶点处理，通过minimal函数找到最小路径所对应的顶点，输出最小路径信息，将该路径对应顶点放入集合U中，更新shortedge数组④关于minimal函数：只需要在当前数组中比较出lowcost最小的元素，返回它的下标loc即可 在vertex数组中找到该元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MiniSpanTree_Prim</span><span class="params">(MGraph *G, VertexType start)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    ShortEdge shortedge[VertexMax];</span><br><span class="line">    <span class="comment">// 处理初始点start</span></span><br><span class="line">    k = LocateVex(G, start);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        shortedge[i].adjvex = start;</span><br><span class="line">        shortedge[i].lowcost = G-&gt;AdjMatrix[k][i];</span><br><span class="line">    &#125;</span><br><span class="line">    shortedge[k].lowcost = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.处理后续结点</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = minimal(G, shortedge);                                                      <span class="comment">// 找最短路径的顶点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;%d,%d\n&quot;</span>, shortedge[k].adjvex, G-&gt;Vertex[k], shortedge[k].lowcost); <span class="comment">// 输出找到的最短路径顶点及路径权值</span></span><br><span class="line">        shortedge[k].lowcost = <span class="number">0</span>;                                                       <span class="comment">// 将找到的最短路径顶点加入集合U中</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G-&gt;vexnum; j++) <span class="comment">// U中加入了新节点，可能出现新的最短路径，故更新short edge数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G-&gt;AdjMatrix[k][j] &lt; shortedge[j].lowcost)</span><br><span class="line">            &#123; <span class="comment">// 有更短路径出现时，将其替换进short edge数组</span></span><br><span class="line">                shortedge[j].lowcost = G-&gt;AdjMatrix[k][j];</span><br><span class="line">                shortedge[j].adjvex = G-&gt;Vertex[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-关于一些输入scanf说明："><a href="#2-关于一些输入scanf说明：" class="headerlink" title="2.关于一些输入scanf说明："></a>2.关于一些输入scanf说明：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第%d条边信息及权值：&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d,%d,%d&quot;</span>, &amp;v1, &amp;v2, &amp;w);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;start); <span class="comment">// 有空格</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入顶点元素（空格隔开）：&quot;</span>); <span class="comment">// 输入顶点元素</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;Vertex[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、源程序清单"><a href="#五、源程序清单" class="headerlink" title="五、源程序清单"></a>五、源程序清单</h2><h4 id="1-在邻接表-邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。"><a href="#1-在邻接表-邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。" class="headerlink" title="1.在邻接表/邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。"></a>1.在邻接表/邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。</h4><p>使用邻接矩阵存储图结构，并将邻接矩阵打印 算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在邻接表/邻接矩阵的基础上实现图的深度优先遍历和广度优先遍历操作，并输出遍历结果。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVex 100    <span class="comment">// 顶点数目最大值</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VexType; <span class="comment">// 顶点的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType; <span class="comment">// 带权图中边上权值的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VexType Vex[MaxVex];           <span class="comment">// 顶点表</span></span><br><span class="line">    EdgeType Edge[MaxVex][MaxVex]; <span class="comment">// 邻接矩阵</span></span><br><span class="line">    <span class="type">int</span> vexnum, edgenum;           <span class="comment">// 图的顶点数和边数</span></span><br><span class="line">&#125; MGraph;</span><br><span class="line"><span class="comment">/*----------创建无向图------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">(MGraph *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> start, end; <span class="comment">// 边的起点序号，终点序号</span></span><br><span class="line">    <span class="type">int</span> numV, numE;</span><br><span class="line">    <span class="type">int</span> w; <span class="comment">// 边上的权值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入所创建无向图的顶点数和边数（用空格隔开）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;numV, &amp;numE);</span><br><span class="line">    G-&gt;vexnum = numV;</span><br><span class="line">    G-&gt;edgenum = numE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 图的初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G-&gt;vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                G-&gt;Edge[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                G-&gt;Edge[i][j] = <span class="number">32767</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顶点信息存入顶点表</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个顶点的信息：&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;Vex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入无向图边的信息</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;edgenum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入边的顶点序号，终点序号，权值（用空格隔开）:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;start, &amp;end, &amp;w);</span><br><span class="line">        G-&gt;Edge[start - <span class="number">1</span>][end - <span class="number">1</span>] = w;</span><br><span class="line">        G-&gt;Edge[end - <span class="number">1</span>][start - <span class="number">1</span>] = w; <span class="comment">// 无向图的对称性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------打印出邻接矩阵-------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintMatrix</span><span class="params">(MGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n图的顶点为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, G.Vex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n输出邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%8d&quot;</span>, G.Vex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n%8d&quot;</span>, G.Vex[i]);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G.Edge[i][j] == <span class="number">32767</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t%9s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t%8d&quot;</span>, G.Edge[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MGraph G;</span><br><span class="line">    CreateGraph(&amp;G);</span><br><span class="line">    PrintMatrix(G);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>深度优先遍历算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****************深度优先遍历*******************/</span></span><br><span class="line"><span class="type">int</span> visitDFS[MaxVex];<span class="comment">//在程序中先全局申明该数据，用于标记是否遍历过，初始时为0，遍历过将其标记为1.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(MGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">DFS</span><span class="params">(MGraph G, <span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n深度优先遍历序列为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visitDFS[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visitDFS[i])</span><br><span class="line">        &#123;</span><br><span class="line">            DFS(G, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(MGraph G, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    visitDFS[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, G.Vex[i]);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (G.Edge[i][j] != <span class="number">32767</span> &amp;&amp; !visitDFS[j])</span><br><span class="line">            DFS(G, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>广度优先遍历算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****************广度优先遍历*******************/</span></span><br><span class="line"><span class="comment">// 队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data[MaxVex];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    Q-&gt;front = Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(Queue *Q, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MaxVex == Q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;data[Q-&gt;rear] = e;</span><br><span class="line">        Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MaxVex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(Queue *Q, <span class="type">int</span> *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear == Q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *e = Q-&gt;data[Q-&gt;front];</span><br><span class="line">        Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MaxVex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line"><span class="type">int</span> visitBFS[MaxVex];</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(MGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n广度优先遍历序列为：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visitBFS[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    InitQueue(&amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visitBFS[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visitBFS[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, G.Vex[i]);</span><br><span class="line">            EnQueue(&amp;Q, i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!IsEmpty(&amp;Q))</span><br><span class="line">            &#123;</span><br><span class="line">                DeQueue(&amp;Q, &amp;i);</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visitBFS[j] &amp;&amp; G.Edge[i][j] != <span class="number">32767</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        visitBFS[j] = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, G.Vex[j]);</span><br><span class="line">                        EnQueue(&amp;Q, j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MGraph G;</span><br><span class="line">    CreateGraph(&amp;G);</span><br><span class="line">    PrintMatrix(G);</span><br><span class="line">    DFSTraverse(G);</span><br><span class="line">    BFS(G);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。-1"><a href="#2-某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。-1" class="headerlink" title="2.某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。"></a>2.某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 某公司拟建一个局域网，需要连接6栋楼（0，1，2，3，4，5），其地理分布如下图1所示，各边上的权值代表楼宇间距离。</span></span><br><span class="line"><span class="comment">// 设计要求：根据下图中的楼宇分布，设计出布线造价最小的局域网络图，要求连接所有的顶点，并且总的布线费用最低。</span></span><br><span class="line"><span class="comment">// 实验提示：要想布线造价最小，可将图中各顶点间的距离看作其费用。这样就可以用Prim算法构造一棵最小生成树来解决问题。</span></span><br><span class="line"><span class="comment">// 顶点类型为整型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexMax 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxInt 32767</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> VertexType; <span class="comment">// 每个顶点数据类型为整型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span> <span class="comment">// 邻接矩阵结构体</span></span><br><span class="line">    VertexType Vertex[VertexMax];</span><br><span class="line">    <span class="type">int</span> AdjMatrix[VertexMax][VertexMax]; <span class="comment">// 邻接矩阵二维数组</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;</span><br><span class="line">&#125; MGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType adjvex; <span class="comment">// 候选最短边所依附的U中的点</span></span><br><span class="line">    <span class="type">int</span> lowcost;       <span class="comment">// 候选最短边的权值</span></span><br><span class="line">&#125; ShortEdge;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateVex</span><span class="params">(MGraph *G, VertexType v)</span></span><br><span class="line">&#123; <span class="comment">// 查找元素v在vertex[]中的下标，并返回下标</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == G-&gt;Vertex[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No such Vertex!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateUDN</span><span class="params">(MGraph *G)</span></span><br><span class="line">&#123; <span class="comment">// 构建无向网</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入顶点个数和边数：\n&quot;</span>); <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顶点数 n=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;vexnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;边  数 n=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;arcnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入顶点元素（空格隔开）：&quot;</span>); <span class="comment">// 输入顶点元素</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;Vertex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123; <span class="comment">// 矩阵初始化</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G-&gt;vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            G-&gt;AdjMatrix[i][j] = MaxInt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    VertexType v1, v2;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入边的信息和权值(例如：1,2,15):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;arcnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d条边信息及权值：&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %d,%d,%d&quot;</span>, &amp;v1, &amp;v2, &amp;w);</span><br><span class="line">        n = LocateVex(G, v1); <span class="comment">// 获取v1所对应的在vertex数组中的下标</span></span><br><span class="line">        m = LocateVex(G, v2); <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> || m == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO this vertex!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        G-&gt;AdjMatrix[n][m] = w;</span><br><span class="line">        G-&gt;AdjMatrix[m][n] = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(MGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n 邻接矩阵如下：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%d&quot;</span>, G.Vertex[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%d&quot;</span>, G.Vertex[i]);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G.AdjMatrix[i][j] == MaxInt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t∞&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t%d&quot;</span>, G.AdjMatrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">minimal</span><span class="params">(MGraph *G, ShortEdge *shortedge)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> min, loc;</span><br><span class="line"></span><br><span class="line">    min = MaxInt;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; shortedge[i].lowcost &amp;&amp; shortedge[i].lowcost != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min = shortedge[i].lowcost;</span><br><span class="line">            loc = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MiniSpanTree_Prim</span><span class="params">(MGraph *G, VertexType start)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    ShortEdge shortedge[VertexMax];</span><br><span class="line">    <span class="comment">// 处理初始点start</span></span><br><span class="line">    k = LocateVex(G, start);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        shortedge[i].adjvex = start;</span><br><span class="line">        shortedge[i].lowcost = G-&gt;AdjMatrix[k][i];</span><br><span class="line">    &#125;</span><br><span class="line">    shortedge[k].lowcost = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.处理后续结点</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;vexnum - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = minimal(G, shortedge);                                                      <span class="comment">// 找最短路径的顶点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;%d,%d\n&quot;</span>, shortedge[k].adjvex, G-&gt;Vertex[k], shortedge[k].lowcost); <span class="comment">// 输出找到的最短路径顶点及路径权值</span></span><br><span class="line">        shortedge[k].lowcost = <span class="number">0</span>;                                                       <span class="comment">// 将找到的最短路径顶点加入集合U中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G-&gt;vexnum; j++) <span class="comment">// U中加入了新节点，可能出现新的最短路径，故更新short edge数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G-&gt;AdjMatrix[k][j] &lt; shortedge[j].lowcost)</span><br><span class="line">            &#123; <span class="comment">// 有更短路径出现时，将其替换进short edge数组</span></span><br><span class="line">                shortedge[j].lowcost = G-&gt;AdjMatrix[k][j];</span><br><span class="line">                shortedge[j].adjvex = G-&gt;Vertex[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    VertexType start;</span><br><span class="line">    MGraph G;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;公司拟建一个局域网，连接6栋楼（0，1，2，3，4，5），根据楼栋的分布及楼宇间距离，设计出布线造价最小的局域网络图，并且总的布线费用最低。&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n利用Prim算法生成布线造价最小的局域网络如下：\n\n&quot;</span>);</span><br><span class="line">    CreateUDN(&amp;G);</span><br><span class="line">    print(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择一个初始顶点，以此构造最小生成树:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;start); <span class="comment">// 有空格</span></span><br><span class="line">    MiniSpanTree_Prim(&amp;G, start);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上一篇：<a href="https://likt11.github.io/2024/07/21/哈夫曼树/">哈夫曼树 | Likt’s Blog (likt11.github.io)</a></p>
<p>下一篇： <a href="https://likt11.github.io/2024/07/21/数据结构复习/">数据结构期末复习 | Likt’s Blog (likt11.github.io)</a></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>栈、队列及其应用</title>
    <url>/2024/07/21/%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="74a1d9e51f527e02a230a9ac8d11b243e4f3f67ecd3aa9007f5fe0833b55f3bd">2d2cf6304020b54bb66415a4ddd063459cd4fafaa407e53e5674e5333c327f87f5b7d22d86e1124c0f0f6241299f49e28bac191bbf896432de354b4993ab5a066ab00878da2fba5f9d2887d0e856a5e6daa29b03b9e9db64a2bf51d2165b671fe910f74e77dea4e8fc19d50d39a8aab4637697a15240beac1aab5c55f032f284931721029cc664db278a3c55591c362fcd9445e9ac07f554acde9e8fb53417e09f426b4ea80c68dce13f711328a670d1b68cb8060235e2925142b527322e8d77fd280f501de223fa2d97cdc4a9457e477c6857a000b4f7704c81a89466013ebb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>网络层基础总结</title>
    <url>/2024/05/17/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="4-1-网络层的几个重要概念"><a href="#4-1-网络层的几个重要概念" class="headerlink" title="4.1 网络层的几个重要概念"></a>4.1 网络层的几个重要概念</h2><h3 id="4-1-1-网络层提供的两种服务"><a href="#4-1-1-网络层提供的两种服务" class="headerlink" title="4.1.1.网络层提供的两种服务"></a>4.1.1.网络层提供的两种服务</h3><h4 id="虚电路服务VC——面向连接"><a href="#虚电路服务VC——面向连接" class="headerlink" title="虚电路服务VC——面向连接"></a>虚电路服务VC——面向连接</h4><p>双方沿着已建立的虚电路发送分组，这样的分组的首部不需要填写完整的目的主机地址，而只需要填写这条虚电路的编号，因而减少了分组的开销。</p>
<h4 id="数据报服务——无连接"><a href="#数据报服务——无连接" class="headerlink" title="数据报服务——无连接"></a>数据报服务——无连接</h4><p>数据报即分组</p>
<p>IP数据报和IP分组是同义词</p>
<p>网络在发送分组时不需要先建立联系，每个分组独立发送，与其前后的分组无关（不进行编号）</p>
<p>互联网的设计思路：网络层要设计的尽量简单，向其上层只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络层不提供服务质量的承诺。</p>
<p>主机进程之间的可靠通信，由主机中的运输层负责（包括差错处理，流量控制）</p>
<p><strong>两种服务的对比</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>对比方面</th>
<th>虚电路服务</th>
<th>数据报服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>思路</td>
<td>可靠通信应当由网络来保证</td>
<td>可靠通信由用户主机来保证</td>
</tr>
<tr>
<td>连接 的建立</td>
<td>必须有</td>
<td>不建立连接</td>
</tr>
<tr>
<td>终点地址</td>
<td>仅在建立连接阶段使用，每个分组使用短的虚电路号</td>
<td>每个分组都有终点的完整地址，即IP地址</td>
</tr>
<tr>
<td>分组的转发</td>
<td>同一条虚电路，即同一条路由</td>
<td>每个分组独立查找转发表进行转发</td>
</tr>
<tr>
<td>当节点出故障时</td>
<td>所有通过出故障的节点的虚电路均不能工作</td>
<td>出故障的节点可能丢失分组，一些路由可能变化</td>
</tr>
<tr>
<td>分组的顺序</td>
<td>总按顺序到达终点</td>
<td>到达终点顺序不一定按发送的顺序</td>
</tr>
<tr>
<td>端到端的差错处理和流量控制</td>
<td>可以由网络负责，也可以用户主机负责</td>
<td>用户主机负责</td>
</tr>
</tbody>
</table>
</div>
<h3 id="网络层的两个层面"><a href="#网络层的两个层面" class="headerlink" title="网络层的两个层面"></a>网络层的两个层面</h3><h4 id="一、数据层面"><a href="#一、数据层面" class="headerlink" title="一、数据层面"></a>一、数据层面</h4><p>转发源主机和目的主机之间所传送的数据（即分组像接力赛跑般在路由器之间(通过路由转发表）进行转发）</p>
<h4 id="二、控制层面"><a href="#二、控制层面" class="headerlink" title="二、控制层面"></a>二、控制层面</h4><p>传送路由信息，根据路由选择协议使用的算法彼此不断交换路由信息分组</p>
<h2 id="4-2网际协议IP"><a href="#4-2网际协议IP" class="headerlink" title="4.2网际协议IP"></a>4.2网际协议IP</h2><p>三个配套协议</p>
<p><strong>地址解析协议ARP</strong></p>
<p><strong>网际控制报文协议ICMP</strong></p>
<p><strong>网际组管理协议ICMP</strong></p>
<h3 id="4-2-1虚拟互连网络"><a href="#4-2-1虚拟互连网络" class="headerlink" title="4.2.1虚拟互连网络"></a>4.2.1虚拟互连网络</h3><p>即逻辑互连网络，因为，互连起来的各种物理网络的异构性是客观存在的。在网络层上看起来好像是一个统一的网络。</p>
<p>互联网可以由多种异构网络互连组成。</p>
<h5 id="介绍四种不同的中间设备"><a href="#介绍四种不同的中间设备" class="headerlink" title="介绍四种不同的中间设备"></a>介绍四种不同的中间设备</h5><ul>
<li>物理层使用的中间设备叫做转发器</li>
<li>数据链路层使用的中间设备叫做网桥或桥接器，交换机</li>
<li>网络层使用的中间设备叫做路由器</li>
<li>网络层以上使用的中间设备叫作网关</li>
</ul>
<p>直接交付、间接交付（需经过路由器）</p>
<h3 id="4-2-2-IP地址"><a href="#4-2-2-IP地址" class="headerlink" title="4.2.2 IP地址"></a>4.2.2 IP地址</h3><p>IP地址即：给连接到互联网上的每个主机（或路由器）的每个接口分配一个全世界范围内唯一的32位标识符（IPv4）。IP地址指明了连接到某个网络上的一个主机（或路由器）</p>
<p>点分十进制表示——（每八位）提高可读性</p>
<p><strong>网络号+主机号</strong></p>
<h4 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h4><div class="table-container">
<table>
<thead>
<tr>
<th>分类</th>
<th>IP</th>
<th>对应二进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>A:</td>
<td>1-126</td>
<td>0</td>
</tr>
<tr>
<td>B</td>
<td>128-191</td>
<td>10</td>
</tr>
<tr>
<td>C:</td>
<td>192-223</td>
<td>110</td>
</tr>
<tr>
<td>D:多播地址</td>
<td>224-</td>
<td>1110</td>
</tr>
<tr>
<td>E:保留使用</td>
<td></td>
<td>1111</td>
</tr>
<tr>
<td>广播地址</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>网络号全为0，的IP地址，表示本网络任意地址，</p>
<p>网络号127保留作为本地软件环回测试</p>
<h4 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h4><p>无分类域间路由选择</p>
<h5 id="网络前缀"><a href="#网络前缀" class="headerlink" title="网络前缀"></a>网络前缀</h5><p>IP地址=网络前缀n+主机号(32-n)</p>
<p>n可以是0-32间任意取值，不是固定的数</p>
<h5 id="地址块"><a href="#地址块" class="headerlink" title="地址块"></a>地址块</h5><p>CIDR把网络前缀都相同的所有连续的IP地址组成一个CIDR地址块，所包含的IP地址数目取决于网络前缀的位数</p>
<p>例如：128.14.35.7/20表示的地址范围：</p>
<p>128.14.35.7/20=<code>10000000 00001110 0010</code>0011 00000111</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>点分十进制</th>
<th>二进制表示</th>
</tr>
</thead>
<tbody>
<tr>
<td>最小地址</td>
<td>128.14.32.0</td>
<td><code>10000000 00001110 0010</code>0000 00000000</td>
</tr>
<tr>
<td>最大地址</td>
<td>128.14.47.0</td>
<td><code>10000000 00001110 0010</code>1111 00000111</td>
</tr>
</tbody>
</table>
</div>
<h5 id="地址掩码"><a href="#地址掩码" class="headerlink" title="地址掩码"></a>地址掩码</h5><p>CIDR的斜线记法，斜线后面的数字就是地址掩码中1的个数</p>
<p>将IP地址同掩码进行与运算可以得到其网络地址</p>
<p>关于与运算：1 AND 1=1,1 AND 0=0,0 AND 0=0,</p>
<h5 id="CIDR的三个特殊地址块"><a href="#CIDR的三个特殊地址块" class="headerlink" title="CIDR的三个特殊地址块"></a>CIDR的三个特殊地址块</h5><ul>
<li>前缀n=32，没有主机号，是一个特殊的IP地址，用于主机路由</li>
<li>n=31，该地址块只有两个IP地址，用于点对点链路</li>
<li>n=0，同时IP地址全是0，即0.0.0.0/0，用于默认路由</li>
</ul>
<p>CIDR地址块可以看成包含多个C类地址，故称CIDR编址为“构造超网”</p>
<p>路由聚合：一个大的地址块中往往包含多个小地址块，故在路由表中利用较大 的CIDR地址块来代替很多小的地址块，减少了查找转发表所需时间。</p>
<p>网络前缀越短的地址块包含的地址数就越多。</p>
<h4 id="IP地址的特点"><a href="#IP地址的特点" class="headerlink" title="IP地址的特点"></a>IP地址的特点</h4><ul>
<li>前缀+主机号</li>
<li>路由器根据目的主机连接的网络前缀来转发分组，缩短了查找转发表时间</li>
<li>多归属主机（标志一台主机或路由器和一条链路的接口）</li>
<li>一个网络是指 具有相同网络前缀的主机的集合，用转发器或交换机连接起来的若干个局域网仍为一个网络，</li>
<li>IP地址中，所有分配到网络前缀的网络都是平等的，同等对待每个IP地址。</li>
<li>路由器每个接口的网络前缀不同，路由器相连时，一段连线，/31地址块，点对点链路构成特殊网络，无编号网络（匿名网络）</li>
</ul>
<h3 id="4-2-3IP地址和Mac地址"><a href="#4-2-3IP地址和Mac地址" class="headerlink" title="4.2.3IP地址和Mac地址"></a>4.2.3IP地址和Mac地址</h3><p>Mac地址固化在网卡的ROM中，硬件地址、物理地址，是数据链路层使用的地址，48位</p>
<p>IP地址是网络层和以上各层使用的地址，逻辑地址，IPv4为32位</p>
<p>IP地址放在IP数据报的首部，Mac地址放在Mac地址的首部，当IP数据报插入到数据链路层的Mac帧后，整个IP数据报就成为Mac帧的数据。——封装</p>
<p>数据报传输过程中：</p>
<ul>
<li>IP数据报的源目的IP地址不变</li>
<li>在局域网的链路层，只能看见Mac帧，传输过程中，Mac帧的源目的地址会发生变化。</li>
<li>IP层抽象的互联网屏蔽了下层复杂细节，在网络层讨论问题，即使用统一抽象的IP地址研究主机路由器之间的通信。</li>
</ul>
<h3 id="4-2-4地址解析协议ARP"><a href="#4-2-4地址解析协议ARP" class="headerlink" title="4.2.4地址解析协议ARP"></a>4.2.4地址解析协议ARP</h3><p>实际网络的链路上传送数据帧时，最终必须使用链路层的Mac地址，  </p>
<p>主机的Mac地址实际就是其网络适配器的Mac地址，地址解析协议：通过在主机的ARP高速缓存表中存放一个从IP地址到Mac地址的映射表，且这个映射表时常更新（新增或超时删除），映射地址项目都设置有一定生存时间</p>
<p>每个主机都设有一个ARP高速缓存表，里面存有本局域网上个主机和路由器的IP地址和Mac地址的映射表                      </p>
<p>如果在主机A在缓存表中找不到主机B的Mac地址值，如何知道其Mac地址呢？——前提A,B处于同一局域网</p>
<ul>
<li>A在本局域网上广播发送一个ARP请求分组（格式：我的IP地址为，Mac地址是，我想知道IP地址为 的主机的Mac地址）</li>
<li>主机B收到arp请求，发现IP地址和arp请求分组中要查询的IP地址一致，于是收下arp请求分组，（会将A的IP和Mac对应关系写入arp高速缓存），并向A发送arp响应分组（响应分组中有自己的Mac地址）</li>
<li>A收到响应分组，将B的IP和Mac对应关系写入arp高速缓存。</li>
<li>广播请求——单播响应</li>
</ul>
<p>如果在主机A在缓存表中找不到主机B的Mac地址值，如何知道其Mac地址呢？——前提A,B不在同一局域网</p>
<ul>
<li>A在本网络中发送arp请求分组 查找同一网络上的一台路由器的Mac地址，然后接下来的转发有路由器来完成</li>
<li>arp的多次反复使用</li>
</ul>
<p>从IP地址到Mac地址的解析是自动进行的，主机的用户对这种地址解析过程不知道，只要主机和本网络一个已知IP地址的主机或路由器要进行通信，协议ARP会自动将IP地址解析为链路层所需的Mac地址，然后插入到Mac帧中。</p>
<h3 id="4-2-5IP数据报的格式"><a href="#4-2-5IP数据报的格式" class="headerlink" title="4.2.5IP数据报的格式"></a>4.2.5IP数据报的格式</h3><p>IP数据报==&gt;首部+数据部分</p>
<p>首部格式的宽度为32位，即4字节，首部==固定部分20字节+可变部分</p>
<h5 id="固定部分："><a href="#固定部分：" class="headerlink" title="固定部分："></a>固定部分：</h5><ul>
<li>版本：占4位，IPv4:0100        IPv6:0110</li>
<li>首部长度：占4位，首部字段的最小值是5（0101），</li>
<li>区分服务：占8位，</li>
<li>总长度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.489ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 6846.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3290.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4346.1,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2000,0)"></path></g></g></g></svg></mjx-container>指首部和数据之和的长度，单位为字节，总长度字段为16位，</li>
</ul>
<p>在IP层下面的每一种数据链路层协议都规定了一个数据帧中的数据字段的最大长度，称为最大传送单元MTU，如果过长，需要进行对数据报进行分片处理。</p>
<ul>
<li>标识：16位，相同标识字段 使分片后的各数据报片最后能正确重装为原来的数据报</li>
<li>标志：3位，<ul>
<li>MF=1表示后面还有分片，MF=0表示这是若干数据报片的最后一个</li>
<li>DF 表示不能分片，DF=0时才允许分片</li>
</ul>
</li>
<li>片偏移：占13位，分片后，某片在原分组中的相对位置，（片偏移以8个字节为偏移单位</li>
<li>生存时间TTL：占8位，数据报在网络中的寿命，每经过一个路由器就减一，当其减为0时，就丢弃这个数据报。</li>
<li>协议：8位，</li>
<li>首部校验和：16位，只检验数据报的首部，不包括数据部分</li>
</ul>
<h5 id="可变部分"><a href="#可变部分" class="headerlink" title="可变部分"></a>可变部分</h5><p>增加IP数据报的功能，增加了路由器处理数据报的开销</p>
<h2 id="4-3-IP层转发分组的过程"><a href="#4-3-IP层转发分组的过程" class="headerlink" title="4.3 IP层转发分组的过程"></a>4.3 IP层转发分组的过程</h2><h4 id="基于终点的转发"><a href="#基于终点的转发" class="headerlink" title="基于终点的转发"></a>基于终点的转发</h4><h4 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h4><p>前缀越长，地址块越小，路由越具体</p>
<p>主机路由：a.b.c.d/32 在转发表中都放在最前面，对网络的连接或转发表进行排错时，指明到某一台主机的特殊路由就十分有用</p>
<p>默认路由：0.0.0.0/0</p>
<p>转发表分组转发算法：（假定转发表按照前缀的长短排列，把前缀长的放前面）</p>
<ul>
<li>从分组中提取目标地址D</li>
<li>看是否有特定主机路由，否者从转发表下一行开始检查</li>
<li>将该行子网掩码同D进行按位与运算</li>
<li>匹配，则结束</li>
<li>若默认路由，……</li>
</ul>
<h2 id="4-4-网际控制报文协议ICMP"><a href="#4-4-网际控制报文协议ICMP" class="headerlink" title="4.4 网际控制报文协议ICMP"></a>4.4 网际控制报文协议ICMP</h2><p>ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告</p>
<p>ICMP数据报装在IP数据报中，作为其中的数据部分，是IP层的协议</p>
<h4 id="4-4-1ICMP报文的种类"><a href="#4-4-1ICMP报文的种类" class="headerlink" title="4.4.1ICMP报文的种类"></a>4.4.1ICMP报文的种类</h4><ul>
<li>ICMP差错报告报文</li>
<li>ICMP询问报文</li>
</ul>
<p>前四字节是统一格式：共有三个字段，类型、代码、校验和、而后四个字节内容同ICMP类型有关，最后是数据字段，长度取决于ICMP的类型</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>ICMP报文种类</th>
<th>类型的值</th>
<th>ICMP报文的类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>差错报告报文</td>
<td>3</td>
<td>终点不可达</td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>时间超时（如果当生存时间为0时，没有收到一个数据报的全部数据报片，将丢弃所有的已收到的数据报片，并向源点发送时间超时报文</td>
</tr>
<tr>
<td></td>
<td>12</td>
<td>参数问题</td>
</tr>
<tr>
<td></td>
<td>5</td>
<td>改变路由redirect</td>
</tr>
<tr>
<td>询问报文</td>
<td>8或0</td>
<td>回送echo请求或回送回答（向特定主机发出询问，收到此报文的主机必须回送回答报文）</td>
</tr>
<tr>
<td></td>
<td>13或14</td>
<td>时间戳请求或时间戳回答（时间戳：报文的发送和接收时间，计算往返时间</td>
</tr>
</tbody>
</table>
</div>
<p>不应发送ICMP差错报告报文的几种情况：</p>
<ul>
<li>对ICMP差错报告报文，不再发送ICMP差错报告报文</li>
<li>对第一个分片的数据报片的所有后续数据报片，都不发送ICMP差错报告报文</li>
<li>对具有多播地址的数据报，不发送ICMP差错报告报文</li>
<li>对具有特殊地址的数据报127.0.0.0或0.0.0.0，不发送ICMP差错报告报文</li>
</ul>
<h3 id="4-4-2-ICMP的应用举例"><a href="#4-4-2-ICMP的应用举例" class="headerlink" title="4.4.2 ICMP的应用举例"></a>4.4.2 ICMP的应用举例</h3><h4 id="ping（分组网间探测"><a href="#ping（分组网间探测" class="headerlink" title="ping（分组网间探测"></a>ping（分组网间探测</h4><p>用来测试两台主机之间连通性，使用了ICMP回送请求和回送回答报文，是应用层直接使用网络层ICMP的一个例子，没有通过传输层的tcp或udp</p>
<p>ping 127.0.0.1</p>
<h4 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h4><p>traceroute从源主机向目的主机发送一系列IP数据报，数据报中封装的是无法交付的udp用户数据报，第一个数据报TTL=1，第二个TTL=2，……，（每个TTL值，源主机会发送三次（当TTL=0时，发送ICMP时间超过差错报告报文</p>
<h4 id="攻击：伪装成目标主机，导致网络中大量主机向目标主机发送"><a href="#攻击：伪装成目标主机，导致网络中大量主机向目标主机发送" class="headerlink" title="攻击：伪装成目标主机，导致网络中大量主机向目标主机发送"></a>攻击：伪装成目标主机，导致网络中大量主机向目标主机发送</h4><ul>
<li>死亡之ping</li>
<li>ping -t -l 65550（缓冲区溢出</li>
<li>smurf攻击</li>
<li>重定向攻击</li>
</ul>
<h2 id="4-5-IPv6"><a href="#4-5-IPv6" class="headerlink" title="4.5 IPv6"></a>4.5 IPv6</h2><p>将协议数据单元PDU称为分组，而不是IPv4中的数据报。</p>
<p>变化：</p>
<ul>
<li>更大地址空间，128位</li>
<li>扩展的地址层次结构</li>
<li>灵活的首部格式（可选的扩展首部</li>
<li>改进的选项（允许数据报包含有选项的控制信息，IPv6的首部长度固定，其选项放在有效载荷中</li>
<li>允许协议继续扩充</li>
<li>支持即插即用（不需要DHCP</li>
<li>支持资源的预分配</li>
<li>IPv6首部改为8字节对齐（首部长度必须为8字节的整数倍（原来IPv4 是4字节对齐</li>
</ul>
<p>IPv6数据报==基本首部+有效载荷（亦称净负荷，有效载荷允许零个或多个扩展首部，再后面是数据部分</p>
<ul>
<li>取消了校验和字段，加快了路由器处理数据报的速度，在数据链路层对检测出有差错的帧就丢弃，运输层，当使用udp时，若检测出有差错的用户数据报就丢弃，当使用tcp时，对检测出有差错的报文段就重传，直到正确的传送到目的进程为止，因此在网络层的差错检测可以精简掉。</li>
<li>有效载荷长度</li>
<li>下一个首部：<ul>
<li>如果IPv6没有拓展首部，其作用和IPv4的协议字段一样，指出了基本首部后面的数据应交付IP层上面的哪个高层协议</li>
<li>出现拓展首部时，下一个首部字段 表示后面第一个扩展首部的类型，以此类推下一个首部</li>
</ul>
</li>
<li>跳数限制：hop limit</li>
</ul>
<h4 id="从IPv4向IPv6过渡"><a href="#从IPv4向IPv6过渡" class="headerlink" title="从IPv4向IPv6过渡"></a>从IPv4向IPv6过渡</h4><ul>
<li>双协议栈<ul>
<li>IPv6/IPv4</li>
<li>同时装有IPv4和IPv6两种协议栈</li>
</ul>
</li>
<li>隧道技术<ul>
<li>将IPv6数据报封装成为 IPv4数据报，即IPv6数据报变成了IPv4数据报的数据部分，最后再取出</li>
<li>必须将IPv4首部的协议字段的值设置为41（表示数据报的数据部分 是IPv6数据报</li>
</ul>
</li>
</ul>
<h4 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h4><p>利用报文来报告差错，获取信息，探测邻站或管理多播通信</p>
<p>ARP和IGMP的功能都已被合并到ICMPv6中</p>
<ul>
<li>差错报文</li>
<li>信息报文</li>
<li>邻站发现报文（ND协议</li>
<li>组成员关系报文（MLD协议</li>
</ul>
<h2 id="4-6-互联网的路由选择协议"><a href="#4-6-互联网的路由选择协议" class="headerlink" title="4.6 互联网的路由选择协议"></a>4.6 互联网的路由选择协议</h2><h3 id="4-6-1-路由协议算法的几个概念"><a href="#4-6-1-路由协议算法的几个概念" class="headerlink" title="4.6.1 路由协议算法的几个概念"></a>4.6.1 路由协议算法的几个概念</h3><h4 id="理想的路由算法："><a href="#理想的路由算法：" class="headerlink" title="理想的路由算法："></a>理想的路由算法：</h4><ul>
<li>算法必须完整且正确</li>
<li>在计算上简单</li>
<li>能适应通信量和网络拓扑的变化——稳健性</li>
<li>稳定性，应收敛于一个可以接受的值</li>
<li>公平性（对于除优先级高的用户</li>
<li>最佳的（特定要求下较为合理的选择</li>
</ul>
<p><strong>静态路由选择策略——非自适应路由选择：简单，开销小，不能即使适应网络状态的变化，需要人工配置每一条路由，适用于简单的网络</strong></p>
<p><strong>动态路由选择策略——自适应路由选择：实现比较复杂，能够适应网络的变化，开销大，适用于比较复杂的大网络</strong></p>
<h4 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h4><p>自治系统AS：每一个AS对于其他AS表现出的是一个单一的和一致的路由选择策略。</p>
<p>内部网关协议IGP：RIP,OSPF,IS-IS</p>
<p>外部网关协议EGP：BGP-4（边界网关协议</p>
<p>自治系统之间的路由选择叫做 域间路由选择，而在自治系统内部的路由选择叫做域内路由选择。</p>
<h3 id="4-6-2-内部网关协议RIP"><a href="#4-6-2-内部网关协议RIP" class="headerlink" title="4.6.2 内部网关协议RIP"></a>4.6.2 内部网关协议RIP</h3><p>RIP是一种分布式的基于距离向量的路由选择协议，最大的特点就是简单。</p>
<p>从路由器到直接连接的网络的距离定义为1，从一主机到非直接连接的网络的距离定义为所经过的路由器数加1，RIP协议的距离也称为“跳数”，RIP允许一条路径最多只能包含15个网络，因此距离等于16时相当于不可达。RIP只适用于小型互联网。RIP选择一条具有最少网络数的路由（即最短路由）</p>
<p>RIP协议的特点：</p>
<ul>
<li>仅和相邻路由器交换信息</li>
<li>路由器交换的信息时当前路由器所知道的全部信息，即自己现在的路由表</li>
<li>按固定的时间间隔交换路由信息，每隔30秒（主机也运行RIP，但是只是被动的接受从路由器发来的路由信息</li>
<li>RIP可以收敛，且较快，“收敛”即在自治系统中所有的节点都得到正确的路由选择信息的过程。</li>
<li>路由表更新的原则时找到到达每个网络的最短距离——距离矢量算法</li>
</ul>
<h4 id="距离矢量算法："><a href="#距离矢量算法：" class="headerlink" title="距离矢量算法："></a>距离矢量算法：</h4><p>路由表信息如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目的网络</th>
<th>距离</th>
<th>下一跳路由器</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>三种更新路由情况：</p>
<ul>
<li>收到新的信息（即到达新的网络的路由信息</li>
<li>更短的路由信息</li>
<li>上层网络发生变化导致路由发生变化，无论远近必须更新。</li>
</ul>
<p>三种定时器：</p>
<ul>
<li>更新定时器 30秒</li>
<li>路由失效  180秒</li>
<li>清除路由条目  240秒</li>
</ul>
<p>协议RIP让一个自治系统中的所有路由器都和自己的相邻路由器定期交换路由信息，并不断更新路由表，使得每个路由器到每一个网络的路由都是最近的</p>
<p>RIP报文作为运输层用户数据报UDP的数据部分进行传送（使用UDP的端口520.)RIP报文由首部和路由部分组成，在路由部分要填入自治系统号ASN</p>
<p>坏消息传得慢：当网络故障时，可能需要很长时间才能将此信息传到所有路由器——路由环路问题</p>
<p>例如：某个网络发生故障无法抵达，需要很长时间才能传到所有路由器</p>
<p>解决路由环路问题：</p>
<ul>
<li>定义最大值</li>
<li>水平分割（即从某个路由器传来的路由信息 不能再传回去到该路由器（记住来源，不反向传播</li>
<li>毒性反转（将条数置为16</li>
<li>触发更新（不异30秒周期更新，一发生变化马上更新</li>
<li>HOLD DOWN计时器</li>
</ul>
<h3 id="4-6-3内部网关协议OSPF"><a href="#4-6-3内部网关协议OSPF" class="headerlink" title="4.6.3内部网关协议OSPF"></a>4.6.3内部网关协议OSPF</h3><p>开放最短路径优先OSPF</p>
<h4 id="协议OSPF的基本特点："><a href="#协议OSPF的基本特点：" class="headerlink" title="协议OSPF的基本特点："></a>协议OSPF的基本特点：</h4><ul>
<li>使用链路状态协议</li>
<li>向本自治系统中所有路由器发送信息（洪泛法</li>
<li>发送的信息是于本路由器相邻的所有路由器的<strong>链路状态</strong>（说明本路由器和哪些路由器相连，及该链路的“度量”—-<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="21.657ex" height="3.431ex" role="img" focusable="false" viewBox="0 -1004.9 9572.2 1516.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mo" transform="translate(2277.8,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(1556,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mfrac" transform="translate(4889.6,0)"><g data-mml-node="msup" transform="translate(1833.4,394) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">链</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">路</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">宽</text></g></g><rect width="4442.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></li>
<li>当链路状态发生变化或每隔一段时间（如30分钟），路由器向所有路由器用洪泛法发送链路状态信息</li>
</ul>
<p>链路状态数据库——实际上就是全网的网络拓扑结构图，在全网范围内是一致的（这称为链路状态数据库的同步）</p>
<p>OSPF的更新过程收敛快</p>
<p>OSPF将自治系统再划分为多个小区域，每个区域有32位的区域标识符（一个区域内的路由器不能超过二十个</p>
<p>OSPF使用层次结构的区域划分，上层的区域叫做主干区域（0.0.0.0：用来连通下层区域</p>
<p>区域边界路由器，主干路由器，自治系统边界路由器</p>
<h4 id="OSPF的五种分组类型"><a href="#OSPF的五种分组类型" class="headerlink" title="OSPF的五种分组类型"></a>OSPF的五种分组类型</h4><ol>
<li>问候分组 hello：用来发现和维持邻站的可达性（每隔10秒交换问候分组40秒没收到对方的问候分组，即认为该相邻路由器不可达</li>
<li>数据库描述分组 DD：给出自己的链路状态数据库中所有链路状态项目的摘要信息</li>
<li>链路状态请求分组LSR:向对方请求发送某些链路状态项目的详细信息</li>
<li>链路状态更新分组LSU:用洪泛法对全网更新链路状态</li>
<li>链路状态确认分组LSAck：对链路更新分组的确认</li>
</ol>
<p>2345分组都是为了实现链路状态数据库的同步：不同路由器的链路状态数据库中的内容是一样的，两个同步的路由器叫做“完全邻接的”</p>
<p>OSPF分组是作为IP数据报的数据部分来传送，（IP数据报首部的协议字段是89）OSPF构成的数据报很短，好处是不用分片，不会引起分片丢失导致的重传。</p>
<p>OSPF使用可靠的洪泛法向全网更新链路状态：收到更新分组后要发送确认（收到重复的更新分组只需确认一次）</p>
<p>指定路由器DR和备用指定路由器BDR:所有路由器只与DR进行链路状态交换构成同步————最终结果就是所有路由器达到同步</p>
<h3 id="4-6-4外部网关协议BGP"><a href="#4-6-4外部网关协议BGP" class="headerlink" title="4.6.4外部网关协议BGP"></a>4.6.4外部网关协议BGP</h3><p><code>pass</code></p>
<h3 id="4-9因特网的层次路由"><a href="#4-9因特网的层次路由" class="headerlink" title="4.9因特网的层次路由"></a>4.9因特网的层次路由</h3><h3 id="广播路由"><a href="#广播路由" class="headerlink" title="广播路由"></a>广播路由</h3><p>全网广播</p>
<p>受控制的洪泛：序号控制，记住转发过的最大编号，如果收到小于最大编号的数据报，因为已经广播过了，故采取丢弃。</p>
<h3 id="4-7组播路由——IP多播"><a href="#4-7组播路由——IP多播" class="headerlink" title="4.7组播路由——IP多播"></a>4.7组播路由——IP多播</h3><p>给一部分的主机发送</p>
<p>组播地址：224.0.0.0/24到239.255.255.255</p>
<p>用一个D类地址来标志一个多播组，故D类地址可以标志<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>个多播组，多播数据报也是尽最大的努力交付，不能保证交付给多播组内的所有成员，多播数据报首部的协议字段是2，表明使用网际组管理协议IGMP</p>
<p>多播地址只能用于目的地址，不能用于源地址，此外对多播数据报 不产生ICMP差错报文，即”ping 多播地址 “永远得不到回应。</p>
<p>需要确定组成员，识别分组，组播树，使用IGMP来识别组，</p>
<p>更多见P179-P182</p>
<h2 id="4-8-虚拟专用网VPN和网络地址转换NAT"><a href="#4-8-虚拟专用网VPN和网络地址转换NAT" class="headerlink" title="4.8 虚拟专用网VPN和网络地址转换NAT"></a>4.8 虚拟专用网VPN和网络地址转换NAT</h2><p>专用地址，全局地址，</p>
<p>在互联网中的所有路由器，对目的地址的专用地址的数据报一律不进行转发。</p>
<p>私有地址块：</p>
<p>A:10.0.0.0/8该地址块相当于原来的一个A类网络，即从 10.0.0.0—-10.255.255.255</p>
<p>B:172.16.0.0/12该地址块相当于原来的16个连续的B类网络，即从172.16.0.0—-172.31.255.255</p>
<p>C:192.168.0.0/16该地址块相当于256给连续的C类网络，即从192.168.0.0—-192.168.255.255</p>
<h3 id="4-8-1虚拟专用网VPN"><a href="#4-8-1虚拟专用网VPN" class="headerlink" title="4.8.1虚拟专用网VPN"></a>4.8.1虚拟专用网VPN</h3><p>VPN是在效果上和真正的专用网一样。</p>
<p>利用IP隧道技术实现虚拟专用网：</p>
<ul>
<li>要求每个场所至少有一个路由器具有合法的全球IP地址，</li>
<li>对内部数据报进行加密（保证内部数据报的安全）重新加上数据报的首部，封装称为在互联网上发送的外部数据报，源和目的地址分别是两个路由器的公有地址，收到数据报后取出其中的数据部分，解密，恢复出内部数据报，交付给主机。</li>
<li>内联VPN（内部网络），外联VPN（需要外部机构加入）</li>
</ul>
<p>远程接入VPN：公司员工出差，远程工作的员工通过拨号接入互联网，驻留在员工个人电脑中的VPN软件可以在个人电脑和共公司主机之间建立VPN隧道。且通信内容也是保密的。</p>
<h3 id="4-8-2网络地址转换NAT"><a href="#4-8-2网络地址转换NAT" class="headerlink" title="4.8.2网络地址转换NAT"></a>4.8.2网络地址转换NAT</h3><p>NAT路由器，至少要有一个外部全球IP地址</p>
<ul>
<li>NAT转换表，将专有网中的IP地址和全球IP地址对应——缺陷</li>
<li>其通信只能由专用网内的主机发起，故专用网内部的主机不能直接充当服务器。</li>
<li>使用端口号的NAT—-网络地址于端口号转换NAPT</li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>网络层</tag>
        <tag>IP协议</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>路由交换技术实验</title>
    <url>/2024/07/17/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>第一章  计算机网络基础</p>
<p>第二章  校园网项目设计与子项目分解</p>
<p>第三章  思科网络设备与操作系统</p>
<h2 id="二、路由器——路由协议"><a href="#二、路由器——路由协议" class="headerlink" title="二、路由器——路由协议"></a>二、路由器——路由协议</h2><p>第四章  路由选择原理与静态路由协议——静态路由</p>
<p>第五章  路由信息协议与配置方法——RIP</p>
<p>第六章  增强型内部网关路由协议与配置方法——EIGRP</p>
<p>第七章  开放式最短路径优先协议与配置方法——OSPF</p>
<h2 id="三、交换机"><a href="#三、交换机" class="headerlink" title="三、交换机"></a>三、交换机</h2><p>第八章  交换技术与交换机配置方法</p>
<p>第九章 VLAN、Trunk、VTP协议与配置方法</p>
<p>第十章 VLAN间路由与配置方法</p>
<h2 id="四、网络——访问控制、地址转换"><a href="#四、网络——访问控制、地址转换" class="headerlink" title="四、网络——访问控制、地址转换"></a>四、网络——访问控制、地址转换</h2><p>第十一章  访问控制列表与配置方法</p>
<p>第十二章  网络地址转换与配置方法</p>
<h2 id="重点实验复习"><a href="#重点实验复习" class="headerlink" title="重点实验复习"></a>重点实验复习</h2><h4 id="IOS基础命令"><a href="#IOS基础命令" class="headerlink" title="IOS基础命令"></a>IOS基础命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no ip domain lookup		关闭DNS查询，或者一旦进入查询使用快捷键：CTRL+shift+6</span><br><span class="line">line console 0		进入主控制线路模式</span><br><span class="line">logging synchronous		关闭日志消息</span><br><span class="line">exec-time 0 0  设置为永不超时</span><br></pre></td></tr></table></figure>
<p>接口：serial串行接口、快速以太网接口f/g、逻辑接口环回接口loopback,lo—默认开启</p>
<p>description命令对接口设置描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int f0/0</span><br><span class="line">description connect to router2</span><br></pre></td></tr></table></figure>
<p>show命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show interface或后面直接跟上具体的接口号</span><br><span class="line">show controllers serial查看特定接口的硬件信息</span><br><span class="line">show clock</span><br><span class="line">show hosts</span><br><span class="line">show history</span><br><span class="line">show flash查看</span><br><span class="line">show version</span><br><span class="line">show arp</span><br><span class="line">show protocol</span><br><span class="line">show ip int brief</span><br><span class="line">show ip route</span><br><span class="line">show startup-configuration查看存储在非易失性存储器的配置文件</span><br><span class="line">show running-configuration查看存储在内存中的当前配置文件</span><br></pre></td></tr></table></figure>
<p>连通性测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 2.2.2.2</span><br><span class="line">ping 2.2.2.2 source 1.1.1.1</span><br><span class="line">traceroute 2.2.2.2</span><br></pre></td></tr></table></figure>
<h4 id="思科发现协议CDP"><a href="#思科发现协议CDP" class="headerlink" title="思科发现协议CDP"></a>思科发现协议CDP</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show cdp</span><br><span class="line">show cdp nei</span><br><span class="line">show cdp neighbors detail</span><br></pre></td></tr></table></figure>
<p>禁用cdp服务</p>
<ol>
<li><p>全局禁用cdp</p>
<p>no cdp run</p>
</li>
<li><p>接口禁用</p>
<p>cdp run   重新启用CDP服务</p>
<p>int s0/0/1</p>
<p>no cdp enable  该接口禁用CDP</p>
<p>exit</p>
</li>
</ol>
<h4 id="路由器配置默认网关"><a href="#路由器配置默认网关" class="headerlink" title="路由器配置默认网关"></a>路由器配置默认网关</h4><p>为了便于测试，经常使用路由器充当临时端系统（主机），需要为其配置默认网关。</p>
<p>首先关闭其路由功能，使其暂时失去路由能力，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no ip routing关闭路由功能</span><br><span class="line">int f0/0</span><br><span class="line">ip add 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">exit</span><br><span class="line">ip default-gateway 192.168.1.254 设置默认网关</span><br><span class="line">show ip route可以查看到网关信息</span><br></pre></td></tr></table></figure>
<h3 id="路由选择原理"><a href="#路由选择原理" class="headerlink" title="路由选择原理"></a>路由选择原理</h3><p>路由器的主要功能：路由选择和数据转发</p>
<p>选择路由的原则：①子网掩码最长②管理距离最小优先（ARP 120,EIGRP 90,OSPF 110）③度量值最小优先原则（带宽越大、度量值越小）</p>
<p>拆包、查表、重装、转发</p>
<p>管理距离AD用来衡量<strong>路由选择信息的可信度和路由协议的可靠性</strong>：数值越小，AD越小，可信度越高。直连路由0，静态路由1</p>
<p>度量值用来衡量同意路由协议下路径的可信度。跳计数、带宽、延时、可靠性。（rip是跳数，ospf是cost即带宽，</p>
<p>动态路由协议可以分为三类如下：</p>
<p>①距离矢量路由协议：RIP,IGRP</p>
<p>②链路状态路由协议：OSPF</p>
<p>③混合型协议：EIGRP</p>
<p>有类路由协议：路由更新广播中不携带相关网络的子网掩码信息，在网络边界按标准的网络类别ABC发生自动汇总,如:RIP v1，IGRP</p>
<p>无类路由协议：更新广播中携带相关网络的子网掩码信息还支持VLSM信息，如：RIP v2，EIGRP，OSPF</p>
<h3 id="静态路由协议"><a href="#静态路由协议" class="headerlink" title="静态路由协议"></a>静态路由协议</h3><p>配置语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route 192.168.12.0 255.255.255.0 192.168.1.2	下一跳地址</span><br><span class="line">ip route 192.168.12.0 255.255.255.0 s0/0/1 本路由器出站地址</span><br></pre></td></tr></table></figure>
<p>配置静态路由时，如果路由器接口为：以太网环境即以太网接口 时，配置下一跳地址为优选；</p>
<p>如果在串行链路环境即串行接口 时，配置本地出接口，更高效。</p>
<h3 id="默认路由协议"><a href="#默认路由协议" class="headerlink" title="默认路由协议"></a>默认路由协议</h3><p>Stub网络，末端网络，末梢网络，仅有一台边界路由器连接到外面的其他子网，或者仅有一个通路连接到其他网络。在stub网络中，一般使用使用一条默认路由指向外网。</p>
<p>默认路由是特殊的静态路由，保底用的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route 0.0.0.0 0.0.0.0 s0/0/1</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 192.168.1.2</span><br></pre></td></tr></table></figure>
<h3 id="浮动静态路由"><a href="#浮动静态路由" class="headerlink" title="浮动静态路由"></a>浮动静态路由</h3><p>特殊的静态路由，用于路由器到达目的子网有多个出口的环境，可以进行路由冗余以提高网络可靠性。</p>
<p>浮动静态路由通过配置一个比主路由的管理距离更大的静态路由，保证当网络拓扑结构或者链路状态发生变化导致主路由失效时，提供备份路由，从而实现链路的备份。当主路由存在的情况下，备份路由不会出现在路由表中。</p>
<p>即启用AD这个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route 192.168.1.0 255.255.255.0 172.16.3.1 10即该路由的管理距离AD为10</span><br></pre></td></tr></table></figure>
<h3 id="路由信息协议与配置方法"><a href="#路由信息协议与配置方法" class="headerlink" title="路由信息协议与配置方法"></a>路由信息协议与配置方法</h3><p>Routing Information Protocol  即 RIP 协议，是典型的距离矢量路由选择协议</p>
<p>15跳以内的中小型网络</p>
<p>使得v1，v2版本兼容的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip rip send version 1/2</span><br><span class="line">ip rip receive version 1/2</span><br></pre></td></tr></table></figure>
<p>RIP v1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router rip</span><br><span class="line">version 1</span><br><span class="line">network 网络地址[不携带子网掩码，不支持VLSM，默认ABC三类]如若是10.136.10.0/24，v1版本中其为A类地址声明如下</span><br><span class="line">network 10.0.0.0 </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>RIP v2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router rip</span><br><span class="line">version 2</span><br><span class="line">network 网络地址[携带子网掩码，支持VLSM]如若是10.136.10.0/24，v2版本中声明如下</span><br><span class="line">network 10.136.10.0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="RIP-v2认证方法：见教材P106"><a href="#RIP-v2认证方法：见教材P106" class="headerlink" title="RIP v2认证方法：见教材P106"></a>RIP v2认证方法：见教材P106</h4><h4 id="RIP汇总："><a href="#RIP汇总：" class="headerlink" title="RIP汇总："></a>RIP汇总：</h4><p>RIPv1默认自动汇总，不可以手动开启和关闭；RIP v2默认自动汇总但是可以手动开启和关闭，也可以配置手动汇总</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router rip</span><br><span class="line">no auto-summary</span><br><span class="line">int s0/0/1</span><br><span class="line">ip summary-address rip&#123;汇总IP 与 掩码&#125;</span><br><span class="line">手动汇总在接口模式下启用：</span><br><span class="line">int s0/0/0</span><br><span class="line">ip summary-address rip 4.4.0.0 255.255.252.0</span><br></pre></td></tr></table></figure>
<p>show ip protocols</p>
<p>debug ip rip</p>
<p>clear ip route *  清除各路由器上的路由表</p>
<p>timers basic 60 360 360 480  更改RIP路由协议定时器，默认是30，180，180，240</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router rip</span><br><span class="line">timers basic 60 360 360 480</span><br><span class="line">no timers basic恢复定时器默认值</span><br></pre></td></tr></table></figure>
<h3 id="增强型内部网关路由协议与配置方法"><a href="#增强型内部网关路由协议与配置方法" class="headerlink" title="增强型内部网关路由协议与配置方法"></a>增强型内部网关路由协议与配置方法</h3><p>EIGRP（enhanced interior gateway routing protocol）</p>
<p>具有距离矢量路由协议的特点，最大支持255跳路由，极大扩展了网络规模，还兼有链路状态路由协议的特点，可以迅速构建逻辑无环结构，实现快速收敛。</p>
<p>时间不够先总结一下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router eigrp [自治系统号]</span><br><span class="line">network [目标网络地址][通配符掩码]</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router eigrp 100</span><br><span class="line">network 192.168.1.0 0.0.0.255</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p><strong>复习的时候暂时只记录到这里……</strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>路由交换技术</category>
      </categories>
      <tags>
        <tag>路由交换技术</tag>
      </tags>
  </entry>
  <entry>
    <title>进程同步</title>
    <url>/2024/05/21/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="73254a1cd886dbafa91d04978d0c65431d0851f52127b9a913fb9272f3ce2824"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习记录</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>进程的描述与控制</title>
    <url>/2024/05/21/%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a981ace113d7f743763eeb38593fca5eb3a2668b019d3b3d3c291dc2ac2aa3f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习记录</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程描述与控制</tag>
      </tags>
  </entry>
  <entry>
    <title>锦集</title>
    <url>/2024/08/12/%E9%94%A6%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li>这个人真好，好到让我觉得这一生忽然就有了寄托和希望！想看她梦想成真，嫁得良人，长命百岁，万事顺遂！</li>
<li>不必祝她开花 不必教会她爱 她不必勇敢 不必慷概 不必乖 祝她鼎沸好了 祝她有留白 祝她把世俗的目光一栽再栽 祝她在人生海海 尽兴 开怀</li>
</ol>
]]></content>
      <categories>
        <category>在人间</category>
      </categories>
      <tags>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>风从青奥起，吹梦到巴黎</title>
    <url>/2024/07/28/%E9%A3%8E%E4%BB%8E%E9%9D%92%E5%A5%A5%E8%B5%B7%EF%BC%8C%E5%90%B9%E6%A2%A6%E5%88%B0%E5%B7%B4%E9%BB%8E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ef6cf92620b0d98e9f64881fd04af10e328ea932a240804069ab53f383924128"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>在人间</category>
      </categories>
  </entry>
  <entry>
    <title>顺序表以及线性链表的基本操作及实现</title>
    <url>/2024/07/21/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ol>
<li>掌握程序设计的基本方法，要求能够利用C语言实现简单的算法设计。</li>
<li>熟练掌握指针的应用。</li>
<li>熟练掌握线性表的基本运算在顺序存储结构和链式存储结构上的实现。</li>
<li>掌握顺序表以及线性链表的基本操作及实现。</li>
<li>能使用线性表来解决实际中遇到的问题。</li>
</ol>
<h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><h5 id="一-验证实验"><a href="#一-验证实验" class="headerlink" title="(一)验证实验"></a>(一)验证实验</h5><ol>
<li>定义顺序表类型。</li>
<li>基于 1 所设计的线性表数据结构，实现线性表的初始化、插入、删除、求表长、按值查找、按位置查找操作。</li>
<li>建立一个单链表，实现建立，插入，删除，查找操作。</li>
</ol>
<h5 id="二-设计实验"><a href="#二-设计实验" class="headerlink" title="(二)设计实验"></a>(二)设计实验</h5><ol>
<li>编写一个算法实现两个有序（从小到大）顺序表合并成为一个顺序表，合并后的结果放在第一个顺序表中，不另设新的顺序表存储（假设这两个有序顺序表中没有相同的元素）。</li>
<li>有一个已按递增次序排好序的线性表，输入一个数，要求按原来的排序规律将它插入到线性表中。</li>
<li>将两个有序链表合并成一个有序的单链表。要求结果链表仍使用原来两个链表的存储空间, 不另外占用其它的存储空间。</li>
<li>实现约瑟夫环算法，设有n个人坐在圆桌周围，从第s个人开始报数，报到m的人出列，然后再从下一个人开始报数，报到m 的人又出列，┅如此重复，直到所有的人都出列为止。要求按出列的先后顺序输出每个人的信息。</li>
</ol>
<h3 id="三、详细设计及运行结果"><a href="#三、详细设计及运行结果" class="headerlink" title="三、详细设计及运行结果"></a>三、详细设计及运行结果</h3><ol>
<li><p>设计实验一，合并顺序表，用结构体定义一个线性表SqList,定义函数void Merge_List()对两个有序顺序表进行合并，并不创建新的表（于是对于表A选择传入其地址，而表B只是传入表，并不传入地址）。该函数从顺序表的末尾对线性表数据进行排序。运行情况如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/image-20240721114134453.png" alt="image-20240721114134453"></p>
</li>
<li><p>设计实验二，在有序表中插入一个数据，并保持有序性。首先，需要判断该数据应当插入的位置，记为k，而后用循环，将第K个元素后面的全部向后移动一位，（从末尾开始移动)，再将要插入的值E插入到第K个位置。</p>
<p>运行结果如下: </p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/wps2.jpg" alt="img"></p>
</li>
<li><p>设计实验三，将两个有序链表合并成一个有序的单链表。要求结果链表仍使用原来两个链表的存储空间, 不另外占用其它的存储空间。定义链表，创建链表，打印链表中元素，将两个有序链表合并。在创建链表过程中，先是将创建的链表的头结点传入函数，在函数内部，定义一个新的指针，使用p指针来遍历链表，保持L指向头结点；再进行接下来的运算，此外，创建新节点时需要将 新节点的next指针赋值为NULL。运行结果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/Likt11/clouding/main/img/wps3.jpg" alt="img"></p>
<h3 id="四、调试情况，设计技巧及体会"><a href="#四、调试情况，设计技巧及体会" class="headerlink" title="四、调试情况，设计技巧及体会"></a>四、调试情况，设计技巧及体会</h3><p>主要在第三个程序中出现了大问题。已解决，应当重新创建一个指针用于遍历链表，保持L指向头结点。此外，新建节点之后，其next指针应当赋值为null。</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatLink</span><span class="params">(LinkList L, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList p = L; <span class="comment">// 使用p指针来遍历链表，保持L指向头结点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表的元素:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LinkList newNode = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        newNode-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 新节点的next指针赋值为NULL</span></span><br><span class="line">        p-&gt;next = newNode;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;newNode-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="五、源程序清单"><a href="#五、源程序清单" class="headerlink" title="五、源程序清单"></a>五、源程序清单</h3><ol>
<li>合并顺序表</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写一个算法实现两个有序（从小到大）顺序表合并成为一个顺序表，</span></span><br><span class="line"><span class="comment">// 合并后的结果放在第一个顺序表中，不另设新的顺序表存储（假设这两个有序顺序表中没有相同的元素）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//避免闪退</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="comment">//结构体定义线性表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> elems[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并两个顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge_List</span><span class="params">(SqList *La, SqList Lb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (La-&gt;length + Lb.length &gt; MAXSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:Exceeds max size of sequencn list\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k1 = La-&gt;length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k2 = Lb.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = La-&gt;length + Lb.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k1 &gt;= <span class="number">0</span> &amp;&amp; k2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (La-&gt;elems[k1] &gt;= Lb.elems[k2])</span><br><span class="line">        &#123;</span><br><span class="line">            La-&gt;elems[k] = La-&gt;elems[k1];</span><br><span class="line">            k1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            La-&gt;elems[k] = Lb.elems[k2];</span><br><span class="line">            k2--;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        La-&gt;elems[k] = Lb.elems[k2];</span><br><span class="line">        k2--;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    La-&gt;length += Lb.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SqList La = &#123;&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;, <span class="number">5</span>&#125;;</span><br><span class="line">    SqList Lb = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;, <span class="number">4</span>&#125;;</span><br><span class="line">    Merge_List(&amp;La, Lb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;合并后的顺序表：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; La.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, La.elems[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>); <span class="comment">// 避免闪退</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>插入一个数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//避免闪退</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> elem[Maxsize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert_List</span><span class="params">(SqList *L, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length + <span class="number">1</span> &gt; Maxsize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:Exceeds max size of sequencn list\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;elem[i] &gt;= n &amp;&amp; L-&gt;elem[i - <span class="number">1</span>] &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;elem[L-&gt;length - <span class="number">1</span>] &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            k = L-&gt;length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L-&gt;length; j &gt; k; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;elem[j] = L-&gt;elem[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;elem[k] = n;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SqList La = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>&#125;, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    Insert_List(&amp;La, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入后的顺序表为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; La.length; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, La.elem[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并两个有序链表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;           <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">// 指向自己类型的指针域</span></span><br><span class="line">&#125; LNode, *LinkList;     <span class="comment">// LinkList为LNode类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatLink</span><span class="params">(LinkList L, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList p = L;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表的元素:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LinkList newNode = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next = newNode;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;newNode-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表中元素。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList_L</span><span class="params">(LinkList L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeList_L</span><span class="params">(LinkList La, LinkList Lb)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList pa = La-&gt;next; <span class="comment">// 表La和表Lb,其中LA,LB都表示其头结点。</span></span><br><span class="line">    LinkList pb = Lb-&gt;next;</span><br><span class="line">    LinkList pc = La; <span class="comment">// 使用LA的头结点，作为合成后的头结点。</span></span><br><span class="line">    <span class="keyword">while</span> (pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pa-&gt;data &lt; pb-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pa-&gt;data &gt; pb-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">            LinkList temp = pb;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pc-&gt;next = pa ? pa : pb;</span><br><span class="line">    <span class="built_in">free</span>(Lb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList La, Lb;</span><br><span class="line">    La = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">// 生成一个LNode类型的头结点</span></span><br><span class="line">    La-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Lb = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    Lb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入第一个链表和第二个链表的长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    CreatLink(La, a);</span><br><span class="line">    CreatLink(Lb, b);</span><br><span class="line">    MergeList_L(La, Lb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;合并后的链表如下：&quot;</span>);</span><br><span class="line">    PrintList_L(La);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>上一篇： <a href="https://likt11.github.io/2024/07/21/函数的设计及调用/">函数的设计及调用 | Likt’s Blog (likt11.github.io)</a></strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构C语言版》期末复习</title>
    <url>/2024/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="1-1什么是数据结构"><a href="#1-1什么是数据结构" class="headerlink" title="1.1什么是数据结构"></a>1.1什么是数据结构</h3><p><strong>数据结构是一门研究非数值计算的程序设计问题中的计算机的操作对象以及他们之间的关系和操作等的学科。</strong></p>
<h3 id="1-2基本概念和术语"><a href="#1-2基本概念和术语" class="headerlink" title="1.2基本概念和术语"></a>1.2基本概念和术语</h3><p><strong>数据</strong>是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。</p>
<p><strong>数据元素</strong>是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。一个数据元素可有若干个数据项组成。数据项是数据的不可分割的最小单位。</p>
<p><strong>数据对象</strong>是性质相同的数据元素的集合，是数据的一个子集。</p>
<p><strong>数据结构</strong>是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<p><strong>结构</strong>：数据元素相互之间的关系</p>
<p><strong>四种基本结构：</strong></p>
<ul>
<li>集合：同属于一个集合</li>
<li>线性结构：结构中的数据元素之间存在一个对一个的关系。</li>
<li>树形结构：结构中的数据元素之间尽一个对多个的关系。</li>
<li>图状结构或网状结构：结构中的数据元素之间存在多个对多个的关系。</li>
</ul>
<p>因此<strong>数据结构的形式定义</strong>：是一个二元组，数据元素的有限集+数据元素关系的有限集。</p>
<p><strong>在计算机中称二进制位串为 元</strong>素或结点，当数据元素由若干数据项组成时，位串 中对应于各个数据项的子位串 称为数据域，因此元素或结点可看成是数据元素在计算机中的映像。</p>
<p><strong>数据元素之间的关系在计算机中有两种不同的表示方法</strong>：</p>
<ul>
<li>顺序映像：借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系         得到——》顺序存储结构</li>
<li>非顺序映像：借助指示元素存储地址的指针 表示元素之间的 逻辑关系    得到——》链式存储结构</li>
</ul>
<p><strong>数据类型</strong>：是一个值的集合和定义在这个值集上的一组操作的总称。可分为两类：①非结构的原子类型——不可分解，例如C语言中的基本类型。②结构类型——的值是由若干个成分按某种结构组成的，因此可以分解。</p>
<p>某种意义上，数据结构是“一组具有有相同结构的值“，则结构类型是”由一种数据结构和定义在其上的一组操作组成“。</p>
<p>抽象数据类型：ADT是指一个数学模型以及定义在改模型上的一组操作。抽象数据类型的定义进取决于它的一组逻辑特性，与其在计算机内部如何表示和实现无关。</p>
<p>原子类型</p>
<p>固定聚合类型</p>
<p>可变聚合类型：构成可变聚合类型的值 的成分的数目是不确定，</p>
<p>（后两种类型可统称为 结构类型）</p>
<p>操作类型三元组定义：</p>
<p>数据对象（定义了关系运算的某个集合），数据关系，基本操作</p>
<p>多形数据类型：是指其值的成分不确定的数据类型。（具有相同的数学抽象特性）</p>
<h3 id="1-3抽象数据类型的表现与实现"><a href="#1-3抽象数据类型的表现与实现" class="headerlink" title="1.3抽象数据类型的表现与实现"></a>1.3抽象数据类型的表现与实现</h3><p>对本书语言作简要说明：</p>
<ol>
<li>预定义常量和类型<ol>
<li>函数结果状态代码：true1，false0，OK1，error0，infeasible-1，overflow2；</li>
<li>status  是函数的类型，其值是函数结果状态代码：typedef int status</li>
</ol>
</li>
<li>数据结构的表示（存储结构）用类型定义（typedef）描述</li>
<li>基本操作的算法 形式：注意形参表中，以&amp;打头的参数即为引用参数</li>
<li>赋值语句有：简单赋值，串联赋值，成组赋值，交换赋值，条件赋值</li>
<li>选择语句有：if，else，Switch（case）</li>
<li>循环语句有：for，while，do-while</li>
<li>结束语句有：函数结束语句（return 表达式； return；）case结束语句：break；，异常结束语句：exit(异常代码);</li>
<li>输入输出语句：scanf，printf</li>
<li>注释</li>
<li>基本函数：max，min，abs()求绝对值，floor()求不足整数值，ceil()求进位整数值，eof()判定文件结束，eoln()判定行结束</li>
<li>逻辑运算约定：&amp;&amp;短路与，||短路或</li>
</ol>
<h3 id="1-4算法和算法分析"><a href="#1-4算法和算法分析" class="headerlink" title="1.4算法和算法分析"></a>1.4算法和算法分析</h3><p>算法：是对特定问题求解步骤的一个描述，它是指令的有限序列，其中每一条指令表示一个或多个操作。</p>
<p>五个重要特性：</p>
<ul>
<li>有穷性：有穷步，每一步有穷时间</li>
<li>确定性：每条指令有确切含义，任何条件下，算法只有唯一执行路径。</li>
<li>可行性：</li>
<li>输入</li>
<li>输出</li>
</ul>
<p>一个好的算法：</p>
<ul>
<li>正确性：4个层次</li>
<li>可读性：算法主要是为了阅读交流，其次是机器执行</li>
<li>健壮性：当输入数据非法时，算法也能适当做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>
<li>效率与低存储量需求</li>
</ul>
<p>效率算法的度量：</p>
<ul>
<li>事后统计</li>
<li>事前分析估算</li>
</ul>
<p>一个算法是由控制结构（顺序，分支，循环三种）和源操作（指固有数据类型的操作）构成，则算法时间 取决于两者的综合效果。</p>
<p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，算法的时间度量记作：</p>
<p>T(n)=O(f(n))</p>
<p>它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称时间复杂度。</p>
<p>语句的频度是指 该语句重复执行的次数。</p>
<p>时间复杂度 ：无特别指明，一般是指最坏情况下的时间复杂度。</p>
<p><strong>算法的存储空间需求：</strong></p>
<p>以 空间复杂度 作为算法所需要的存储空间的量度。</p>
<p>S(n)=O(f(n))</p>
<p>其中n为问题的规模（或大小），一个上机执行的程序除了需要存储空间来寄存本身所用指令、常量、变量和输入数据外，也需要对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间。</p>
<p>若额外空间相对于输入数据量来说是常数，则称次算法为 原地工作。此时，S(n)=O(1);</p>
<h3 id="本章习题"><a href="#本章习题" class="headerlink" title="本章习题"></a>本章习题</h3><p>1.在数据结构中，从逻辑上可以把数据结构分成（ C ）。</p>
<p>A．动态结构和静态结构   B．紧凑结构和非紧凑结构</p>
<p><strong>C．线性结构和非线性结构</strong>  D．内部结构和外部结构</p>
<p>4.以下说法正确的是（  D ）。</p>
<p>A．数据元素是数据的最小单位</p>
<p>B．数据项是数据的基本单位</p>
<p>C．数据结构是带有结构的各数据项的集合</p>
<p>D．一些表面上很不相同的数据可以有相同的逻辑结构</p>
<p> <strong>数据元素是数据的基本单位</strong>。    <strong>数据项是数据的不可分割的最小单位。</strong></p>
<p>6.以下数据结构中，（A）是非线性数据结构</p>
<p><strong>A．树</strong>     B．字符串    C．队      D．栈</p>
<p>5.以下与数据的存储结构无关的术语是（ C ）。</p>
<p>A．顺序队列    B. 链表    <strong>C. 有序表</strong>     D.  链栈</p>
<h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><p>线性结构的特点：在数据元素的非空有限集中，①存在唯一的一个被称作“第一个”的数据元素。②存在唯一一个别称作“最后一个”的数据元素。③④除第一个之外，集合中的每一个数据元素均只有一个前驱，只有一个后继</p>
<h3 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h3><p>线性表是最常用且最简单的一种数据结构。一个线性表 是N个数据元素的有限序列。稍微复杂的线性表中，一个数据元素可以由若干个数据项组成，在这种情况下，常把数据元素称为记录，含有大量记录的线性表又称文件。</p>
<p>同一线性表 中的元素必定有相同特性，即属 同一数据对象，相邻数据元素之间存在着序偶关系。</p>
<p>直接前驱元素，直接后继元素。</p>
<p>线性表中每个数据元素都有一个确定的位置，如a<sub>1</sub>是第一个数据元素，a<sub>i</sub>是第i个数据元素，因此i称为数据元素a<sub>i</sub>在线性表中的位序。</p>
<p>线性表是一个相当灵活的数据结构，对其数据元素可以进行访问，插入，删除等操作。</p>
<p>抽象数据类型线性表的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADT List&#123;</span><br><span class="line">	数据对象：</span><br><span class="line">	数据关系：</span><br><span class="line">	基本操作：</span><br><span class="line">		构造</span><br><span class="line">		销毁</span><br><span class="line">		置空</span><br><span class="line">		判空</span><br><span class="line">		取元素</span><br><span class="line">		定位元素</span><br><span class="line">		插入</span><br><span class="line">		删除</span><br><span class="line">		遍历</span><br><span class="line">		……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="例2-1：合并两个线性表"><a href="#例2-1：合并两个线性表" class="headerlink" title="例2-1：合并两个线性表"></a>例2-1：合并两个线性表</h5><p>算法思想：遍历LB，将所有在线性表B中，但不在线性表A中的数据元素插入到线性表A中。</p>
<h5 id="例2-2：-已知LA和LB中的数据元素按值非递减有序排列，现要求将LA和LB归并为一个新的线性表LC，且LC中的数据元素扔按值非递减有序排列"><a href="#例2-2：-已知LA和LB中的数据元素按值非递减有序排列，现要求将LA和LB归并为一个新的线性表LC，且LC中的数据元素扔按值非递减有序排列" class="headerlink" title="例2-2： 已知LA和LB中的数据元素按值非递减有序排列，现要求将LA和LB归并为一个新的线性表LC，且LC中的数据元素扔按值非递减有序排列"></a>例2-2： 已知LA和LB中的数据元素按值非递减有序排列，现要求将LA和LB归并为一个新的线性表LC，且LC中的数据元素扔按值非递减有序排列</h5><p>算法：设两个指针i和j分别指向LA和LB中的某个元素，显然指针i，j的初值均为1，假设i指向a,j指向b，插入c，则：c=a&gt;b?b:a;</p>
<p>当LA和LB中有一个线性表已经遍历结束，则对另外一个线性表的剩余元素采取插入到线性表LC中即可。</p>
<h3 id="2-2线性表的顺序表示和实现"><a href="#2-2线性表的顺序表示和实现" class="headerlink" title="2.2线性表的顺序表示和实现"></a>2.2线性表的顺序表示和实现</h3><p>线性表的线性表示是指 用一组地址连续的存储单元依次存储线性表的数据元素。</p>
<p>LOC(a1)是线性表的第一个数据元素a1的存储地址，通常称为线性表的起始位置或基地址。（每个元素需要占有L个存储单元）</p>
<p>线性表的这种机内表示称作线性表的顺序存储结构或顺序映像。通常称这种存储结构的线性表为顺序表。 （以元素在计算机内的“物理位置相邻”来表示线性表中数据元素之间的逻辑关系）<strong>故线性表的顺序存储结构是一种随机存取的存储结构。</strong></p>
<p>通常用数组来描述数据结构中的顺序存储结构，线性表长度可变，采用动态内存分配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">	ElemType *elem;//指示线性表的基地址</span><br><span class="line">	int length;//指示线性表的当前长度。</span><br><span class="line">	int listsize;//指示顺序表当前分配的存储空间大小，一旦插入元素而空间不足时，可进行再分配。</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line">L.elem=(ElemType*)malloc(LIST_INIT_SIZE*sizeof(ElemType));</span><br><span class="line">L.length=0;//空表长度为0</span><br><span class="line">L.listsize=LIST_INIT_SIZE;//初始存储空间。</span><br></pre></td></tr></table></figure>
<h5 id="算法2-3：在线性表的第i-1个数据元素和第i个数据元素之间插入一个新的数据元素"><a href="#算法2-3：在线性表的第i-1个数据元素和第i个数据元素之间插入一个新的数据元素" class="headerlink" title="算法2.3：在线性表的第i-1个数据元素和第i个数据元素之间插入一个新的数据元素"></a>算法2.3：在线性表的第i-1个数据元素和第i个数据元素之间插入一个新的数据元素</h5><p>算法：在第i(1≤i≤n)个元素之间插入一个元素时，需将第n至第i(共n-i+1)个元素向后移动一个位置。</p>
<p>①要判断插入的位置i是否合理，</p>
<p>②要判断存储空间是否已满，若满则进行增加分配<code>(ElemType*)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType));</code></p>
<p>③将插入位置及之后的元素后移。</p>
<h5 id="算法2-4线性表的删除操作"><a href="#算法2-4线性表的删除操作" class="headerlink" title="算法2.4线性表的删除操作"></a>算法2.4线性表的删除操作</h5><p>算法：删除第i(1≤i≤n)个元素时需将从第i+1至第n(共n-i)个元素依次向前移动一个位置。</p>
<p>①要判断需删除的位置i是否合法，若合法，则返回其值，<code>p=&amp;(L.elem[i-1])</code></p>
<p>;<code>e=*p;</code>;<code>q=L.elem+L.length-1</code>其中：p为被删除元素的位置，将被删除元素的值赋给e，用q表示表尾元素的位置。②而后可对被删除元素之后的元素左移。</p>
<h5 id="算法2-5-在顺序存储结构的线性表中插入或删除一个数据元素，平均移动表中一半元素，若表长为n，则4-3算法的时间复杂度均为O-n"><a href="#算法2-5-在顺序存储结构的线性表中插入或删除一个数据元素，平均移动表中一半元素，若表长为n，则4-3算法的时间复杂度均为O-n" class="headerlink" title="算法2.5 在顺序存储结构的线性表中插入或删除一个数据元素，平均移动表中一半元素，若表长为n，则4,3算法的时间复杂度均为O(n)"></a>算法2.5 在顺序存储结构的线性表中插入或删除一个数据元素，平均移动表中一半元素，若表长为n，则4,3算法的时间复杂度均为O(n)</h5><h5 id="算法2-6-顺序表的合并"><a href="#算法2-6-顺序表的合并" class="headerlink" title="算法2.6 顺序表的合并"></a>算法2.6 顺序表的合并</h5><h5 id="算法2-7-元素赋值，时间复杂度为O-La-length-Lb-length"><a href="#算法2-7-元素赋值，时间复杂度为O-La-length-Lb-length" class="headerlink" title="算法2.7  元素赋值，时间复杂度为O(La.length+Lb.length)"></a>算法2.7  元素赋值，时间复杂度为O(La.length+Lb.length)</h5><h3 id="2-3-线性表的链式表示和实现"><a href="#2-3-线性表的链式表示和实现" class="headerlink" title="2.3 线性表的链式表示和实现"></a>2.3 线性表的链式表示和实现</h3><p>链式存储结构 不要求逻辑上相邻的元素在物理位置上也相邻，因此它没有顺序存储结构所具有的弱点，但同时也失去了顺序表可随机存取的优点。</p>
<h4 id="2-3-1线性链表"><a href="#2-3-1线性链表" class="headerlink" title="2.3.1线性链表"></a>2.3.1线性链表</h4><p><strong>线性表的链式存储结构的特点</strong>是用一组任意的存储单元存储线性表的数据元素（这组存储单元可以是连续的，也可以是不连续的）。</p>
<p>因此对于数据元素ai来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置）。这两部分信息组成数据元素ai的存储映像，称为<strong>结点</strong>。它包括两个域：其中存储数据元素信息的域称为 <strong>数据域</strong>；存储直接后继存储位置的域称为<strong>指针域</strong>。指针域中存储的信息称作指针或链。n个结点链接成一个链表，即为线性表的<strong>链式存储结构</strong>。</p>
<p>头指针 指示链表中第一个结点（即第一个数据元素的存储映像）的存储位置。</p>
<p>逻辑上相邻的数据元素并不要求其物理位置紧邻，由此，这种存储结构为<strong>非顺序映像或链式映像</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//线性表的单链表存储结构</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line">//在单链表的第一个结点之前附设一个结点，称之为头结点。头结点的数据域可以不存储任何信息，也可存储线性表的长度类的信息。头结点的指针域存储指向第一个结点的指针（即第一个元素结点的存储位置）</span><br><span class="line">//此时，单链表的头指针指向头结点。</span><br><span class="line">//若线性表为空表，则头结点的指针域为空，</span><br></pre></td></tr></table></figure>
<p>在单链表中，取得第i个数据元素必须从头指针出发寻找，因此，单链表是 ：非随机存取的存储结构。</p>
<h5 id="算法2-8在单链表中插入一个数据元素"><a href="#算法2-8在单链表中插入一个数据元素" class="headerlink" title="算法2.8在单链表中插入一个数据元素"></a>算法2.8在单链表中插入一个数据元素</h5><p>在a,b之间插入数据元素x。①首先生成一个数据域为x的结点，②然后插入到单链表中。③需要修改a结点中的指针域，使其指向结点x④使得结点x的指针域指向结点b</p>
<p>设s为指向结点x的指针，p为单链表中指向结点a的指针，则：</p>
<p><code>s-&gt;next=p-&gt;next;    p-&gt;next=s;</code></p>
<h5 id="算法2-9在单链表中删除一个数据元素"><a href="#算法2-9在单链表中删除一个数据元素" class="headerlink" title="算法2.9在单链表中删除一个数据元素"></a>算法2.9在单链表中删除一个数据元素</h5><p>a,b,c   要求删除结点b。则需要 修改结点a的指针域。</p>
<p><code>p-&gt;next=p-&gt;next-&gt;next;</code></p>
<p><strong>在单链表中插入和删除一个数据元素，仅需要修改指针而不需要移动元素。</strong></p>
<h5 id="算法2-10-头插法"><a href="#算法2-10-头插法" class="headerlink" title="算法2.10 头插法"></a>算法2.10 头插法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先:L-&gt;next=null;</span><br><span class="line">for(i=n;i&gt;0;--i)&#123;</span><br><span class="line">	p=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">	scanf(&amp;p-&gt;data);</span><br><span class="line">	p-&gt;next=L-&gt;next;</span><br><span class="line">	L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">//即一直在链表的首部进行插入。</span><br></pre></td></tr></table></figure>
<h5 id="算法2-11-将两个有序链表并为一个有序链表"><a href="#算法2-11-将两个有序链表并为一个有序链表" class="headerlink" title="算法2.11 将两个有序链表并为一个有序链表"></a>算法2.11 将两个有序链表并为一个有序链表</h5><p>P31</p>
<h5 id="算法2-12-线性表的静态单链表存储结构"><a href="#算法2-12-线性表的静态单链表存储结构" class="headerlink" title="算法2.12 线性表的静态单链表存储结构"></a>算法2.12 线性表的静态单链表存储结构</h5><p>数据的第零分量 可看出是头结点，其指针域指示链表的第一个结点。</p>
<p><strong>静态链表</strong></p>
<p>在静态单链表中查找第1个值为e的元素。</p>
<p>若第i个分量表示链表的第k个结点，则S[i].cur指示第k+1个结点的位置。</p>
<p>i=S[i].cur的操作实为指针后移。 </p>
<h4 id="2-3-2循环链表"><a href="#2-3-2循环链表" class="headerlink" title="2.3.2循环链表"></a>2.3.2循环链表</h4><p><strong>循环链表</strong>是另一种形式的链式存储结果。特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环。</p>
<p>将两个线性表合并成一个表时，仅需要将一个表的表尾和另一个表的表头相接。即：①Ta头结点保存②Tb表接到Ta尾③释放Tb头④Tb尾接到Ta头。</p>
<h4 id="2-3-3-双向链表"><a href="#2-3-3-双向链表" class="headerlink" title="2.3.3 双向链表"></a>2.3.3 双向链表</h4><p>双向链表的结点中有两个指针域，其一指向直接后继，另一指向直接前驱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct DuLNode&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct DuLNode *prior;</span><br><span class="line">	struct DuLNode *next;</span><br><span class="line">&#125;DuLNode,*DuLinkList;</span><br></pre></td></tr></table></figure>
<p>双向链表也有 循环表。</p>
<h5 id="算法2-18-在双向链表中插入（在带头结点的双链循环链表中第i个位置前插入元素e"><a href="#算法2-18-在双向链表中插入（在带头结点的双链循环链表中第i个位置前插入元素e" class="headerlink" title="算法2.18  在双向链表中插入（在带头结点的双链循环链表中第i个位置前插入元素e)"></a>算法2.18  在双向链表中插入（在带头结点的双链循环链表中第i个位置前插入元素e)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=GetElemP_DuL(L,i);//p指向第i个元素</span><br><span class="line">s=(DuLinkList)malloc(sizeof(DuLNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;prior=p-&gt;prior;</span><br><span class="line">p-&gt;prior-&gt;next=s;</span><br><span class="line">s-&gt;next=p;</span><br><span class="line">p-&gt;prior=s;</span><br></pre></td></tr></table></figure>
<h5 id="算法2-19-在双向链表中删除第i个元素"><a href="#算法2-19-在双向链表中删除第i个元素" class="headerlink" title="算法2.19 在双向链表中删除第i个元素"></a>算法2.19 在双向链表中删除第i个元素</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=GetElemP_DuL(L,i);//p指向第i个元素</span><br><span class="line">p-&gt;prior-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior=p&gt;prior;</span><br><span class="line">free(p);</span><br><span class="line">return ok;</span><br></pre></td></tr></table></figure>
<p><strong>从实际应用角度出发重新定义线性链表及其基本操作</strong>：<br>一个带头结点的线性链表类型定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct LNode&#123;//结点类型</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct LNode *next;</span><br><span class="line">&#125;*Link,*Position;</span><br><span class="line"></span><br><span class="line">typedef struct&#123;//链表类型</span><br><span class="line">	Link head,tail;//分别指向线性链表中的头结点和最后一个结点</span><br><span class="line">	int len;//指示线性链表中数据元素的个数。</span><br><span class="line">&#125;LinkList;</span><br></pre></td></tr></table></figure>
<p><strong>P38—-39</strong></p>
<h3 id="2-4一元多项式的表示及相加"><a href="#2-4一元多项式的表示及相加" class="headerlink" title="2.4一元多项式的表示及相加"></a>2.4一元多项式的表示及相加</h3><p>一般情况下的一元n次多项式可写成：</p>
<script type="math/tex; mode=display">
P_n(x)=p_1x^{e_1}+p_2x^{e_2}+……+p_mx^{e_m}</script><p>一元多项式的计算：</p>
<p>两个一元多项式的乘法的运算，可以利用两个一元多项式的加法的 算法来实现，因为乘法运算可以分解为一系列的加法运算。</p>
<script type="math/tex; mode=display">
M(x)=A(x)*B(x)=……
每一项都是一个一元多项式</script><h3 id="本章习题-1"><a href="#本章习题-1" class="headerlink" title="本章习题"></a>本章习题</h3><p>11.若指定有n个元素的向量，则建立一个有序单链表的时间复杂性的量级是（  C）。</p>
<p>A．O(1)      B．O(n)       <strong>C．O(n2)</strong>      D．O(nlog2n)</p>
<h2 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h2><p>从数据结构角度看，栈和队列也是线性表，是操作受限的线性表。</p>
<h3 id="3-1栈"><a href="#3-1栈" class="headerlink" title="3.1栈"></a>3.1栈</h3><h4 id="3-1-1-抽象数据类型栈的定义"><a href="#3-1-1-抽象数据类型栈的定义" class="headerlink" title="3.1.1 抽象数据类型栈的定义"></a>3.1.1 抽象数据类型栈的定义</h4><p>栈是限定仅在表尾进行插入或删除操作的线性表。对栈来说，表尾端有特殊含义，称为栈顶（top），表头端称为栈底（bottom），不含元素的空表称为空栈。</p>
<p><strong>栈</strong> 又称 <strong>后进先出的线性表</strong>（LIFO）</p>
<blockquote>
<p> 基本操作：</p>
<p>InitStack</p>
<p>DestoryStack</p>
<p>ClearStack</p>
<p>StackEmpty</p>
<p>StackLength</p>
<p>GetTop</p>
<p>Push(&amp;S,e);//插入元素e为新的栈顶元素</p>
<p>Pop(&amp;S,e);//删除S的栈顶元素，并用e返回其值</p>
<p>StackTraverse</p>
</blockquote>
<h4 id="3-1-2-栈的表示和实现（栈也有两种存储表示方法）"><a href="#3-1-2-栈的表示和实现（栈也有两种存储表示方法）" class="headerlink" title="3.1.2 栈的表示和实现（栈也有两种存储表示方法）"></a>3.1.2 栈的表示和实现（栈也有两种存储表示方法）</h4><p>顺序栈：栈的顺序存储结构是利用一组地址连续的存储单位一次存放自栈底到栈顶的数据元素，同时附设指针top指示栈顶元素在顺序栈中的位置。</p>
<p>顺序栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">	SElemType *base;//栈底指针，若base值为null，则表明栈结构不存在</span><br><span class="line">	SElemTpye *top;//栈顶指针，其初始值指向栈底，top=base可作为栈空的标志。</span><br><span class="line">	int stacksize;//指示栈的当前可使用的最大容量。</span><br><span class="line">&#125;SqStack;</span><br><span class="line">在非空栈中，其栈顶指针始终在栈顶元素的下一个位置上。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//构造一个空栈S</span><br><span class="line">S.base=(SElemType *)malloc(STACK_INIIT_SIZE*sizeof(SElemType));</span><br><span class="line">S.top=S.base;</span><br><span class="line">S.stacksize=STACK_INIT_SIZE;</span><br><span class="line">//栈满，追加存储空间。</span><br><span class="line">S.base=(SElemType *)realloc(S.base,(S.stacksize+STACK_INIIT_SIZE)*sizeof(SElemType));</span><br><span class="line">S.top=S.base+S.stacksize;</span><br><span class="line">S.stacksize+=STACK_INIT_SIZE;</span><br><span class="line">//插入元素e作为新的栈顶元素</span><br><span class="line">*S.top++=e;</span><br><span class="line">//删除S的栈顶元素，用e返回其值</span><br><span class="line">e=*--S.top;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-栈的应用举例"><a href="#3-2-栈的应用举例" class="headerlink" title="3.2 栈的应用举例"></a>3.2 栈的应用举例</h3><h4 id="3-2-1数制转换"><a href="#3-2-1数制转换" class="headerlink" title="3.2.1数制转换"></a>3.2.1数制转换</h4><p>基本原理：</p>
<script type="math/tex; mode=display">
N=(N div d)*d+N mod d</script><p>其中div是整除运算，mod为求余运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将十进制转为八进制</span><br><span class="line">while(N)&#123;</span><br><span class="line">	Push(S,N%8);</span><br><span class="line">	N=N/8;</span><br><span class="line">&#125;//进栈</span><br><span class="line"></span><br><span class="line">while(!StackEmpty(S))&#123;</span><br><span class="line">	Pop(S,e);</span><br><span class="line">    printf(&quot;%d&quot;,e);</span><br><span class="line">&#125;//出栈</span><br><span class="line">利用后进先出的特性。</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-括号匹配的检验"><a href="#3-2-2-括号匹配的检验" class="headerlink" title="3.2.2 括号匹配的检验"></a>3.2.2 括号匹配的检验</h4><p>建议括号是否匹配的方法可用“期待的急迫程度”这个概念来描述。</p>
<h4 id="3-2-3-行编辑程序"><a href="#3-2-3-行编辑程序" class="headerlink" title="3.2.3 行编辑程序"></a>3.2.3 行编辑程序</h4><p>接受用户从终端输入的程序或数据，并存入用户的数据区。</p>
<p>若发现键入一个错误的字符，则补进一个退格符“#”。若果差错较多，这进入一个退行符“@”。</p>
<p>为此，可设这个输入缓冲区为一个栈结构，当终端接受了一个字符后，对其进行判断，如果既不是退格符也不是退行符，则将该字符压入栈顶。若为退格符，则从栈顶删去一个字符，如果为退行符，则将字符栈清为空栈。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(ch!=EOF)&#123;//EOF是全文结束符。</span><br><span class="line"> while(ch!+EOF&amp;&amp;ch!=&#x27;\n&#x27;)&#123;</span><br><span class="line">	switch(ch)&#123;</span><br><span class="line">	case &#x27;#&#x27;:Pop(S,c);	break;</span><br><span class="line">	case &#x27;@&#x27;:ClearStack(S);	break;</span><br><span class="line">	default:Push(S,ch);	break;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-迷宫求解-待-理解"><a href="#3-2-4-迷宫求解-待-理解" class="headerlink" title="3.2.4 迷宫求解(待 理解)"></a>3.2.4 迷宫求解(待 理解)</h4><p>P51</p>
<h4 id="3-2-5-表达式求值"><a href="#3-2-5-表达式求值" class="headerlink" title="3.2.5 表达式求值"></a>3.2.5 表达式求值</h4><p>任何一个表达式都是由操作数，运算符和界限符组成的，称他们为单词。</p>
<p>为实现算符优先算法，可以使用两个工作栈。一个称为OPTR，用 以寄存运算符，另一个称做 OPND，用以寄存操作数或运算结果。算法的基本思想如下：</p>
<p>①首先置操作数栈为空栈，表达式起始符“#”为运算符栈的栈底元素。②以此读入表达式中每个字符，若是操作数则进OPND栈，若是运算符则和OPTR栈的栈顶运算符比较优先权后做相应操作，直至每个表达式求值完毕（即OPTR栈的栈顶元素和当前读入的字符均为“#”）</p>
<h3 id="3-3-栈和递归的实现"><a href="#3-3-栈和递归的实现" class="headerlink" title="3.3 栈和递归的实现"></a>3.3 栈和递归的实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n,<span class="type">char</span> x,<span class="type">char</span> y,<span class="type">char</span> z)</span>&#123;<span class="comment">//将塔座x上安直径由小到大且自上而下编号为1到n的n个圆盘按规则搬到塔座z上，y可用作辅助塔座。搬动操作move(x,n,z)可定义为（c是初值为0的全局变量，对搬动计数）</span></span><br><span class="line"><span class="comment">//printf(&quot;%i.move disk %i from %c to %c\n&quot;,++c,n,x,z);</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        move(x,<span class="number">1</span>,z);<span class="comment">//将编号为1的圆盘从x移动到z</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>,x,z,y);<span class="comment">//将x上编号为1至n-1的圆盘移动到y,z作辅助</span></span><br><span class="line">        move(x,n,z);<span class="comment">//将编号为n的圆盘从x移动到z</span></span><br><span class="line">        hanoi(n<span class="number">-1</span>,y,x,z);<span class="comment">//将y上编号为1至n-1的圆盘移动到z,x作辅助</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-队列"><a href="#3-4-队列" class="headerlink" title="3.4 队列"></a>3.4 队列</h3><p><strong>队列</strong>是<strong>先进先出</strong>(FIFO)的线性表。只允许在表的一端进行插入，而在另一端进行删除元素。在队列中，允许<strong>插入</strong>的一端叫做<strong>队尾</strong>，允许<strong>删除</strong>的一端则称做<strong>队头</strong>。</p>
<blockquote>
<p>队列的基本操作：</p>
<p>GetHead(Q,&amp;e);//用e返回Q的队头元素。</p>
<p>EnQueue(&amp;Q,e);//插入元素e为Q的新的队尾元素</p>
<p>DeQueue(&amp;Q,&amp;e);//删除Q的队头元素，并用e返回其值。</p>
</blockquote>
<p><strong>限定性数据结构：双端队列deque</strong>：双端队列是限定插入和删除操作在表的两端进行的线性表。</p>
<h4 id="3-4-2-链队列——队列的链式表示和实现"><a href="#3-4-2-链队列——队列的链式表示和实现" class="headerlink" title="3.4.2 链队列——队列的链式表示和实现"></a>3.4.2 链队列——队列的链式表示和实现</h4><p>用链表表示的队列简称为链队列。</p>
<p>为了方便起见，我们给链队列添加一个头结点，并令头指针指向头结点，由此，空的链队列的判决条件为：头指针和尾指针均指向头结点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链队列——队列的链式存储结构：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    QueuePtr front;</span><br><span class="line">    QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>
<p>队列的基本操作：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造一个空队列：</span></span><br><span class="line">status <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">    Q.front=Q.rear=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    Q.front-&gt;next=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁队列Q</span></span><br><span class="line"><span class="keyword">while</span>(Q.front)&#123;</span><br><span class="line">    Q.rear=Q.front-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(Q.front);</span><br><span class="line">    Q.front=Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入元素e为Q的新的队尾元素</span></span><br><span class="line">p=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">p-&gt;data=e;</span><br><span class="line">p-&gt;next=null;</span><br><span class="line">Q.rear-&gt;next=p;</span><br><span class="line">Q.rear=p;</span><br><span class="line"><span class="comment">//删除Q的队头元素，用e返回其值，</span></span><br><span class="line">p=Q.front-&gt;next;</span><br><span class="line">e=p-&gt;data;</span><br><span class="line">Q.front-&gt;next=p-&gt;next;<span class="comment">//头指针往后</span></span><br><span class="line"><span class="keyword">if</span>(Q.rear==p)Q.rear=Q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-4-3-循环队列——队列的顺序表示和实现"><a href="#3-4-3-循环队列——队列的顺序表示和实现" class="headerlink" title="3.4.3 循环队列——队列的顺序表示和实现"></a>3.4.3 <strong>循环队列</strong>——队列的顺序表示和实现</h4><h5 id="有待理解"><a href="#有待理解" class="headerlink" title="有待理解"></a>有待理解</h5><p>初始化建空队列时，令front=rear=0;每当插入新的队列尾元素时，尾指针增1，每当删除队列头元素时，头指针增1。</p>
<p><strong>在非空队列中，头指针始终指向队列头元素，而尾指针始终指向队列尾元素的下一个位置。</strong></p>
<p>将顺序队列臆造为一个环状的空间，称之为 循环队列<strong>：约定 ”队列头指针在队列尾指针的下一位置（指环状的下一位置）上“作为队列呈”满“状态的标志</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环队列——队列的顺序存储结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    QElemType *base;<span class="comment">//初始化的动态分配存储空间</span></span><br><span class="line">    <span class="type">int</span> front;<span class="comment">//头指针，指向队列头元素</span></span><br><span class="line">    <span class="type">int</span> rear;<span class="comment">//尾指针，指向队列尾元素的下一个位置。</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="comment">//构造一个空队列</span></span><br><span class="line">Q.base=(QElemType*)<span class="built_in">malloc</span>(MAXSIZE*<span class="keyword">sizeof</span>(QElemType));</span><br><span class="line">Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//返回队列的长度</span></span><br><span class="line"><span class="keyword">return</span> (Q.rear-Q.front+MAXSIZE)%MAXSIZE;</span><br><span class="line"><span class="comment">//插入元素e为Q的新的队尾元素。</span></span><br><span class="line"><span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MAXSIZE==Q.front)<span class="keyword">return</span> error;</span><br><span class="line">Q.base[Q.rear]=e;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line"><span class="comment">//删除队列的头元素，用e返回其值。</span></span><br><span class="line">e=Q.base[Q.front];</span><br><span class="line">Q.front=(Q.front+<span class="number">1</span>)%MAXSIZE;</span><br></pre></td></tr></table></figure>
<h4 id="栈和队列习题"><a href="#栈和队列习题" class="headerlink" title="栈和队列习题"></a>栈和队列习题</h4><p>（2）设有一个递归算法如下</p>
<p>​    int fact(int n) { //n大于等于0</p>
<p>​       if(n&lt;=0) return 1;</p>
<p>​       else return n*fact(n-1);    }</p>
<p>则计算fact(n)需要调用该函数的次数为（ C× ）。 <strong>fact(n)本身计一次，</strong></p>
<p><strong>A． n+1</strong>       B． n-1       C． n         D． n+2</p>
<p>（6）最大容量为n的循环队列，队尾指针是rear，队头是front，则<strong>队空</strong>的条件是（　<strong>B）。</strong></p>
<p> <code>A. (rear+1)%n==front          B. rear==front</code>                   </p>
<p><code>C．rear+1==front            D. (rear-l)%n==front</code></p>
<p>（10）设栈S和队列Q的初始状态为空，元素e1，e2，e3，e4,e5和e6依次通过栈S，一个元素出栈后即进队列Q，若6个元素出队的序列是e2，e4，e3,e6,e5,e1则栈S的容量至少应该是(  C )。</p>
<p>A． 6      B. 4      <strong>C. 3</strong>     D. 2</p>
<h2 id="第四章-串"><a href="#第四章-串" class="headerlink" title="第四章 串"></a>第四章 串</h2><h3 id="4-1串类型的定义"><a href="#4-1串类型的定义" class="headerlink" title="4.1串类型的定义"></a>4.1串类型的定义</h3><p>串（或字符串）是由零个或多个字符组成的有限序列，一般即为:</p>
<script type="math/tex; mode=display">
s='a_1a_2a_3…a_n'(n≥0)</script><blockquote>
<p>常见概念：</p>
<p>串的长度：串中字符的数目                空串：零个 字符</p>
<p>子串；主串；字符在串中的位置；</p>
<p>两个串相等：两个串长度相等，并且各个对应位置的字符都相等。</p>
<p>空格串（blank string）：由一个或多个空格组成的串。它的长度是串中空格的个数，（和空串不一样）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">///串定位-子串的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(Stirng S,String T,<span class="type">int</span> pos)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        n=StrLength(S);</span><br><span class="line">        m=StrLength(T);</span><br><span class="line">        i=pos;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)&#123;</span><br><span class="line">			SubString(sub,S,i,m);</span><br><span class="line">            <span class="keyword">if</span>(StrCompare(sub,T)!=<span class="number">0</span>)	++i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> i;<span class="comment">//返回子串在主串中的位置。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2串的表示和实现"><a href="#4-2串的表示和实现" class="headerlink" title="4.2串的表示和实现"></a>4.2串的表示和实现</h3><p>串有三种机内表示方法。</p>
<h4 id="4-2-1定长顺序存储表示"><a href="#4-2-1定长顺序存储表示" class="headerlink" title="4.2.1定长顺序存储表示"></a>4.2.1定长顺序存储表示</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSTRLEN 255<span class="comment">//用户可在255内定义最大串长</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> SString[MAXSTRLEN+<span class="number">1</span>];<span class="comment">//0号单元存放串的长度</span></span><br></pre></td></tr></table></figure>
<h5 id="串联接"><a href="#串联接" class="headerlink" title="串联接"></a>串联接</h5><blockquote>
<p>三种情况：</p>
<p>S1[0]+S2[0]≤MAXSTRLEN;</p>
<p>S1[0]<MAXSTRLEN而S1[0]+S2[0]>MAXSTRLEN;</p>
<p>S1[0]=MAXSTRLEN;</p>
</blockquote>
<h5 id="求子串（即为复制字符序列的过程）"><a href="#求子串（即为复制字符序列的过程）" class="headerlink" title="求子串（即为复制字符序列的过程）"></a>求子串（即为复制字符序列的过程）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status <span class="title function_">SubString</span><span class="params">(SString &amp;Sub,SString S,<span class="type">int</span> pos,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>||pos&gt;S[<span class="number">0</span>]||len&lt;<span class="number">0</span>||len&gt;S[<span class="number">0</span>]-pos+<span class="number">1</span>)<span class="keyword">return</span> error;</span><br><span class="line">    Sub[<span class="number">1.</span>.len]=S[pos..pos+len<span class="number">-1</span>];</span><br><span class="line">    Sub[<span class="number">0</span>]=len;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在顺序存储结构中，实现串操作基于：字符序列的复制，时间复杂度基于复制的字符序列的长度。  截尾法常用于处理长度超过上限。</p>
<h4 id="4-2-2堆分配存储表示"><a href="#4-2-2堆分配存储表示" class="headerlink" title="4.2.2堆分配存储表示"></a>4.2.2堆分配存储表示</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *ch;<span class="comment">//若是非空串，则按串长分配存储区，否则ch为null。</span></span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;HString;</span><br></pre></td></tr></table></figure>
<p>StrCopy(&amp;T,S)实现算法：先释放串T所占的空间，为T开辟和S长度相等的存储空间，后将串S的值复制到串T中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">Status <span class="title function_">StrInsert</span><span class="params">(HString &amp;S,<span class="type">int</span> pos,HString T)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">S.ch=(<span class="type">char</span> *)<span class="built_in">realloc</span>(S.ch,(S.length+T.length)*<span class="keyword">sizeof</span>(<span class="type">char</span>)));<span class="comment">//重新分配空间</span></span><br><span class="line"><span class="keyword">for</span>(i=S.length<span class="number">-1</span>,i&gt;pos<span class="number">-1</span>;--i)	S.ch[i+T.length]=S.ch[i];<span class="comment">//腾出位置</span></span><br><span class="line">S.ch[pos<span class="number">-1.</span>.pos+T.length<span class="number">-2</span>]=T.ch[<span class="number">0.</span>.T.length<span class="number">-1</span>];<span class="comment">//插入T</span></span><br></pre></td></tr></table></figure>
<p><strong>P76-77有串的堆分配存储表示及其基本操作</strong></p>
<h4 id="4-2-3串的块链存储表示"><a href="#4-2-3串的块链存储表示" class="headerlink" title="4.2.3串的块链存储表示"></a>4.2.3串的块链存储表示</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE 80</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> ch[CHUNKSIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Chunk;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Chunk *head,*tail;<span class="comment">//串的头和尾指针</span></span><br><span class="line">    <span class="type">int</span> curlen;<span class="comment">//串的当前长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>链式存储方法</p>
<script type="math/tex; mode=display">
存储密度=\frac{串值所占的存储位}{实际分配的存储位}</script><h3 id="4-3串的模式匹配算法（不在期中考范围，待学）"><a href="#4-3串的模式匹配算法（不在期中考范围，待学）" class="headerlink" title="4.3串的模式匹配算法（不在期中考范围，待学）"></a>4.3串的模式匹配算法（不在期中考范围，待学）</h3><p>算法种类：</p>
<ul>
<li>BF算法：古典的，经典的，朴素的，穷举的</li>
<li>KMP算法：速度快</li>
</ul>
<h3 id="4-4串操作应用"><a href="#4-4串操作应用" class="headerlink" title="4.4串操作应用"></a>4.4串操作应用</h3><h4 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h4><h2 id="第五章-数组和广义表"><a href="#第五章-数组和广义表" class="headerlink" title="第五章 数组和广义表"></a>第五章 数组和广义表</h2><h3 id="5-1数组的定义"><a href="#5-1数组的定义" class="headerlink" title="5.1数组的定义"></a>5.1数组的定义</h3><h3 id="5-2数组的顺序存储表示"><a href="#5-2数组的顺序存储表示" class="headerlink" title="5.2数组的顺序存储表示"></a>5.2数组的顺序存储表示</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ARRAY_DIM 8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *base;<span class="comment">//数组元素基址，由initArray分配</span></span><br><span class="line">    <span class="type">int</span> dim;<span class="comment">//数组维数</span></span><br><span class="line">    <span class="type">int</span> *bounds;<span class="comment">//数组维界基址</span></span><br><span class="line">    <span class="type">int</span> *constants;<span class="comment">//数组映像函数常量基址</span></span><br><span class="line">&#125;Array;</span><br></pre></td></tr></table></figure>
<h3 id="5-4广义表的定义"><a href="#5-4广义表的定义" class="headerlink" title="5.4广义表的定义"></a>5.4广义表的定义</h3><p>广义表是线性表的推广。</p>
<p>广义表一般记作：</p>
<script type="math/tex; mode=display">
LS=(a_1,a_2,…,a_n)</script><p>其中，LS是广义表的名称，n是其长度，在广义表中a_i可以是单个元素，亦可以是广义表，分别称为广义表的原子和子表。当广义表LS非空时，称第一个元素a1为LS的表头head，称其余元素组成的表(a2,a3,…an)为LS的表尾tail。</p>
<p>结论：</p>
<ul>
<li>列表的元素可以是子表，子表的元素还可以是子表</li>
<li>列表可为其他列表所共享</li>
<li>列表可以是一个递归的表，即列表也可以是其本身的一个子表。</li>
<li>任何一个非空列表的表头可能是原子，也可能是列表，而其表尾必定是列表。</li>
</ul>
<h3 id="5-5广义表的存储结构"><a href="#5-5广义表的存储结构" class="headerlink" title="5.5广义表的存储结构"></a>5.5广义表的存储结构</h3><p>通常采用链式存储结构，每个数据元素可用一个结点表示。</p>
<h2 id="第六章-树和二叉树"><a href="#第六章-树和二叉树" class="headerlink" title="第六章 树和二叉树"></a>第六章 树和二叉树</h2><p>树形结构是一类重要的<strong>非线性数据结构。</strong></p>
<h3 id="6-1数的定义和基本术语"><a href="#6-1数的定义和基本术语" class="headerlink" title="6.1数的定义和基本术语"></a>6.1数的定义和基本术语</h3><p>树是n个结点的有限集。在任意一棵非空树种，有且仅有一个特定的称为根的结点。</p>
<p>树的表示方法：①嵌套集合②以广义表的形式表示③凹入表示法</p>
<blockquote>
<p>基本术语；</p>
<p>结点的度（结点拥有的子树的数目）</p>
<p>叶子、终端结点</p>
<p>非终端结点、分支结点</p>
<p>树的度（各结点度的最大值）</p>
<p>孩子，双亲，兄弟，祖先，子孙</p>
<p>结点的层次：（根为第一层，根的孩子为第二层）</p>
<p>堂兄弟：其双亲在同一层的结点</p>
<p>树的深度：树中结点的最大层次</p>
<p>有序树：树中结点的各子树看成从左至右是有次序的（即不能互换）</p>
<p>森林：是m棵互不相交的树的集合。</p>
</blockquote>
<h3 id="6-2二叉树"><a href="#6-2二叉树" class="headerlink" title="6.2二叉树"></a>6.2二叉树</h3><p>特点：每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点）。二叉树的子树有左右之分，其次序不能任意颠倒。</p>
<p>3个结点的二叉树有5种；3个结点的树有2种。</p>
<h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><p><strong>性质1：在二叉树的第i层上最多有2^(i-1)个结点（i≥1）</strong></p>
<p><strong>性质2：深度为K的二叉树最多有2^k-1个结点（k≥1)</strong></p>
<p><strong>性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1</strong></p>
<p>完全二叉树和满二叉树</p>
<p><strong>性质4：具有n个结点的完全二叉树的深度为[log_2n]+1</strong></p>
<script type="math/tex; mode=display">
k=[log_2n]+1</script><p><strong>性质5：n个结点的完全二叉树，深度为<script type="math/tex">[log_2n]+1</script>的结点按层次编号，从上到下，从左到右。则：①i=1时，其为二叉树的根，无双亲②i的左孩子是2i，右孩子是2i+1；其中i是双亲。</strong></p>
<h4 id="6-2-3二叉树的存储结构"><a href="#6-2-3二叉树的存储结构" class="headerlink" title="6.2.3二叉树的存储结构"></a>6.2.3二叉树的存储结构</h4><h5 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h5><p>仅适用于完全二叉树，否者严重造成存储空间的浪费。</p>
<h5 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h5><p><strong>在含n个结点的二叉链表中有n+1个空链域。</strong><script type="math/tex">2n-(n-1)=n+1</script>其中n个结点有2n个链域，除根结点外，其它结点都有一个双亲（即都占有着双亲的一个链域）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>
<h3 id="6-3遍历二叉树和线索二叉树"><a href="#6-3遍历二叉树和线索二叉树" class="headerlink" title="6.3遍历二叉树和线索二叉树"></a>6.3遍历二叉树和线索二叉树</h3><p><strong>二叉树是一种非线性结构</strong></p>
<p>三种遍历方法：</p>
<ul>
<li>先序遍历：根结点——左子树——右子树</li>
<li>中序遍历：左子树——根结点——右子树</li>
<li>后序遍历：左子树——右子树——根结点</li>
</ul>
<p><strong>递归算法：</strong></p>
<p>P131</p>
<h4 id="6-3-2线索二叉树"><a href="#6-3-2线索二叉树" class="headerlink" title="6.3.2线索二叉树"></a>6.3.2线索二叉树</h4><p>增加了两个标志域，</p>
<p>这种结构构成的二叉链表作为二叉树 的存储结构，叫做线索链表。</p>
<p>其中指向结点前驱和后继的指针，叫做线索。</p>
<p>加上线索的二叉树又称为线索二叉树。</p>
<p>实线为指针（指向左右子树），虚线为线索（指向前驱和后继）</p>
<p>对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。</p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>复习</tag>
      </tags>
  </entry>
</search>
